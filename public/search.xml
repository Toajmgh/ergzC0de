<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>最新IDEA永久激活</title>
    <url>/2019/12/25/idea-latest-active.html</url>
    <content><![CDATA[<p><strong>已支持2019.2的版本且适用Windows、Mac、Ubuntu等所有平台</strong></p>
<h3 id="1-下载新版破解补丁"><a href="#1-下载新版破解补丁" class="headerlink" title="1.下载新版破解补丁"></a>1.下载新版破解补丁</h3><p>下载链接：<a href="http://cdn.ergzcode.com/jetbrains/jetbrains-agent.jar" target="_blank" rel="noopener">http://cdn.ergzcode.com/jetbrains/jetbrains-agent.jar</a>，并将它放置到IDEA安装目录的bin目录下（位置可随意）。</p>
<h3 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h3><p>如果你是刚下载的IDEA，先点击激活窗口的免费试用，创建一个新项目来进入到IDEA的工作目录。进入IDEA的工作界面后，点击IDEA的上方的菜单栏‘Help’-&gt;‘Edit Custom VM Options…’，如果提示是否要创建文件，请点‘Yes’，打开idea64.exe.vmoptions文件在末行添加：-javaagent:你的IDEA安装目录\bin\jetbrains-agent.jar</p>
<a id="more"></a>

<pre><code>-Xms512m
-Xmx2048m
-XX:ReservedCodeCacheSize=480m
-XX:+UseConcMarkSweepGC
-XX:SoftRefLRUPolicyMSPerMB=50
-ea
-XX:CICompilerCount=2
-Dsun.io.useCanonPrefixCache=false
-Djava.net.preferIPv4Stack=true
-Djdk.http.auth.tunneling.disabledSchemes=&quot;&quot;
-XX:+HeapDumpOnOutOfMemoryError
-XX:-OmitStackTraceInFastThrow
-Djdk.attach.allowAttachSelf
-Dkotlinx.coroutines.debug=off
-Djdk.module.illegalAccess.silent=true
-javaagent:C:\Program Files\JetBrains\ideaIU 2019.2.3\bin\jetbrains-agent.jar</code></pre><p>请仔细检查补丁路径是否正确，如果错误则会出现IDEA打不开的情况，这时候可以删除用户配置目录下的IDEA文件夹:</p>
<ul>
<li>windwos：C:\Users\用户名\</li>
<li>macos：~/Library/Preferences/</li>
<li>ubuntu：~/.    </li>
</ul>
<p><strong>修改完配置文件之后重启IDEA</strong></p>
<h3 id="3-输入激活码"><a href="#3-输入激活码" class="headerlink" title="3.输入激活码"></a>3.输入激活码</h3><p>重启IDEA之后，点击菜单栏中的 ‘Help ’-&gt; ‘Register…’，这里有两种激活方式：</p>
<p>一.选择最后一种License server激活方式，地址填入：<a href="http://jetbrains-license-server" target="_blank" rel="noopener">http://jetbrains-license-server</a> ,或者点击按钮：‘Discover Server’来自动填充地址，完成激活。</p>
<p>二.如果服务器激活方式无法激活，还可以选择Activation code方式激活，激活码下载:<a href="http://cdn.ergzcode.com/jetbrains/%E6%BF%80%E6%B4%BB%E7%A0%81.txt" target="_blank" rel="noopener">激活码.txt</a>，下载复制激活码填入，点击OK即可。</p>
<p>服务器激活是没有期限的，是永久有效。激活码激活的有效期到2089年。</p>
<p><strong>本文链接：<a href="">最新IDEA永久激活</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>资源整理[置顶]</title>
    <url>/2019/12/14/resources-collection-top.html</url>
    <content><![CDATA[<p>本文链接：<a href="http://www.ergzcode.com/2019/12/14/resources-collection-top.html">http://www.ergzcode.com/2019/12/14/resources-collection-top.html</a></p>
<a id="more"></a>

<h1 id="1-Python"><a href="#1-Python" class="headerlink" title="1.Python"></a>1.Python</h1><ul>
<li><p><b>某马全套Python2018（15期）</b><br>链接：<a href="https://pan.baidu.com/s/1YZ4Rt7udqhguEx44gnzoSQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1YZ4Rt7udqhguEx44gnzoSQ</a> 提取码：<code>6xiv</code></p>
</li>
<li><p><b>某内全套Python2019年3-7月</b><br>链接：<a href="https://pan.baidu.com/s/1JAIdeYLNI6BNReCQHHYztQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1JAIdeYLNI6BNReCQHHYztQ</a> 提取码：<code>ct3b</code></p>
</li>
<li><p><b>某男孩Python全栈15期</b><br>链接：<a href="https://pan.baidu.com/s/1ZeUunSf-Q7bBL9HXFL0PDA" target="_blank" rel="noopener">https://pan.baidu.com/s/1ZeUunSf-Q7bBL9HXFL0PDA</a> 提取码：<code>ad4l</code></p>
</li>
<li><p><b>某男孩Python全栈16期2019年结课</b><br>链接：<a href="https://pan.baidu.com/s/17OqQ1L4PSQlPqpQxcxtDRA" target="_blank" rel="noopener">https://pan.baidu.com/s/17OqQ1L4PSQlPqpQxcxtDRA</a> 提取码：<code>bgle</code></p>
</li>
<li><p><b>某男孩Python22期（加密版本）</b><br>链接：<a href="https://pan.baidu.com/s/1PPtGubLGlyM9yKbVM_Q_WQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1PPtGubLGlyM9yKbVM_Q_WQ</a> 提取码：<code>x4t9</code></p>
</li>
<li><p><b>Python爬虫（入门+进阶)</b><br>链接：<a href="https://pan.baidu.com/s/152IMovvjz8BRKY6ZUs5Itw" target="_blank" rel="noopener">https://pan.baidu.com/s/152IMovvjz8BRKY6ZUs5Itw</a> 提取码：<code>5gy3</code></p>
</li>
<li><p><b>Python3+TensorFlow开发人脸识别智能小程序</b><br>链接：<a href="https://pan.baidu.com/s/1QhG7fgvGq7-vOXFM6PcYHA" target="_blank" rel="noopener">https://pan.baidu.com/s/1QhG7fgvGq7-vOXFM6PcYHA</a> 提取码：<code>5u10</code></p>
</li>
<li><p><b>Python某马头条推荐系统项目</b><br>链接：<a href="https://pan.baidu.com/s/1gbuZuF2LAAS2BLymj-4ZbQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1gbuZuF2LAAS2BLymj-4ZbQ</a> 提取码：<code>n22v</code></p>
</li>
<li><p><b>python金融实务从入门到精通</b><br>链接：<a href="https://pan.baidu.com/s/1qBqejqOEqI3scjEr6EcBXg" target="_blank" rel="noopener">https://pan.baidu.com/s/1qBqejqOEqI3scjEr6EcBXg</a> 提取码：<code>v1rv</code></p>
</li>
<li><p><b>云课堂从零搭建数字货币量化交易系统</b><br>链接：<a href="https://pan.baidu.com/s/1dKehNYO337jZ67WJppBrPw" target="_blank" rel="noopener">https://pan.baidu.com/s/1dKehNYO337jZ67WJppBrPw</a> 提取码：<code>vdx6</code></p>
</li>
</ul>
<h1 id="2-运维"><a href="#2-运维" class="headerlink" title="2.运维"></a>2.运维</h1><ul>
<li><b>Docker+Kubernetes+Jenkins教程</b><br>链接：：<a href="https://pan.baidu.com/s/1VMcFl3moDul3tOQdGPFRnw" target="_blank" rel="noopener">https://pan.baidu.com/s/1VMcFl3moDul3tOQdGPFRnw</a> 提取码：<code>w0xv</code></li>
</ul>
<h1 id="3-Java"><a href="#3-Java" class="headerlink" title="3.Java"></a>3.Java</h1><ul>
<li><p><b>某马18年Java教程完整版</b><br>链接：<a href="https://pan.baidu.com/s/1RT2H-dI_4LLLIssq2WaEnw" target="_blank" rel="noopener">https://pan.baidu.com/s/1RT2H-dI_4LLLIssq2WaEnw</a> 提取码：<code>m2lt</code></p>
</li>
<li><p><b>某马18年Java教程赠品完整版</b><br>链接：<a href="https://pan.baidu.com/s/1Y8ASBWacpQH35wc1ZY7FZA" target="_blank" rel="noopener">https://pan.baidu.com/s/1Y8ASBWacpQH35wc1ZY7FZA</a> 提取码：<code>2rxx</code></p>
</li>
<li><p><b>某马18年Java教程赠品追加完整版</b><br>链接：<a href="https://pan.baidu.com/s/1Z3Tdxcmub6WKc7Q3jfm7Qw" target="_blank" rel="noopener">https://pan.baidu.com/s/1Z3Tdxcmub6WKc7Q3jfm7Qw</a> 提取码：<code>k10s</code></p>
</li>
<li><p><b>2019Java大厂面试整理</b><br>链接：<a href="https://pan.baidu.com/s/1NTVceajFq-0EvgZ8BJreNA" target="_blank" rel="noopener">https://pan.baidu.com/s/1NTVceajFq-0EvgZ8BJreNA</a> 提取码：<code>lzk5</code> </p>
</li>
<li><p><b>2019Java微服务千峰教程</b><br>链接：<a href="https://pan.baidu.com/s/15LrqQbRSP3Ru5Eg69UWG0A" target="_blank" rel="noopener">https://pan.baidu.com/s/15LrqQbRSP3Ru5Eg69UWG0A</a> 提取码：<code>r70w</code></p>
</li>
<li><p><b>极客时间Spring全家桶</b><br>链接：<a href="https://pan.baidu.com/s/1ncRq26L_U7mgNM76-7jYiw" target="_blank" rel="noopener">https://pan.baidu.com/s/1ncRq26L_U7mgNM76-7jYiw</a> 提取码：<code>b9lt</code></p>
</li>
</ul>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>

<p><strong>免责声明：以上所有资源均由网友网上搜集提供更新，仅供读者预览及学习交流使用，下载后请24小时内删除，如果喜欢请购买正版资源!原作者如果认为本站侵犯了您的版权,请联系站长,我们会立即删除!</strong></p>
]]></content>
  </entry>
  <entry>
    <title>Nginx反向代理实现二级域名与端口的映射</title>
    <url>/2019/12/14/nginx-reverse-proxy-implements-the-mapping-of-secondary-domain-names-to-ports.html</url>
    <content><![CDATA[<p><strong>在之前的一篇文章：<a href="http://www.ergzcode.com/2019/11/14/nginx-build-http-file-system.html">Nginx搭建HTTP文件服务器</a>中,我们搭建了一个HTTP的文件服务器，通过8080端口来访问服务。现在我们想通过域名的方式（二级域名）来访问这个HTTP的文件服务器，我们知道通过浏览器URL地址的方式访问一个网站，比如<code>http://www.ergzcode.com</code>,默认的是去服务器找80端口下的服务，也就是<code>http://www.ergzcode.com:80</code>这个地址。考虑到80端口是比较特殊的端口，所以部署hexo时指定的端口是4000，这样将会导致只有使用<code>http://www.ergzcode.com:4000</code>才能访问到本站，但这种的URL无疑是让人接受不了的。</strong></p>
<a id="more"></a>
<p><strong>现在需要做到以下两点：</strong></p>
<ul>
<li>将<code>http://www.ergzcode.com</code>的请求转发给4000端口下的应用程序，也就是通过这种URL访问本站</li>
<li>将<code>http://cdn.ergzcode.com</code>的请求转发给8080端口下的http文件服务器</li>
</ul>
<p><strong>当然在这之前，有个前提就是你需要让<code>cdn.ergzcode.com</code>和<code>www.ergzcode.com</code>这两个域名解析到你的服务器IP上，DNS解析在域名提供商那里作处理,这里不再介绍</strong></p>
<p><strong>现在要做到上面的请求转发，就要用到Nginx的反向代理机制，下面来创建Nginx的配置文件，在<code>/etc/nginx/conf.d</code>目录下创建一个叫做reverse_proxy.conf的文件，文件名可以随意指定，但要以.conf为后缀名，然后加入下面的内容</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">        listen 80;<span class="comment">#监听端口</span></span><br><span class="line">        server_name www.ergzcode.com;<span class="comment">#根据域名跳转</span></span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_redirect off;</span><br><span class="line">                proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">                proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">                proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                proxy_pass http://127.0.0.1:4000;<span class="comment">#跳转的路径</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name cdn.ergzcode.com;</span><br><span class="line">        <span class="comment">#root /usr/local/data/file;</span></span><br><span class="line">        location / &#123;</span><br><span class="line">                <span class="comment"># try_files $uri $uri/ =404;</span></span><br><span class="line">                proxy_redirect off;</span><br><span class="line">                proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">                proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">                proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                proxy_pass http://127.0.0.1:8080;<span class="comment">#跳转的路径</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>执行命令使修改配置生效<code>/etc/init.d/nginx reload</code></strong></p>
<p>访问本站：<a href="http://www.ergzcode.com">http://www.ergzcode.com</a><br>访问HTTP服务器：<a href="http://cdn.ergzcode.com" target="_blank" rel="noopener">http://cdn.ergzcode.com</a><br><strong>完成！！</strong></p>
<p><strong>本文链接：<a href="">Nginx反向代理实现二级域名与端口的映射</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>开发中常用的一些免费API</title>
    <url>/2019/12/11/some-common-and-free-apis-for-developing.html</url>
    <content><![CDATA[<p><strong>为了方便广大的开发者，特此统计了网上诸多的免费API，为您收集免费的接口服务，做一个api的搬运工，以后会每月定时更新新的接口。有些接口来自第三方，在第三方注册就可以成为他们的会员，免费使用他们的部分接口。</strong></p>
<p><b>百度AccessToken</b>:针对HTTP API调用者，百度AIP开…——<a href="https://www.free-api.com/doc/1" target='_blank'>接口地址</a><br><b>语音识别</b>:通过场景识别优化，为车载导航，智能家居和…——<a href="https://www.free-api.com/doc/2" target='_blank'>接口地址</a><br><b>语音合成</b>:将用户输入的文字，转换成流畅自然的语音输…——<a href="https://www.free-api.com/doc/4" target='_blank'>接口地址</a><br><b>出租车票识别(可在线调用)</b>:针对出租车票（现支持北京、上海、深圳）的…——<a href="https://www.free-api.com/doc/6" target='_blank'>接口地址</a><br><b>火车票识别(可在线调用)</b>:支持对大陆火车票的车票号、始发站、目的站…——<a href="https://www.free-api.com/doc/7" target='_blank'>接口地址</a><br><a id="more"></a><b>数字识别(可在线调用)</b>:对图像中的阿拉伯数字进行识别提取，适用于…——<a href="https://www.free-api.com/doc/8" target='_blank'>接口地址</a><br><b>通用文字识别(可在线调用)</b>:支持多场景下的文字检测识别，多项ICDA…——<a href="https://www.free-api.com/doc/9" target='_blank'>接口地址</a><br><b>网络图片文字识别(可在线调用)</b>:能够快速准确识别各种网络图片中的文字，在…——<a href="https://www.free-api.com/doc/10" target='_blank'>接口地址</a><br><b>身份证识别(可在线调用)</b>:支持对二代居民身份证正反面的关键字段识别…——<a href="https://www.free-api.com/doc/11" target='_blank'>接口地址</a><br><b>银行卡识别(可在线调用)</b>:支持对主流银行卡卡号识别，并返回发卡行和…——<a href="https://www.free-api.com/doc/12" target='_blank'>接口地址</a><br><b>驾驶证识别(可在线调用)</b>:支持对机动车驾驶证正页的关键字段识别，包…——<a href="https://www.free-api.com/doc/13" target='_blank'>接口地址</a><br><b>行驶证识别(可在线调用)</b>:支持对机动车行驶证正页的关键字段识别，包…——<a href="https://www.free-api.com/doc/14" target='_blank'>接口地址</a><br><b>手写文字识别(可在线调用)</b>:能够对手写汉字和手写数字进行识别——<a href="https://www.free-api.com/doc/15" target='_blank'>接口地址</a><br><b>增值税发票识别(可在线调用)</b>:识别并结构化返回增值税发票的各个字段及其…——<a href="https://www.free-api.com/doc/16" target='_blank'>接口地址</a><br><b>营业执照识别(可在线调用)</b>:支持对营业执照关键字段的识别，包括单位名…——<a href="https://www.free-api.com/doc/17" target='_blank'>接口地址</a><br><b>车牌识别(可在线调用)</b>:支持对中国大陆机动车车牌的识别，包括地域…——<a href="https://www.free-api.com/doc/18" target='_blank'>接口地址</a><br><b>票据识别(可在线调用)</b>:支持对增值税发票、火车票、出租车票（支持…——<a href="https://www.free-api.com/doc/19" target='_blank'>接口地址</a><br><b>表格文字识别</b>:自动识别表格线及表格内容，结构化输出表头…——<a href="https://www.free-api.com/doc/20" target='_blank'>接口地址</a><br><b>通用物体和场景识别(可在线调用)</b>:支持超过10万类物体和场景识别，接口返回…——<a href="https://www.free-api.com/doc/21" target='_blank'>接口地址</a><br><b>图像主体检测(可在线调用)</b>:检测图片中关键主体位置，接口支持检测单张…——<a href="https://www.free-api.com/doc/22" target='_blank'>接口地址</a><br><b>品牌logo识别(可在线调用)</b>:实现2万类品牌logo识别，接口返回品牌…——<a href="https://www.free-api.com/doc/23" target='_blank'>接口地址</a><br><b>植物识别(可在线调用)</b>:植物识别支持2万多种通用植物识别、近…——<a href="https://www.free-api.com/doc/24" target='_blank'>接口地址</a><br><b>动物识别(可在线调用)</b>:支持数千种动物识别，接口返回名称——<a href="https://www.free-api.com/doc/25" target='_blank'>接口地址</a><br><b>菜品识别(可在线调用)</b>:识别超过5万个菜品，接口返回菜品的名称、…——<a href="https://www.free-api.com/doc/26" target='_blank'>接口地址</a><br><b>地标识别(可在线调用)</b>:支持识别约5万中外著名地标、景点，接口返…——<a href="https://www.free-api.com/doc/27" target='_blank'>接口地址</a><br><b>车型识别(可在线调用)</b>:识别车辆的具体车型，以小汽车为主，输出图…——<a href="https://www.free-api.com/doc/28" target='_blank'>接口地址</a><br><b>车辆检测</b>:识别图像中所有机动车辆的类型和位置，并对…——<a href="https://www.free-api.com/doc/29" target='_blank'>接口地址</a><br><b>GIF色情图像识别(可在线调用)</b>:人工智能鉴黄技术，智能识别图片和视频中的…——<a href="https://www.free-api.com/doc/30" target='_blank'>接口地址</a><br><b>图像审核(可在线调用)</b>:通过人脸检测、文字识别、色情识别、暴恐识…——<a href="https://www.free-api.com/doc/31" target='_blank'>接口地址</a><br><b>人脸检测与属性分析(可在线调用)</b>:检测图中的人脸，并为人脸标记出边框。检测…——<a href="https://www.free-api.com/doc/39" target='_blank'>接口地址</a><br><b>在线活体检测(可在线调用)</b>:提供在线方式的人脸活体检测能力，在人脸识…——<a href="https://www.free-api.com/doc/41" target='_blank'>接口地址</a><br><b>人体关键点识别(可在线调用)</b>:检测人体并返回人体矩形框位置，精准定位1…——<a href="https://www.free-api.com/doc/44" target='_blank'>接口地址</a><br><b>人流量统计(可在线调用)</b>:统计图像中的人体个数和流动趋势，以头肩为…——<a href="https://www.free-api.com/doc/45" target='_blank'>接口地址</a><br><b>人体检测与属性识别(可在线调用)</b>:检测图像中的所有人体，识别人体的20类属…——<a href="https://www.free-api.com/doc/46" target='_blank'>接口地址</a><br><b>手势识别(可在线调用)</b>:识别图片中的手部位置和手势类型，可识别2…——<a href="https://www.free-api.com/doc/47" target='_blank'>接口地址</a><br><b>人像分割(可在线调用)</b>:识别图像中的人体轮廓，与背景进行分离——<a href="https://www.free-api.com/doc/48" target='_blank'>接口地址</a><br><b>驾驶行为分析(可在线调用)</b>:针对车载场景，识别驾驶员使用手机、抽烟、…——<a href="https://www.free-api.com/doc/49" target='_blank'>接口地址</a><br><b>词法分析(可在线调用)</b>:基于大数据和用户行为的分词、词性标注、命…——<a href="https://www.free-api.com/doc/50" target='_blank'>接口地址</a><br><b>词向量表示(可在线调用)</b>:词向量计算是通过训练的方法，将语言词表中…——<a href="https://www.free-api.com/doc/51" target='_blank'>接口地址</a><br><b>词义相似度(可在线调用)</b>:用于计算两个给定词语的语义相似度，基于自…——<a href="https://www.free-api.com/doc/52" target='_blank'>接口地址</a><br><b>依存句法分析(可在线调用)</b>:利用句子中词与词之间的依存关系来表示词语…——<a href="https://www.free-api.com/doc/53" target='_blank'>接口地址</a><br><b>DNN语言模型(可在线调用)</b>:语言模型是通过计算给定词组成的句子的概率…——<a href="https://www.free-api.com/doc/54" target='_blank'>接口地址</a><br><b>短文本相似度(可在线调用)</b>:短文本相似度计算服务能够提供不同短文本之…——<a href="https://www.free-api.com/doc/55" target='_blank'>接口地址</a><br><b>文本纠错(可在线调用)</b>:文本纠错支持短文本、长文本、语音识别结果…——<a href="https://www.free-api.com/doc/56" target='_blank'>接口地址</a><br><b>情感倾向分析(可在线调用)</b>:针对带有主观描述的中文文本，可自动判断该…——<a href="https://www.free-api.com/doc/57" target='_blank'>接口地址</a><br><b>评论观点抽取(可在线调用)</b>:自动分析评论关注点和评论观点，并输出评论…——<a href="https://www.free-api.com/doc/58" target='_blank'>接口地址</a><br><b>对话情绪识别(可在线调用)</b>:针对一段对话文本，自动识别出当前会话者所…——<a href="https://www.free-api.com/doc/59" target='_blank'>接口地址</a><br><b>文章标签(可在线调用)</b>:文章标签服务对文章的标题和内容进行深度分…——<a href="https://www.free-api.com/doc/60" target='_blank'>接口地址</a><br><b>文章分类(可在线调用)</b>:文章分类服务对文章内容进行深度分析，输出…——<a href="https://www.free-api.com/doc/61" target='_blank'>接口地址</a><br><b>新闻摘要(可在线调用)</b>:基于深度语义分析模型，自动抽取新闻文本中…——<a href="https://www.free-api.com/doc/62" target='_blank'>接口地址</a><br><b>通用翻译(可在线调用)</b>:支持28种语言实时互译，覆盖中、英、日、…——<a href="https://www.free-api.com/doc/64" target='_blank'>接口地址</a><br><b>实体标注(可在线调用)</b>:结合上下文，识别文本中的实体并将其关联到…——<a href="https://www.free-api.com/doc/65" target='_blank'>接口地址</a><br><b>新闻头条(可在线调用)</b>:最新新闻头条，各类社会、国内、国际、体育…——<a href="https://www.free-api.com/doc/66" target='_blank'>接口地址</a><br><b>手机号码归属地(可在线调用)</b>:根据手机号码或手机号码的前7位，查询手机…——<a href="https://www.free-api.com/doc/67" target='_blank'>接口地址</a><br><b>彩票开奖结果查询(可在线调用)</b>:目前支持双色球、大乐透、七乐彩、七星彩、…——<a href="https://www.free-api.com/doc/68" target='_blank'>接口地址</a><br><b>天气预报(可在线调用)</b>:查询天气情况：温度、湿度、AQI、天气、…——<a href="https://www.free-api.com/doc/69" target='_blank'>接口地址</a><br><b>二维码生成(可在线调用)</b>:按照设定的参数、生成二维码——<a href="https://www.free-api.com/doc/70" target='_blank'>接口地址</a><br><b>汇率(可在线调用)</b>:外汇报价，货币汇率——<a href="https://www.free-api.com/doc/71" target='_blank'>接口地址</a><br><b>历史上的今天(可在线调用)</b>:回顾历史的长河，历史是生活的一面镜子——<a href="https://www.free-api.com/doc/72" target='_blank'>接口地址</a><br><b>成语词典(可在线调用)</b>:新华字典在线查字,最新最全——<a href="https://www.free-api.com/doc/74" target='_blank'>接口地址</a><br><b>新华字典(可在线调用)</b>:最大最全的新华汉语词典，按拼音查、按部首…——<a href="https://www.free-api.com/doc/75" target='_blank'>接口地址</a><br><b>微信精选(可在线调用)</b>:微信精选文章——<a href="https://www.free-api.com/doc/76" target='_blank'>接口地址</a><br><b>笑话大全(可在线调用)</b>:搜集网络幽默、搞笑、内涵段子，不间断更新——<a href="https://www.free-api.com/doc/77" target='_blank'>接口地址</a><br><b>全国WIFI(可在线调用)</b>:全国免费的WIFI热点分布——<a href="https://www.free-api.com/doc/78" target='_blank'>接口地址</a><br><b>货币汇率(可在线调用)</b>:支持人民币牌价、外汇汇率查询；数据仅供参…——<a href="https://www.free-api.com/doc/79" target='_blank'>接口地址</a><br><b>手机固话来电显示</b>:查询手机/固话号码归属地，是否诈骗、营销…——<a href="https://www.free-api.com/doc/80" target='_blank'>接口地址</a><br><b>简/繁/火星字体转换(可在线调用)</b>:实现简体、繁体、火星文之间的转换,转换字…——<a href="https://www.free-api.com/doc/81" target='_blank'>接口地址</a><br><b>全国邮编查询(可在线调用)</b>:提供全国邮政编码大全,为你快速准确查邮编——<a href="https://www.free-api.com/doc/82" target='_blank'>接口地址</a><br><b>老黄历(可在线调用)</b>:提供老黄历查询,黄历每日吉凶宜忌查询——<a href="https://www.free-api.com/doc/83" target='_blank'>接口地址</a><br><b>周公解梦(可在线调用)</b>:周公解梦,周公解梦大全,周公解梦查询，免…——<a href="https://www.free-api.com/doc/84" target='_blank'>接口地址</a><br><b>净值数据(可在线调用)</b>:根据基金类型及分页参数来获取数据(开放式…——<a href="https://www.free-api.com/doc/85" target='_blank'>接口地址</a><br><b>星座运势(可在线调用)</b>:十二星座每日、每月、每年运势——<a href="https://www.free-api.com/doc/86" target='_blank'>接口地址</a><br><b>图书电商数据(可在线调用)</b>:于万千之中选择你所爱–好书推荐，值得你…——<a href="https://www.free-api.com/doc/87" target='_blank'>接口地址</a><br><b>身份证查询(可在线调用)</b>:身份证归属地信息查询——<a href="https://www.free-api.com/doc/88" target='_blank'>接口地址</a><br><b>黄金数据(可在线调用)</b>:黄金品种、最新价、开盘价、最高价等信息——<a href="https://www.free-api.com/doc/89" target='_blank'>接口地址</a><br><b>IP地址(可在线调用)</b>:根据查询的IP地址或者域名，查询该IP所…——<a href="https://www.free-api.com/doc/90" target='_blank'>接口地址</a><br><b>笑话大全——文字(可在线调用)</b>:每小时更新。文字笑话大全，信息搜集整理于…——<a href="https://www.free-api.com/doc/92" target='_blank'>接口地址</a><br><b>笑话大全——图片(可在线调用)</b>:每小时更新。图片笑话大全，信息搜集整理于…——<a href="https://www.free-api.com/doc/93" target='_blank'>接口地址</a><br><b>最新新闻</b>:新闻API接口 官方自营 会员接口…——<a href="https://www.free-api.com/doc/94" target='_blank'>接口地址</a><br><b>美图大全</b>:根据几十个种类获取图片列表，每日更新。种…——<a href="https://www.free-api.com/doc/95" target='_blank'>接口地址</a><br><b>手机归属地查询</b>:最全、最新的手机号段数据库。本地找不到的…——<a href="https://www.free-api.com/doc/96" target='_blank'>接口地址</a><br><b>历史上的今天</b>:回顾历史的长河,历史是生活的一面镜子;历…——<a href="https://www.free-api.com/doc/97" target='_blank'>接口地址</a><br><b>来福岛笑话——图片</b>:来福岛爆笑娱乐网创建于2000年，是国内…——<a href="https://www.free-api.com/doc/99" target='_blank'>接口地址</a><br><b>来福岛笑话——文字</b>:来福岛爆笑娱乐网创建于2000年，是国内…——<a href="https://www.free-api.com/doc/100" target='_blank'>接口地址</a><br><b>全国景点查询</b>:全国景点查询接口（来自同程网的合作数据）…——<a href="https://www.free-api.com/doc/101" target='_blank'>接口地址</a><br><b>健康知识</b>:根据养生、用药、两性等频道内容获取健康知…——<a href="https://www.free-api.com/doc/102" target='_blank'>接口地址</a><br><b>猜一猜</b>:随机返回谜语，有2.5万谜语，每日更新。…——<a href="https://www.free-api.com/doc/103" target='_blank'>接口地址</a><br><b>身份证查询</b>:可根据身份证号，查询其签发地、生日、性别…——<a href="https://www.free-api.com/doc/104" target='_blank'>接口地址</a><br><b>爱飞天气插件</b>:爱飞天气是ShowAPI官方天气接口的一…——<a href="https://www.free-api.com/doc/105" target='_blank'>接口地址</a><br><b>PM2.5空气质量指数</b>:本接口每小时更新1次。空气质量指数提供实…——<a href="https://www.free-api.com/doc/106" target='_blank'>接口地址</a><br><b>全球IP地址查询</b>:全球IP地址——<a href="https://www.free-api.com/doc/107" target='_blank'>接口地址</a><br><b>域名查询</b>:域名查询地理位置——<a href="https://www.free-api.com/doc/108" target='_blank'>接口地址</a><br><b>汉字转拼音</b>:将汉字转换为拼音和拼音首字母缩写——<a href="https://www.free-api.com/doc/110" target='_blank'>接口地址</a><br><b>中文分词</b>:中文分词接口。将长段中文切词分开。使用场…——<a href="https://www.free-api.com/doc/111" target='_blank'>接口地址</a><br><b>图片验证码生成</b>:图形|图片验证码生成，支持自定义高宽，文…——<a href="https://www.free-api.com/doc/112" target='_blank'>接口地址</a><br><b>新闻、网页正文抽取</b>:传入一个新网或网页地址，接口将返回此ur…——<a href="https://www.free-api.com/doc/114" target='_blank'>接口地址</a><br><b>实时IP代理查询</b>:代理数量并不是越多越好，可以用才是真正的…——<a href="https://www.free-api.com/doc/116" target='_blank'>接口地址</a><br><b>今日油价</b>:今日油价，可查询全国31个省的油价。每天…——<a href="https://www.free-api.com/doc/117" target='_blank'>接口地址</a><br><b>QQ号码测凶吉</b>:输入qq号码，得到此号码的算命情况，例如…——<a href="https://www.free-api.com/doc/118" target='_blank'>接口地址</a><br><b>地址转换经纬度</b>:根据城市和名称转换为相应的经纬度——<a href="https://www.free-api.com/doc/120" target='_blank'>接口地址</a><br><b>经纬度转换地址</b>:根据经纬度转换成相应地址——<a href="https://www.free-api.com/doc/121" target='_blank'>接口地址</a><br><b>黄历运势</b>:根据输入日期，查看某一天的黄历运势——<a href="https://www.free-api.com/doc/122" target='_blank'>接口地址</a><br><b>十大银行实时汇率</b>:包括工商银行、中国银行、农业银行、交通银…——<a href="https://www.free-api.com/doc/123" target='_blank'>接口地址</a><br><b>汇率转换</b>:1分钟更新1次。当前十大银行，包括工商银…——<a href="https://www.free-api.com/doc/124" target='_blank'>接口地址</a><br><b>添加图片水印</b>:传入底板图及水印图，根据位置参数，接口把…——<a href="https://www.free-api.com/doc/125" target='_blank'>接口地址</a><br><b>图像裁剪</b>:裁剪原图的部份区域——<a href="https://www.free-api.com/doc/126" target='_blank'>接口地址</a><br><b>生成缩略图</b>:根据传入的比率将原图生成缩略图——<a href="https://www.free-api.com/doc/127" target='_blank'>接口地址</a><br><b>星座运势</b>:每天1点、7点、17点更新。包含十二星座…——<a href="https://www.free-api.com/doc/128" target='_blank'>接口地址</a><br><b>PDF文件正文抽取</b>:抽取PDF文件中的文字信息——<a href="https://www.free-api.com/doc/129" target='_blank'>接口地址</a><br><b>网络搜索热词排行</b>:每2小时更新一次。根据分类查询网络最热的…——<a href="https://www.free-api.com/doc/131" target='_blank'>接口地址</a><br><b>二维码识别</b>:根据图片的Base64信息,识别图片中的…——<a href="https://www.free-api.com/doc/132" target='_blank'>接口地址</a><br><b>二维码生成</b>:生成二维码图片 图片存放在showapi…——<a href="https://www.free-api.com/doc/133" target='_blank'>接口地址</a><br><b>中文文本相似度检测</b>:通过计算向量间的夹角（余弦公式），来判断…——<a href="https://www.free-api.com/doc/134" target='_blank'>接口地址</a><br><b>全国火车票查询</b>:数据来源于12306。 包括城市列表\列…——<a href="https://www.free-api.com/doc/135" target='_blank'>接口地址</a><br><b>药品查询</b>:药品信息——<a href="https://www.free-api.com/doc/136" target='_blank'>接口地址</a><br><b>菜谱大全</b>:本菜谱的信息来源于网络,所以本信息仅用于…——<a href="https://www.free-api.com/doc/137" target='_blank'>接口地址</a><br><b>台风最新坐标轨迹</b>:可查询当前存在威胁的台风列表，每个台风的…——<a href="https://www.free-api.com/doc/138" target='_blank'>接口地址</a><br><b>网页级别查询</b>:google的pr查询——<a href="https://www.free-api.com/doc/139" target='_blank'>接口地址</a><br><b>关键词抽取</b>:根据传入的大段文字，使用TextRank…——<a href="https://www.free-api.com/doc/140" target='_blank'>接口地址</a><br><b>全国行政区划分</b>:最新最全的全国省、市、区县、乡镇的分级查…——<a href="https://www.free-api.com/doc/141" target='_blank'>接口地址</a><br><b>微信小程序查询</b>:搜索查询已经上架的微信小程序。包括基本信…——<a href="https://www.free-api.com/doc/142" target='_blank'>接口地址</a><br><b>生成文章摘要</b>:根据传入的长篇文章，系统使用智能算法抽取…——<a href="https://www.free-api.com/doc/143" target='_blank'>接口地址</a><br><b>藏头诗生成</b>:藏头诗生成器。可输入人名生成藏头、藏尾、…——<a href="https://www.free-api.com/doc/144" target='_blank'>接口地址</a><br><b>国际原油价格查询</b>:WTI和布伦特的油价查询——<a href="https://www.free-api.com/doc/145" target='_blank'>接口地址</a><br><b>水质查询</b>:根据地点和时间查询水质——<a href="https://www.free-api.com/doc/146" target='_blank'>接口地址</a><br><b>条码生成</b>:提供EAN_8、EAN_13、CODE_…——<a href="https://www.free-api.com/doc/147" target='_blank'>接口地址</a><br><b>条码识别</b>:提供EAN_8、EAN_13、CODE_…——<a href="https://www.free-api.com/doc/148" target='_blank'>接口地址</a><br><b>全国站点换乘线路查询</b>:提供全国站点换乘线路查询——<a href="https://www.free-api.com/doc/149" target='_blank'>接口地址</a><br><b>全国公交换乘查询</b>:提供全国公交换乘查询——<a href="https://www.free-api.com/doc/150" target='_blank'>接口地址</a><br><b>汽车品牌查询</b>:收录了近200个品牌/子品牌,上万辆车型…——<a href="https://www.free-api.com/doc/151" target='_blank'>接口地址</a><br><b>周公解梦</b>:根据周公解梦全书提供相关信息——<a href="https://www.free-api.com/doc/152" target='_blank'>接口地址</a><br><b>正能量新闻</b>:社会正能量的新闻资讯，每天更新——<a href="https://www.free-api.com/doc/153" target='_blank'>接口地址</a><br><b>全国酒店查询</b>:该接口所返回的所有图片链接将在12小时内…——<a href="https://www.free-api.com/doc/154" target='_blank'>接口地址</a><br><b>经典语句</b>:根据名人，查询经典名言——<a href="https://www.free-api.com/doc/155" target='_blank'>接口地址</a><br><b>商品比价</b>:搜索商品，根据商品url搜索各大商城的历…——<a href="https://www.free-api.com/doc/156" target='_blank'>接口地址</a><br><b>姓名打分</b>:根据姓名，返回此姓名的运势得分——<a href="https://www.free-api.com/doc/157" target='_blank'>接口地址</a><br><b>公司名测吉凶</b>:根据公司名，返回此公司的运势得分——<a href="https://www.free-api.com/doc/158" target='_blank'>接口地址</a><br><b>车牌号测吉凶</b>:根据车牌名，返回此车牌号的运势得分——<a href="https://www.free-api.com/doc/159" target='_blank'>接口地址</a><br><b>手机号测吉凶</b>:根据手机号码，返回此号码的运势得分——<a href="https://www.free-api.com/doc/160" target='_blank'>接口地址</a><br><b>图书ISBN查询</b>:通过国际图书号查询图书相关信息，目前只支…——<a href="https://www.free-api.com/doc/161" target='_blank'>接口地址</a><br><b>影讯查询</b>:影讯查询——<a href="https://www.free-api.com/doc/162" target='_blank'>接口地址</a><br><b>手机套餐售价</b>:全国手机流量充值，4G流量，当月有效——<a href="https://www.free-api.com/doc/163" target='_blank'>接口地址</a><br><b>紫微斗数</b>:根据出生时间定紫薇斗数命盘，供命理研究，…——<a href="https://www.free-api.com/doc/164" target='_blank'>接口地址</a><br><b>唐诗宋词元曲等诗词查询</b>:根据朝代Id或诗人名称查询诗人信息——<a href="https://www.free-api.com/doc/165" target='_blank'>接口地址</a><br><b>脑筋急转弯</b>:查询常见的脑筋急转弯金句——<a href="https://www.free-api.com/doc/166" target='_blank'>接口地址</a><br><b>虚拟数字币|比特币行情</b>:查询主流虚拟货币实时行情，例如btc(比…——<a href="https://www.free-api.com/doc/167" target='_blank'>接口地址</a><br><b>全国房产信息</b>:搜索最新楼盘开盘信息、最新市场房价信息——<a href="https://www.free-api.com/doc/168" target='_blank'>接口地址</a><br><b>手游排行榜</b>:手游最热排行榜及最期待榜——<a href="https://www.free-api.com/doc/169" target='_blank'>接口地址</a><br><b>网游排行榜</b>:网游最热排行榜及最期待榜——<a href="https://www.free-api.com/doc/170" target='_blank'>接口地址</a><br><b>黄金行情</b>:上金所黄金行情——<a href="https://www.free-api.com/doc/171" target='_blank'>接口地址</a><br><b>电商淘宝平台联想词</b>:提供淘宝联想词查询——<a href="https://www.free-api.com/doc/172" target='_blank'>接口地址</a><br><b>中文反义词</b>:中文反义词——<a href="https://www.free-api.com/doc/173" target='_blank'>接口地址</a><br><b>中文近义词</b>:中文近义词——<a href="https://www.free-api.com/doc/174" target='_blank'>接口地址</a><br><b>歇后语查询</b>:查询歇后语列表——<a href="https://www.free-api.com/doc/175" target='_blank'>接口地址</a><br><b>中国互联网络信息</b>:中国互联网络信息——<a href="https://www.free-api.com/doc/176" target='_blank'>接口地址</a><br><b>实时票房排行</b>:实时票房中国（包括香港）、北美、全球票房…——<a href="https://www.free-api.com/doc/177" target='_blank'>接口地址</a><br><b>爱奇艺热点趋势</b>:爱奇艺视频指数——<a href="https://www.free-api.com/doc/178" target='_blank'>接口地址</a><br><b>空气质量指数(可在线调用)</b>:空气质量指数提供实时空气质量情况，目前支…——<a href="https://www.free-api.com/doc/179" target='_blank'>接口地址</a><br><b>IP地址查询(可在线调用)</b>:提供rest风格的IP地址查询接口，只需…——<a href="https://www.free-api.com/doc/180" target='_blank'>接口地址</a><br><b>天气预报(可在线调用)</b>:全国天气预报，预报7天天气，以及当天的生…——<a href="https://www.free-api.com/doc/181" target='_blank'>接口地址</a><br><b>人脸识别(可在线调用)</b>:检测图片(Image)中的人脸(Face…——<a href="https://www.free-api.com/doc/182" target='_blank'>接口地址</a><br><b>指纹识别</b>:检测图片(Image)中的指纹(Fing…——<a href="https://www.free-api.com/doc/183" target='_blank'>接口地址</a><br><b>医疗科室(可在线调用)</b>:医药健康接口专用的医疗科室字典项获取——<a href="https://www.free-api.com/doc/184" target='_blank'>接口地址</a><br><b>健康菜谱(可在线调用)</b>:健康菜谱，让人们在宣泄的都市中体验在家常…——<a href="https://www.free-api.com/doc/186" target='_blank'>接口地址</a><br><b>疾病信息(可在线调用)</b>:通过名称取得疾病详情——<a href="https://www.free-api.com/doc/187" target='_blank'>接口地址</a><br><b>药品查询(可在线调用)</b>:通过药品名字直接得到药品说明书、价格、生…——<a href="https://www.free-api.com/doc/188" target='_blank'>接口地址</a><br><b>食疗大全(可在线调用)</b>:通过名称取得食品详情只要是食品都有它…——<a href="https://www.free-api.com/doc/189" target='_blank'>接口地址</a><br><b>手术项目(可在线调用)</b>:通过名称取得手术详情通过名称取得手术…——<a href="https://www.free-api.com/doc/190" target='_blank'>接口地址</a><br><b>药房药店(可在线调用)</b>:通过名称取得药店信息通过名称取得药店…——<a href="https://www.free-api.com/doc/191" target='_blank'>接口地址</a><br><b>病状信息(可在线调用)</b>:通过名称取得病状详情——<a href="https://www.free-api.com/doc/192" target='_blank'>接口地址</a><br><b>微信精选(可在线调用)</b>:微信热门精选文章，实时更新——<a href="https://www.free-api.com/doc/193" target='_blank'>接口地址</a><br><b>国内新闻(可在线调用)</b>:国内新闻数据，实时更新——<a href="https://www.free-api.com/doc/194" target='_blank'>接口地址</a><br><b>国际新闻(可在线调用)</b>:国际新闻数据，实时更新——<a href="https://www.free-api.com/doc/195" target='_blank'>接口地址</a><br><b>体育新闻(可在线调用)</b>:体育新闻数据，实时更新——<a href="https://www.free-api.com/doc/196" target='_blank'>接口地址</a><br><b>科技新闻(可在线调用)</b>:科技新闻数据，实时更新——<a href="https://www.free-api.com/doc/197" target='_blank'>接口地址</a><br><b>奇闻轶事(可在线调用)</b>:奇闻轶事数据，实时更新——<a href="https://www.free-api.com/doc/198" target='_blank'>接口地址</a><br><b>旅游新闻(可在线调用)</b>:旅游热点数据，实时更新——<a href="https://www.free-api.com/doc/199" target='_blank'>接口地址</a><br><b>新华字典(可在线调用)</b>:新华字典数据库，可查字的拼音、读音、偏旁…——<a href="https://www.free-api.com/doc/200" target='_blank'>接口地址</a><br><b>五笔字根(可在线调用)</b>:查询汉字的五笔字根——<a href="https://www.free-api.com/doc/201" target='_blank'>接口地址</a><br><b>简繁体火星文转换(可在线调用)</b>:汉字的简体、繁体、火星文转换——<a href="https://www.free-api.com/doc/202" target='_blank'>接口地址</a><br><b>成语词典(可在线调用)</b>:成语查询——<a href="https://www.free-api.com/doc/203" target='_blank'>接口地址</a><br><b>歇后语(可在线调用)</b>:歇后语查询，根据关键字搜索歇后语——<a href="https://www.free-api.com/doc/204" target='_blank'>接口地址</a><br><b>唐诗宋词(可在线调用)</b>:根据关键字搜索唐诗宋词——<a href="https://www.free-api.com/doc/205" target='_blank'>接口地址</a><br><b>历史上的今天(可在线调用)</b>:以史为镜，可以知兴替。借历史上的成败得失…——<a href="https://www.free-api.com/doc/206" target='_blank'>接口地址</a><br><b>辞海(可在线调用)</b>:查询词语解释——<a href="https://www.free-api.com/doc/207" target='_blank'>接口地址</a><br><b>手机号码归属地(可在线调用)</b>:通过手机号码查询归属地、运营商、号码类型…——<a href="https://www.free-api.com/doc/208" target='_blank'>接口地址</a><br><b>笑话大全(可在线调用)</b>:海量互联网幽默、内涵段子、趣味图片，不间…——<a href="https://www.free-api.com/doc/209" target='_blank'>接口地址</a><br><b>同义词</b>:通过输入的词语查询对应的同义词——<a href="https://www.free-api.com/doc/210" target='_blank'>接口地址</a><br><b>全国WIFI(可在线调用)</b>:查询周边免费WIFI热点；全国免费WIF…——<a href="https://www.free-api.com/doc/211" target='_blank'>接口地址</a><br><b>NBA赛事(可在线调用)</b>:NBA赛事赛程信息，球队赛程赛事查询——<a href="https://www.free-api.com/doc/212" target='_blank'>接口地址</a><br><b>全国邮编查询(可在线调用)</b>:通过地名查询地区邮编，精确到街道——<a href="https://www.free-api.com/doc/213" target='_blank'>接口地址</a><br><b>周公解梦(可在线调用)</b>:周公解梦大全——<a href="https://www.free-api.com/doc/214" target='_blank'>接口地址</a><br><b>名人名言(可在线调用)</b>:通过关键字查询名人名言——<a href="https://www.free-api.com/doc/215" target='_blank'>接口地址</a><br><b>今日油价(可在线调用)</b>:可查询全国31个省的油价——<a href="https://www.free-api.com/doc/216" target='_blank'>接口地址</a><br><b>国际白银实时价格</b>:国际交易市场白银实时价格(美元/盎司)，…——<a href="https://www.free-api.com/doc/217" target='_blank'>接口地址</a><br><b>时事新闻检索(可在线调用)</b>:时事新闻，新闻检索等，实时更新——<a href="https://www.free-api.com/doc/218" target='_blank'>接口地址</a><br><b>号码吉凶(可在线调用)</b>:手机号码、QQ号码、车牌号等所有数字类型…——<a href="https://www.free-api.com/doc/219" target='_blank'>接口地址</a><br><b>金额小写转大写(可在线调用)</b>:人民币金额小写转大写——<a href="https://www.free-api.com/doc/220" target='_blank'>接口地址</a><br><b>电影票房(可在线调用)</b>:最新票房榜，网票票房——<a href="https://www.free-api.com/doc/221" target='_blank'>接口地址</a><br><b>全国长途汽车(可在线调用)</b>:全国长途汽车时刻表查询——<a href="https://www.free-api.com/doc/222" target='_blank'>接口地址</a><br><b>足球联赛(可在线调用)</b>:目前支持 英超，西甲，德甲，意甲，法甲，…——<a href="https://www.free-api.com/doc/223" target='_blank'>接口地址</a><br><b>影视影讯(可在线调用)</b>:影视信息播放链接检索，城市影讯检索——<a href="https://www.free-api.com/doc/224" target='_blank'>接口地址</a><br><b>标准电码查询(可在线调用)</b>:提供的标准中文电码查询程序结果——<a href="https://www.free-api.com/doc/225" target='_blank'>接口地址</a><br><b>火车时刻表(可在线调用)</b>:火车时刻表，站到站检索——<a href="https://www.free-api.com/doc/226" target='_blank'>接口地址</a><br><b>姓氏起源(可在线调用)</b>:《百家姓》是我国汉族姓氏总集，载有四百多…——<a href="https://www.free-api.com/doc/227" target='_blank'>接口地址</a><br><b>短链接生成(可在线调用)</b>:查找网提供长的网址链接缩短为新浪短网扯，…——<a href="https://www.free-api.com/doc/228" target='_blank'>接口地址</a><br><b>翻译(可在线调用)</b>:翻译API提供免费开放接口，覆盖中、英、…——<a href="https://www.free-api.com/doc/229" target='_blank'>接口地址</a><br><b>乌云漏洞(可在线调用)</b>:查看乌云最新的安全漏洞——<a href="https://www.free-api.com/doc/230" target='_blank'>接口地址</a><br><b>微信公众号查询(可在线调用)</b>:根据关键字搜索热门微信文章、微信公众号等…——<a href="https://www.free-api.com/doc/231" target='_blank'>接口地址</a><br><b>在线分词(可在线调用)</b>:基于深度学习的中文在线抽词——<a href="https://www.free-api.com/doc/232" target='_blank'>接口地址</a><br><b>MD5破解(可在线调用)</b>:md5密文：16位，32位,sha1(4…——<a href="https://www.free-api.com/doc/233" target='_blank'>接口地址</a><br><b>星座配对(可在线调用)</b>:星座配对测姻缘——<a href="https://www.free-api.com/doc/234" target='_blank'>接口地址</a><br><b>生肖配对(可在线调用)</b>:生肖配对测姻缘——<a href="https://www.free-api.com/doc/235" target='_blank'>接口地址</a><br><b>获取外网IP信息(可在线调用)</b>:取得客户端访问互联网时的外网ip及对应的…——<a href="https://www.free-api.com/doc/236" target='_blank'>接口地址</a><br><b>百度权重(可在线调用)</b>:根据网址查询百度权重——<a href="https://www.free-api.com/doc/237" target='_blank'>接口地址</a><br><b>新闻头条(可在线调用)</b>:最新新闻头条——<a href="https://www.free-api.com/doc/238" target='_blank'>接口地址</a><br><b>星座运势(可在线调用)</b>:黄道十二星座每日、每月、每年运势、不间断…——<a href="https://www.free-api.com/doc/239" target='_blank'>接口地址</a><br></p>
<hr>
<p>2019.7.3更新接口</p>
<hr>
<p><b>实时段子(可在线调用)</b>:实时段子,神评版本——<a href="https://www.free-api.com/doc/240" target="_blank" rel="noopener">接口地址</a><br><b>音乐搜索(可在线调用)</b>:根据音乐名称返回音乐详情——<a href="https://www.free-api.com/doc/241" target="_blank" rel="noopener">接口地址</a><br><b>小说查询(可在线调用)</b>:获取小说的详细信息——<a href="https://www.free-api.com/doc/242" target="_blank" rel="noopener">接口地址</a><br><b>天气查询(可在线调用)</b>:获取最近天气情况——<a href="https://www.free-api.com/doc/243" target="_blank" rel="noopener">接口地址</a><br><b>音悦tai搜索</b>:音悦Tai-是以高清MV为主的娱乐视频网…——<a href="https://www.free-api.com/doc/244" target="_blank" rel="noopener">接口地址</a><br><b>识别身份证文字(可在线调用)</b>:AI人工智能识别身份证图像文字 URL图…——<a href="https://www.free-api.com/doc/245" target="_blank" rel="noopener">接口地址</a><br><b>编码解码</b>:常见的编码和解码——<a href="https://www.free-api.com/doc/246" target="_blank" rel="noopener">接口地址</a><br><b>网站备案查询</b>:网站备案信息查询接口——<a href="https://www.free-api.com/doc/247" target="_blank" rel="noopener">接口地址</a><br><b>身份证信息查询(可在线调用)</b>:身份证信息查询(不支持查询百岁老人)——<a href="https://www.free-api.com/doc/248" target="_blank" rel="noopener">接口地址</a><br><b>图片PS</b>:在线图片加文字,返回为字符串,需要处理下——<a href="https://www.free-api.com/doc/249" target="_blank" rel="noopener">接口地址</a><br><b>一言</b>:随机返回一句话——<a href="https://www.free-api.com/doc/250" target="_blank" rel="noopener">接口地址</a><br><b>短链接生成与还原</b>:短链接生成与还原，包括新浪、腾讯、百度——<a href="https://www.free-api.com/doc/251" target="_blank" rel="noopener">接口地址</a><br><b>获取用户大致信息</b>:获取用户信息如网络运营商等等——<a href="https://www.free-api.com/doc/254" target="_blank" rel="noopener">接口地址</a><br><b>三合一收款码</b>:包括支付宝，qq，微信——<a href="https://www.free-api.com/doc/255" target="_blank" rel="noopener">接口地址</a><br><b>IP查询</b>:根据ip地址获取其所在省市区——<a href="https://www.free-api.com/doc/252" target="_blank" rel="noopener">接口地址</a><br><b>IP经纬度查询</b>:根据ip地址和经纬度获取其所在省市区——<a href="https://www.free-api.com/doc/253" target="_blank" rel="noopener">接口地址</a></p>
<hr>
<p>2019.8.7更新接口</p>
<hr>
<p><b>淘宝ip(可在线调用)</b>:来自淘宝的ip查询，可以根据ip地址查询…——<a href="https://www.free-api.com/doc/256" target="_blank" rel="noopener">接口地址</a><br><b>360ip(可在线调用)</b>:来自360的ip查询，可以根据ip地址查…——<a href="https://www.free-api.com/doc/257" target="_blank" rel="noopener">接口地址</a><br><b>地理编码(可在线调用)</b>:将详细的结构化地址转换为高德经纬度坐标。…——<a href="https://www.free-api.com/doc/258" target="_blank" rel="noopener">接口地址</a><br><b>逆地理编码(可在线调用)</b>:将经纬度转换为详细结构化的地址，且返回附…——<a href="https://www.free-api.com/doc/259" target="_blank" rel="noopener">接口地址</a><br><b>步行路径规划</b>:可以规划100KM以内的步行通勤方案，并…——<a href="https://www.free-api.com/doc/260" target="_blank" rel="noopener">接口地址</a><br><b>驾车路径规划(可在线调用)</b>:规划以小客车、轿车通勤出行的方案，并且返…——<a href="https://www.free-api.com/doc/261" target="_blank" rel="noopener">接口地址</a><br><b>公交路径规划</b>:规划综合各类公共（火车、公交、地铁）交通…——<a href="https://www.free-api.com/doc/262" target="_blank" rel="noopener">接口地址</a><br><b>骑行路径规划(可在线调用)</b>:用于规划骑行通勤方案，规划时不会考虑路况…——<a href="https://www.free-api.com/doc/263" target="_blank" rel="noopener">接口地址</a><br><b>距离测量</b>:根据经纬度测量距离——<a href="https://www.free-api.com/doc/264" target="_blank" rel="noopener">接口地址</a><br><b>行政区域查询(可在线调用)</b>:根据用户输入的搜索条件可以帮助用户快速的…——<a href="https://www.free-api.com/doc/265" target="_blank" rel="noopener">接口地址</a><br><b>矩形区域交通态势</b>:能够确定矩形交通态势情况，路况信息2分钟…——<a href="https://www.free-api.com/doc/266" target="_blank" rel="noopener">接口地址</a><br><b>圆形区域交通态势</b>:能够确定圆形交通态势情况，路况信息2分钟…——<a href="https://www.free-api.com/doc/267" target="_blank" rel="noopener">接口地址</a><br><b>指定线路交通态势</b>:能够确定指定线路交通情况，路况信息2分钟…——<a href="https://www.free-api.com/doc/268" target="_blank" rel="noopener">接口地址</a><br><b>输入提示(可在线调用)</b>:提供根据用户输入的关键词查询返回建议列表——<a href="https://www.free-api.com/doc/269" target="_blank" rel="noopener">接口地址</a><br><b>天气查询(可在线调用)</b>:查询目标区域当前/未来的天气情况——<a href="https://www.free-api.com/doc/270" target="_blank" rel="noopener">接口地址</a><br><b>IP定位(可在线调用)</b>:将IP信息转换为地理位置信息——<a href="https://www.free-api.com/doc/271" target="_blank" rel="noopener">接口地址</a><br><b>地点范围查询(可在线调用)</b>:根据经纬度查询查询其地址相关信息——<a href="https://www.free-api.com/doc/272" target="_blank" rel="noopener">接口地址</a></p>
<hr>
<p>2019.9.9更新接口</p>
<hr>
<p><b>行政区划区域检索(可在线调用)</b>:开发者可通过该功能，检索某一行政区划内（…——<a href="https://www.free-api.com/doc/273" target="_blank" rel="noopener">接口地址</a><br><b>圆形区域检索(可在线调用)</b>:开发者可设置圆心和半径，检索圆形区域内的…——<a href="https://www.free-api.com/doc/274" target="_blank" rel="noopener">接口地址</a><br><b>矩形区域检索(可在线调用)</b>:开发者可设置检索区域左下角和右上角坐标，…——<a href="https://www.free-api.com/doc/275" target="_blank" rel="noopener">接口地址</a><br><b>地点详情检索(可在线调用)</b>:地点详情检索针对指定POI，检索其相关的…——<a href="https://www.free-api.com/doc/276" target="_blank" rel="noopener">接口地址</a><br><b>地点输入提示(可在线调用)</b>:用户可通过该服务，匹配用户输入关键词的地…——<a href="https://www.free-api.com/doc/277" target="_blank" rel="noopener">接口地址</a><br><b>地理编码服务(可在线调用)</b>:用户可通过该功能，将结构化地址（省/市/…——<a href="https://www.free-api.com/doc/278" target="_blank" rel="noopener">接口地址</a><br><b>全球逆地理编码(可在线调用)</b>:用户可通过该功能，将位置坐标解析成对应的…——<a href="https://www.free-api.com/doc/279" target="_blank" rel="noopener">接口地址</a><br><b>公交路线规划(可在线调用)</b>:根据起点和终点检索符合条件的公共交通方案…——<a href="https://www.free-api.com/doc/280" target="_blank" rel="noopener">接口地址</a><br><b>骑行路线规划(可在线调用)</b>:根据起终点坐标检索符合条件的骑行路线规划…——<a href="https://www.free-api.com/doc/281" target="_blank" rel="noopener">接口地址</a><br><b>驾车路线规划(可在线调用)</b>:根据起终点坐标检索符合条件的驾车路线规划…——<a href="https://www.free-api.com/doc/282" target="_blank" rel="noopener">接口地址</a><br><b>批量算路</b>:用户可通过该服务，根据起点和终点坐标计算…——<a href="https://www.free-api.com/doc/283" target="_blank" rel="noopener">接口地址</a><br><b>普通IP定位(可在线调用)</b>:用户可以通过该服务，根据IP定位来获取大…——<a href="https://www.free-api.com/doc/284" target="_blank" rel="noopener">接口地址</a><br><b>道路实时路况查询(可在线调用)</b>:查询具体道路的实时拥堵评价和拥堵路段、拥…——<a href="https://www.free-api.com/doc/285" target="_blank" rel="noopener">接口地址</a><br><b>时间偏移查询(可在线调用)</b>:查询坐标所在地与协调世界时的时间偏移信息…——<a href="https://www.free-api.com/doc/286" target="_blank" rel="noopener">接口地址</a><br><b>周边上车点推荐(可在线调用)</b>:用户可通过该功能检索坐标点周围的上车点。…——<a href="https://www.free-api.com/doc/287" target="_blank" rel="noopener">接口地址</a><br><b>非百度坐标系转换(可在线调用)</b>:用户可通过该服务，实现 非百度坐标系→百…——<a href="https://www.free-api.com/doc/288" target="_blank" rel="noopener">接口地址</a><br><b>快递查询(可在线调用)</b>:可根据快递单号查询大部分主流快递的快递信…——<a href="https://www.free-api.com/doc/289" target="_blank" rel="noopener">接口地址</a><br><b>文件转换</b>:文件转换成指定格式，成功则返回成功转换的…——<a href="https://www.free-api.com/doc/290" target="_blank" rel="noopener">接口地址</a><br><b>获取文件转换内容</b>:根据文件转换成功所获取的id，查询转换成…——<a href="https://www.free-api.com/doc/291" target="_blank" rel="noopener">接口地址</a></p>
<hr>
<p>2019.10.8更新接口</p>
<hr>
<p><b>全球IP地理位置(可在线调用)</b>:单个IPv4 / IPv6地址或域名…——<a href="https://www.free-api.com/doc/292" target="_blank" rel="noopener">接口地址</a><br><b>域名备案(可在线调用)</b>:根据域名查询域名备案状态——<a href="https://www.free-api.com/doc/293" target="_blank" rel="noopener">接口地址</a><br><b>十五天天气预报</b>:采用城市ID来精准查询15天内的天气，接…——<a href="https://www.free-api.com/doc/294" target="_blank" rel="noopener">接口地址</a><br><b>农历查询(可在线调用)</b>:根据日期获取农历、黄历、禁忌、星期、生肖…——<a href="https://www.free-api.com/doc/295" target="_blank" rel="noopener">接口地址</a><br><b>ICP备案查询(可在线调用)</b>:根据域名查询ICP备案号——<a href="https://www.free-api.com/doc/296" target="_blank" rel="noopener">接口地址</a><br><b>三合一收款二维码</b>:将QQ、微信、支付宝收款集合到一起，省去…——<a href="https://www.free-api.com/doc/297" target="_blank" rel="noopener">接口地址</a><br><b>二维码生成</b>:将网址直接转换成二维码图片——<a href="https://www.free-api.com/doc/298" target="_blank" rel="noopener">接口地址</a><br><b>二维码解码(可在线调用)</b>:将二维码图片进行解码，解析处理——<a href="https://www.free-api.com/doc/299" target="_blank" rel="noopener">接口地址</a><br><b>短网址生成(可在线调用)</b>:将长网址进行缩短，支持百度、新浪、腾讯短…——<a href="https://www.free-api.com/doc/300" target="_blank" rel="noopener">接口地址</a><br><b>短网址还原(可在线调用)</b>:将缩短的短网址进行还原,支持常见的短网址——<a href="https://www.free-api.com/doc/301" target="_blank" rel="noopener">接口地址</a><br><b>网易云音乐随机歌曲(可在线调用)</b>:网易云音乐，随机歌曲输出——<a href="https://www.free-api.com/doc/302" target="_blank" rel="noopener">接口地址</a><br><b>获取访客相关信息(可在线调用)</b>:根据访客IP地址，操作系统，浏览器，访问…——<a href="https://www.free-api.com/doc/303" target="_blank" rel="noopener">接口地址</a><br><b>随机头像输出(可在线调用)</b>:随机头像输出——<a href="https://www.free-api.com/doc/304" target="_blank" rel="noopener">接口地址</a></p>
<hr>
<p>2019.11.5更新接口</p>
<hr>
<p><b>文章短篇</b>:根据日期获取一篇文章，有网上的，也有名家…——<a href="https://www.free-api.com/doc/305" target="_blank" rel="noopener">接口地址</a><br><b>必应故事</b>:随机获取来自必应的故事，可根据pid获取…——<a href="https://www.free-api.com/doc/306" target="_blank" rel="noopener">接口地址</a><br><b>每日一言</b>:获取来自一言、有道或金山词霸的每日一言内…——<a href="https://www.free-api.com/doc/307" target="_blank" rel="noopener">接口地址</a><br><b>二维码解析</b>:还原二维码的原始URL，支持支付宝，微信…——<a href="https://www.free-api.com/doc/308" target="_blank" rel="noopener">接口地址</a><br><b>生成海报</b>:根据提交的内容格式化生成可分享的精美海报——<a href="https://www.free-api.com/doc/309" target="_blank" rel="noopener">接口地址</a><br><b>历史上的今天</b>:历史上的今天——<a href="https://www.free-api.com/doc/310" target="_blank" rel="noopener">接口地址</a><br><b>生成二维码</b>:可根据传入的内容，生成对应的二维码，还可…——<a href="https://www.free-api.com/doc/311" target="_blank" rel="noopener">接口地址</a><br><b>IP地址详情信息</b>:IP地址详情信息查询——<a href="https://www.free-api.com/doc/312" target="_blank" rel="noopener">接口地址</a><br><b>XLS生成</b>:生成XLS——<a href="https://www.free-api.com/doc/313" target="_blank" rel="noopener">接口地址</a><br><b>土味情话</b>:和妹妹说的情话，返回一句随机的内容——<a href="https://www.free-api.com/doc/314" target="_blank" rel="noopener">接口地址</a><br><b>随机笑话(可在线调用)</b>:随机的笑话——<a href="https://www.free-api.com/doc/315" target="_blank" rel="noopener">接口地址</a></p>
<hr>
<p>2019.12.4更新接口</p>
<hr>
<p><b>经纬度信息(可在线调用)</b>:获取当前经纬度信息——<a href="https://www.free-api.com/doc/316" target="_blank" rel="noopener">接口地址</a><br><b>历史上的今天(可在线调用)</b>:历史上的今天——<a href="https://www.free-api.com/doc/317" target="_blank" rel="noopener">接口地址</a><br><b>Bing 壁纸获取(可在线调用)</b>:获取最近的Bing 壁纸——<a href="https://www.free-api.com/doc/318" target="_blank" rel="noopener">接口地址</a><br><b>天气查询(可在线调用)</b>:获取今天和未来三天的天气情况，来源于高德——<a href="https://www.free-api.com/doc/319" target="_blank" rel="noopener">接口地址</a><br><b>天气查询(可在线调用)</b>:根据城市名，获取今天和未来三天的天气情况…——<a href="https://www.free-api.com/doc/320" target="_blank" rel="noopener">接口地址</a><br><b>天气查询(可在线调用)</b>:根据城市id，获取未来15天的天气情况，…——<a href="https://www.free-api.com/doc/321" target="_blank" rel="noopener">接口地址</a><br><b>手机归属地查询(可在线调用)</b>:根据手机号码查询手机号的归属地信息——<a href="https://www.free-api.com/doc/322" target="_blank" rel="noopener">接口地址</a><br><b>手机归属地查询</b>:根据手机号码查询手机号的归属地信息，来源…——<a href="https://www.free-api.com/doc/323" target="_blank" rel="noopener">接口地址</a><br><b>IP域名归属地查询(可在线调用)</b>:查询IP或者域名归属地——<a href="https://www.free-api.com/doc/324" target="_blank" rel="noopener">接口地址</a><br><b>身份证查询(可在线调用)</b>:根据身份证获取该身份证号码的籍贯，出生年…——<a href="https://www.free-api.com/doc/325" target="_blank" rel="noopener">接口地址</a><br><b>淘宝关键字(可在线调用)</b>:淘宝搜索关键字——<a href="https://www.free-api.com/doc/326" target="_blank" rel="noopener">接口地址</a><br><b>百度关键字</b>:百度搜索关键字——<a href="https://www.free-api.com/doc/327" target="_blank" rel="noopener">接口地址</a><br><b>Bing关键字(可在线调用)</b>:Bing搜索关键字——<a href="https://www.free-api.com/doc/328" target="_blank" rel="noopener">接口地址</a><br><b>获取用户设备信息(可在线调用)</b>:通过 user-agent 分析用户设备…——<a href="https://www.free-api.com/doc/329" target="_blank" rel="noopener">接口地址</a><br><b>百度音乐搜索(可在线调用)</b>:根据关键字获取音乐的相关信息——<a href="https://www.free-api.com/doc/330" target="_blank" rel="noopener">接口地址</a></p>
<hr>
<p>努力添加中……</p>
<p><strong>原文链接：<a href="https://github.com/fangzesheng/free-api" target="_blank" rel="noopener">https://github.com/fangzesheng/free-api</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>PM2介绍</title>
    <url>/2019/12/10/pm2-common-commands-introduction.html</url>
    <content><![CDATA[<p>pm2 是一个带有负载均衡功能的Node应用的进程管理器。当你要把你的独立代码利用全部的服务器上的所有CPU，并保证进程永远都活着，0秒的重载， PM2是完美的。</p>
<p>主要特性：<br>1.内建负载均衡（使用Node cluster 集群模块）<br>2.后台运行<br>3.0秒停机重载，我理解大概意思是维护升级的时候不需要停机<br>4.具有Ubuntu和CentOS的启动脚本<br>5.停止不稳定的进程（避免无限循环）<br>6.控制台检测<br>7.提供 HTTP API<br>8.远程控制和实时的接口API(Nodejs模块,允许和PM2进程管理器交互 )</p>
<a id="more"></a>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g pm2 <span class="comment">#命令行安装pm2</span></span><br></pre></td></tr></table></figure>
<h5 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 start app.js -i 4 <span class="comment">#后台运行pm2，启动4个app.js</span></span><br><span class="line">pm2 start app.js --name my-api  <span class="comment">#命名进程</span></span><br><span class="line">pm2 list  <span class="comment">#显示所有进程状态</span></span><br><span class="line">pm2 monit  <span class="comment">#监视所有进程</span></span><br><span class="line">pm2 logs  <span class="comment">#显示所有进程日志</span></span><br><span class="line">pm2 stop all  <span class="comment">#停止所有进程</span></span><br><span class="line">pm2 restart all  <span class="comment">#重启所有进程</span></span><br><span class="line">pm2 reload all  <span class="comment">#0秒停机重载进程 (用于 NETWORKED 进程)</span></span><br><span class="line">pm2 stop 0  <span class="comment">#停止指定的进程</span></span><br><span class="line">pm2 restart 0  <span class="comment">#重启指定的进程</span></span><br><span class="line">pm2 startup  <span class="comment">#产生 init 脚本 保持进程活着</span></span><br><span class="line">pm2 web  <span class="comment">#运行健壮的 computer API endpoint</span></span><br><span class="line">pm2 delete 0  <span class="comment">#杀死指定的进程</span></span><br><span class="line">pm2 delete all  <span class="comment">#杀死全部进程</span></span><br><span class="line"></span><br><span class="line">运行进程的不同方式：</span><br><span class="line">pm2 start app.js -i max  <span class="comment">#根据有效CPU数目启动最大进程数目</span></span><br><span class="line">pm2 start app.js -i 3  <span class="comment">#启动3个进程</span></span><br><span class="line">pm2 start app.js -x  <span class="comment">#用fork模式启动 app.js 而不是使用 cluster</span></span><br><span class="line">pm2 start app.js -x -- -a 23  <span class="comment">#用fork模式启动 app.js 并且传递参数 (-a 23)</span></span><br><span class="line">pm2 start app.js --name serverone <span class="comment">#启动一个进程并把它命名为 serverone</span></span><br><span class="line">pm2 stop serverone  <span class="comment">#停止serverone进程</span></span><br><span class="line">pm2 start app.json  <span class="comment">#启动进程, 在app.json里设置选项</span></span><br><span class="line">pm2 start app.js -i max -- -a 23  <span class="comment">#在--之后给app.js传递参数</span></span><br><span class="line">pm2 start app.js -i max -e err.log -o out.log  <span class="comment">#启动 并生成一个配置文件</span></span><br><span class="line">你也可以执行用其他语言编写的app ( fork 模式):</span><br><span class="line">pm2 start my-bash-script.sh -x --interpreter bash</span><br><span class="line">pm2 start my-python-script.py -x --interpreter python</span><br><span class="line">pm2 list <span class="comment">#列出由pm2管理的所有进程信息，还会显示一个进程会被启动多少次</span></span><br><span class="line">pm2 monit <span class="comment">#监视每个node进程的CPU和内存的使用情况。</span></span><br></pre></td></tr></table></figure>

<p><strong>本文链接：<a href="">PM2介绍</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>pm2</tag>
      </tags>
  </entry>
  <entry>
    <title>PM2守护hexo的进程</title>
    <url>/2019/12/08/pm2-watch-hexo-process.html</url>
    <content><![CDATA[<p>在服务器上安装好了hexo，执行hexo sever来启动它的服务，会发现过了一段时间hexo的进程总是莫名其妙的挂掉，然后导致网站无法访问。从网上搜索了一些解决方案，发现能使用PM2来接管hexo的后台进程，从而让hexo进程一直常驻后台。</p>
<p>操作步骤如下：</p>
<h5 id="1-首先安装pm2"><a href="#1-首先安装pm2" class="headerlink" title="1.首先安装pm2"></a>1.首先安装pm2</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g pm2</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h5 id="2-写一个shell-hexo-daemon-js"><a href="#2-写一个shell-hexo-daemon-js" class="headerlink" title="2.写一个shell hexo_daemon.js"></a>2.写一个shell hexo_daemon.js</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//run</span><br><span class="line">const &#123; <span class="built_in">exec</span> &#125; = require(<span class="string">'child_process'</span>)</span><br><span class="line"><span class="built_in">exec</span>(<span class="string">'hexo server -p 80 &amp; '</span>,(error, stdout, stderr) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(error)&#123;</span><br><span class="line">                console.log(<span class="string">'exec error: $&#123;error&#125;'</span>)</span><br><span class="line">                <span class="built_in">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        console.log(<span class="string">'stdout: $&#123;stdout&#125;'</span>);</span><br><span class="line">        console.log(<span class="string">'stderr: $&#123;stderr&#125;'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h5 id="3-在根目录下执行shell"><a href="#3-在根目录下执行shell" class="headerlink" title="3.在根目录下执行shell"></a>3.在根目录下执行shell</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 start hexo_daemon.js</span><br></pre></td></tr></table></figure>
<p><strong>本文链接：<a href="">PM2守护hexo的进程</a><br>欢迎转载，请注明出处！<br>参考:<a href="https://www.jianshu.com/p/4a3d4d144ab2" target="_blank" rel="noopener">PM2使用</a></strong></p>
]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>pm2</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用命令使用</title>
    <url>/2019/11/26/git-orders_02.html</url>
    <content><![CDATA[<h3 id="1-查看工作区的状态"><a href="#1-查看工作区的状态" class="headerlink" title="1.查看工作区的状态"></a>1.查看工作区的状态</h3><p><code>$ git status</code></p>
<h3 id="2-查看文件具体修改了什么内容"><a href="#2-查看文件具体修改了什么内容" class="headerlink" title="2.查看文件具体修改了什么内容"></a>2.查看文件具体修改了什么内容</h3><p><code>$ git diff &lt;file&gt;</code></p>
<h3 id="3-查看提交的历史记录"><a href="#3-查看提交的历史记录" class="headerlink" title="3.查看提交的历史记录"></a>3.查看提交的历史记录</h3><p>该命令显示从最近到最远的历史记录：<code>$ git log</code>。如果嫌输出信息太多，可以试试加上<code>--pretty=oneline</code>参数：<code>$ git log --graph --pretty=oneline --abbrev-commit</code>，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span><br><span class="line">eede197ffb267fbda60482da9554ba654ff523e3 init hexo repo</span><br><span class="line">1f2508638115730cb301f73c51b9971fca5c7f09 Initial commit</span><br></pre></td></tr></table></figure>
<p>上面输出的一大串数字其实是 commit id(版本号)，这是一个SHA1计算出来的一个非常大的数字，用十六进制表示</p>
<a id="more"></a>

<h3 id="4-回退版本"><a href="#4-回退版本" class="headerlink" title="4.回退版本"></a>4.回退版本</h3><p><code>$ git reset</code>在git中用<code>HEAD</code>表示当前版本，<code>HEAD^</code>表示上个版本，<code>HEAD^^</code>表示上上版本……以此类推，<code>HEAD~100</code>表示往上100个版本<br>现在我们用命令回退到上个版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br><span class="line">HEAD is now at 1f2508</span><br></pre></td></tr></table></figure>
<p>可以根据版本号<code>commit id</code>指定回退到某个版本：<br><code>$ git reset --hard eede19</code><br>这里的版本号没必要写全，前几位就可以了，Git会自动去找，这样我们就又回到最新的版本了。Git版本的回退速度非常快，在Git内部有个指向当前版本的指针<code>HEAD</code>，所以我们在进行版本回退或回到最新的版本的时候，Git只是帮我们将<code>HEAD</code>指针指向某个版本号。</p>
<h3 id="5-记录你的每一条命令"><a href="#5-记录你的每一条命令" class="headerlink" title="5.记录你的每一条命令"></a>5.记录你的每一条命令</h3><p><code>$ git reflog</code>可以查看<code>commit id</code>,提交具体的操作和提交输入的信息，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reflog </span><br><span class="line">eede197 HEAD@&#123;0&#125;: rebase finished: returning to refs/heads/master</span><br><span class="line">eede197 HEAD@&#123;1&#125;: pull --rebase origin master: init hexo repo</span><br><span class="line">1f25086 HEAD@&#123;2&#125;: pull --rebase origin master: checkout 1f2508638115730cb301f73c51b9971fca5c7f09</span><br><span class="line">fe14566 HEAD@&#123;3&#125;: commit (initial): init hexo repo</span><br></pre></td></tr></table></figure>

<h3 id="6-丢弃工作区的修改"><a href="#6-丢弃工作区的修改" class="headerlink" title="6.丢弃工作区的修改"></a>6.丢弃工作区的修改</h3><p><code>$ git checkout -- &lt;file&gt;</code>文件修改还没有添加到暂存区，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout -- readme.txt</span><br></pre></td></tr></table></figure>
<p>当文件修改后已经添加到了暂存区又作了修改，现在撤销修改就回到添加到暂存区后的状态。</p>
<h3 id="7-把添加到暂存区的内容撤销"><a href="#7-把添加到暂存区的内容撤销" class="headerlink" title="7.把添加到暂存区的内容撤销"></a>7.把添加到暂存区的内容撤销</h3><p><code>$ git reset HEAD &lt;file&gt;</code> <code>HEAD</code>表示当前分支的最新提交</p>
<h3 id="8-分支"><a href="#8-分支" class="headerlink" title="8.分支"></a>8.分支</h3><ul>
<li>查看分支：<code>$ git branch</code></li>
<li>创建分支：<code>$ git branch &lt;name&gt;</code>。我们创建新分支dev时，Git会新建一个指针叫<code>dev</code>，指向当前分支<code>master</code>的相同的提交点（HEAD指针指向的是当前分支），再把<code>HEAD</code>指向<code>dev</code>，之后的操作就在<code>dev</code>分支上完成，如图：<br><img src="/images/git_201912101316.png" alt="upload successful"></li>
<li>切换分支：<code>$ git checkout &lt;name&gt;</code> OR <code>$ git switch &lt;name&gt;</code></li>
<li>创建并切换分支：<code>$ git checkout -b &lt;name&gt;</code> OR <code>$ git switch -c &lt;name&gt;</code></li>
<li>合并分支到当前分支:<code>$ git merge &lt;name&gt;</code>。当<code>dev</code>分支开发结束后，我们需要把<code>dev</code>分支合并到<code>master</code>（主分支）上，Git是如何操作的呢？Git直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并，这些操作都是靠指针来完成，文件并没有发生变化，如图：<br><img src="/images/git_201912101318.png" alt="upload successful"><br>分支合并时，Git默认使用<code>Fast forward</code>模式，使用这种模式，删除分支后，会丢掉分支的历史信息，使用<code>--no-ff</code>可以禁用<code>Fast forward</code>模式 <code>$ git merge --no-ff -m &quot;merge with no-ff&quot; dev</code>，这样每次合并会创建一个新的commit，加上<code>-m</code>参数，写上commit的描述。</li>
<li>删除分支：<code>$ git branch -d &lt;name&gt;</code>。合并完分支后就可以删除<code>dev</code>分支，删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后我们就剩下了一条<code>master</code>分支，如图：<br><img src="/images/201912101319.png" alt="upload successful"></li>
<li>12.查看分支合并图：<code>$ git log --graph</code></li>
</ul>
<h3 id="9-标签"><a href="#9-标签" class="headerlink" title="9.标签"></a>9.标签</h3><ul>
<li>新建一个标签，默认为<code>HEAD</code>,也可以指定一个commit id:<code>$ git tag &lt;tagname&gt; &lt;commit&gt;</code>,不指定commit id时，默认标签是打在最新提交的commit上</li>
<li>创建带有说明的标签，用<code>-a</code>指定标签名，<code>-m</code>指定说明文字:<code>$ git tag -a &lt;tagname&gt; -m &quot;tag message&quot; &lt;commit&gt;</code></li>
<li>查看所有标签：<code>$ git tag</code></li>
<li>删除指定标签：<code>$ git tag -d &lt;tagname&gt;</code></li>
<li>推送某个标签到远程：<code>$ git push &lt;remote&gt; &lt;tagname&gt;</code></li>
<li>一次性推送全部尚未推送到远程的本地标签:<code>$ git push &lt;remote&gt; --tags</code></li>
<li>删除远程标签,先从本地删除:<code>$ git tag -d &lt;tagname&gt;</code> ，然后 <code>$ git push &lt;remote&gt; :refs/tags/&lt;tagname&gt;</code></li>
</ul>
<h3 id="10-cherry-pick"><a href="#10-cherry-pick" class="headerlink" title="10.cherry-pick"></a>10.cherry-pick</h3><p>从不同的分支里选择某次提交并且把它合并到当前的分支。首先切换到我想要放入该提交的分支，然后执行如下命令：<br><code>$ git cherry-pick [commit_hash]</code></p>
<p>团队协作的分支开发流程图，如图：<br><img src="/images/git_201912101326.png" alt="upload successful"></p>
<p><strong>本文链接：<a href="">Git常用命令使用</a><br>欢迎转载，请注明出处！<br>参考：<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/896043488029600</a></strong></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>工作中99%能用到的Git命令</title>
    <url>/2019/11/26/git-orders_01.html</url>
    <content><![CDATA[<h3 id="分支操作："><a href="#分支操作：" class="headerlink" title="分支操作："></a>分支操作：</h3><ul>
<li>git branch 创建分支</li>
<li>git branch -b 创建并切换到新建的分支上</li>
<li>git checkout 切换分支</li>
<li>git branch 查看分支列表</li>
<li>git branch -v 查看所有分支的最后一次操作</li>
<li>git branch -vv 查看当前分支</li>
<li>git brabch -b 分支名 origin/分支名 创建远程分支到本地</li>
<li>git branch –merged 查看别的分支和当前分支合并过的分支</li>
<li>git branch –no-merged 查看未与当前分支合并的分支</li>
<li>git branch -d 分支名 删除本地分支</li>
<li>git branch -D 分支名 强行删除分支</li>
<li>git branch origin 分支名 删除远处仓库分支(不可用)</li>
<li>git push origin :分支名 删除远处仓库分支（可用），冒号前面的空格不能少，原理是把一个空分支push到server上，相当于删除该分支</li>
<li>git merge 分支名 合并分支到当前分支上</li>
</ul>
<a id="more"></a>

<h3 id="暂存操作："><a href="#暂存操作：" class="headerlink" title="暂存操作："></a>暂存操作：</h3><ul>
<li>git stash 暂存当前修改</li>
<li>git stash apply 恢复最近的一次暂存</li>
<li>git stash pop 恢复暂存并删除暂存记录</li>
<li>git stash list 查看暂存列表</li>
<li>git stash drop 暂存名(例：stash@{0}) 移除某次暂存</li>
<li>git stash clear 清除暂存</li>
</ul>
<h3 id="回退操作："><a href="#回退操作：" class="headerlink" title="回退操作："></a>回退操作：</h3><ul>
<li>git reset –hard HEAD^ 回退到上一个版本</li>
<li>git reset –hard ahdhs1(commit_id) 回退到某个版本</li>
<li>git checkout – file撤销修改的文件(如果文件加入到了暂存区，则回退到暂存区的，如果文件加入到了版本库，则还原至加入版本库之后的状态)</li>
<li>git reset HEAD file 撤回暂存区的文件修改到工作区</li>
</ul>
<h3 id="标签操作："><a href="#标签操作：" class="headerlink" title="标签操作："></a>标签操作：</h3><ul>
<li>git tag 标签名 添加标签(默认对当前版本)</li>
<li>git tag 标签名 commit_id 对某一提交记录打标签</li>
<li>git tag -a 标签名 -m ‘描述’ 创建新标签并增加备注</li>
<li>git tag 列出所有标签列表</li>
<li>git show 标签名 查看标签信息</li>
<li>git tag -d 标签名 删除本地标签</li>
<li>git push origin 标签名 推送标签到远程仓库</li>
<li>git push origin –tags 推送所有标签到远程仓库</li>
<li>git push origin :refs/tags/标签名 从远程仓库中删除标签</li>
</ul>
<h3 id="常规操作："><a href="#常规操作：" class="headerlink" title="常规操作："></a>常规操作：</h3><ul>
<li>git push origin test 推送本地分支到远程仓库</li>
<li>git rm -r –cached 文件/文件夹名字 取消文件被版本控制</li>
<li>git reflog 获取执行过的命令</li>
<li>git log –graph 查看分支合并图</li>
<li>git merge –no-ff -m ‘合并描述’ 分支名 不使用Fast forward方式合并，采用这种方式合并可以看到合并记录</li>
<li>git check-ignore -v 文件名 查看忽略规则</li>
<li>git add -f 文件名 强制将文件提交</li>
</ul>
<h3 id="git创建项目仓库："><a href="#git创建项目仓库：" class="headerlink" title="git创建项目仓库："></a>git创建项目仓库：</h3><ul>
<li>git init 初始化</li>
<li>git remote add origin url 关联远程仓库</li>
<li>git pull</li>
<li>git fetch 获取远程仓库中所有的分支到本地</li>
</ul>
<h3 id="忽略已加入到版本库中的文件："><a href="#忽略已加入到版本库中的文件：" class="headerlink" title="忽略已加入到版本库中的文件："></a>忽略已加入到版本库中的文件：</h3><ul>
<li>git update-index –assume-unchanged file 忽略单个文件</li>
<li>git rm -r –cached 文件/文件夹名字 (. 忽略全部文件)</li>
</ul>
<h3 id="取消忽略文件："><a href="#取消忽略文件：" class="headerlink" title="取消忽略文件："></a>取消忽略文件：</h3><ul>
<li>git update-index –no-assume-unchanged file</li>
</ul>
<h3 id="拉取、上传免密码："><a href="#拉取、上传免密码：" class="headerlink" title="拉取、上传免密码："></a>拉取、上传免密码：</h3><ul>
<li>git config –global credential.helper store</li>
</ul>
<p><strong>原文链接：<a href="https://www.cxiansheng.cn/daily/490" target="_blank" rel="noopener">https://www.cxiansheng.cn/daily/490</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>GIT命令清单</title>
    <url>/2019/11/25/git-cheat-sheet.html</url>
    <content><![CDATA[<p>文档来源于<a href="http://www.git-tower.com/" target="_blank" rel="noopener">Tower</a>&gt;Git版本控制系统-使一切变的简单</p>
<p>英文原版下载地址：<a href="http://cdn.ergzcode.com/git/git-cheatsheet.pdf" target="_blank" rel="noopener">http://cdn.ergzcode.com/git/git-cheatsheet.pdf</a></p>
<p>由ergzC0de翻译，如有错误之处，欢迎留言指正</p>
<hr>
<h3 id="1-创建库"><a href="#1-创建库" class="headerlink" title="1.创建库"></a>1.创建库</h3><p>克隆一个现有版本库</p>
<pre><code>$ git clone ssh://user@domain.com/repo.git</code></pre><a id="more"></a>

<p>创建一个本地版本库</p>
<pre><code>$ git init    </code></pre><h3 id="2-本地更改"><a href="#2-本地更改" class="headerlink" title="2.本地更改"></a>2.本地更改</h3><p>查看工作区的状态</p>
<pre><code>$ git status    </code></pre><p>查看被跟踪的文件更改了什么内容</p>
<pre><code>$ git diff &lt;file&gt;</code></pre><p>添加所有的文件修改到暂存区</p>
<pre><code>$ git add .    </code></pre><p>指定某个文件添加到暂存区，-p参数可省略</p>
<pre><code>$ git add -p &lt;file&gt;    </code></pre><p>提交跟踪文件中的所有本地更改，建议一般不使用-a参数</p>
<pre><code>$ git commit -a</code></pre><p>将暂存区里的更改给提交到本地版本库，-m参数指定提交信息</p>
<pre><code>$ git commit -m &quot;message&quot;</code></pre><p>更改最后一次提交,不修改已发布的提交,也就是追加提交，不会增加新的commit id将新的修改追加到前一次的commit id中</p>
<pre><code>$ git commit --amend</code></pre><h3 id="3-提交历史"><a href="#3-提交历史" class="headerlink" title="3.提交历史"></a>3.提交历史</h3><p>显示提交的日志</p>
<pre><code>$ git log</code></pre><p>某个文件的提交日志</p>
<pre><code>$ git log -p &lt;file&gt;</code></pre><p>何人何时修改的某个文件日志</p>
<pre><code>$ git blame &lt;file&gt;</code></pre><h3 id="4-分支和标签"><a href="#4-分支和标签" class="headerlink" title="4.分支和标签"></a>4.分支和标签</h3><p>列出所有的分支</p>
<pre><code>$ git branch -av </code></pre><p>切换当前分支</p>
<pre><code>$ git checkout &lt;branch&gt;</code></pre><p>创建新分支</p>
<pre><code>$ git branch &lt;new-branch&gt;</code></pre><p>基于远程分支创建一个新的跟踪分支</p>
<pre><code>$ git checkout --track &lt;remote/branch&gt;</code></pre><p>删除一个分支</p>
<pre><code>$ git branch -d &lt;branch&gt;</code></pre><p>给当前提交贴一个标签，常用于发布版本</p>
<pre><code>$ git tag &lt;tag-name&gt;</code></pre><h3 id="5-更新和发布"><a href="#5-更新和发布" class="headerlink" title="5.更新和发布"></a>5.更新和发布</h3><p>列出所有当前配置的远程地址</p>
<pre><code>$ git remote -v</code></pre><p>显示某个远程地址的信息</p>
<pre><code>$ git remote show &lt;remote&gt;</code></pre><p>关联一个远程库，一般别名用origin</p>
<pre><code>$ git remote add &lt;shortname&gt; &lt;url&gt;</code></pre><p>从远程库下载所有的更改，但不合并到当前分支上</p>
<pre><code>$ git fetch &lt;remote&gt;</code></pre><p>从远程库下载所有的更改并直接合并到当前分支上</p>
<pre><code>$ git pull &lt;remote&gt; &lt;branch&gt;</code></pre><p>推送本地修改到远程库</p>
<pre><code>$ git push &lt;remote&gt; &lt;branch&gt;</code></pre><p>删除远程库的分支</p>
<pre><code>$ git branch -dr &lt;remote/branch&gt;</code></pre><p>推送标签</p>
<pre><code>$ git push --tags</code></pre><h3 id="6-分支和重定"><a href="#6-分支和重定" class="headerlink" title="6.分支和重定"></a>6.分支和重定</h3><p>合并指定分支到当前分支上</p>
<pre><code>$ git merge &lt;branch&gt;</code></pre><p>将最新的分支提交到本地    </p>
<pre><code>$ git rebase &lt;branch&gt;</code></pre><p>中止一个rebase</p>
<pre><code>$ git rebase --abort</code></pre><p>解决冲突后继续重新执行rebase    </p>
<pre><code>$ git rebase --continue</code></pre><p>使用您配置的合并工具来解决冲突</p>
<pre><code>$ git mergetool</code></pre><p>使用您的编辑器手动解决冲突和(解决后)标记文件作为解决</p>
<pre><code>$ git add &lt;resolved-file&gt;
$ git rm &lt;resolved-file&gt;</code></pre><h3 id="7-撤销（回退）"><a href="#7-撤销（回退）" class="headerlink" title="7.撤销（回退）"></a>7.撤销（回退）</h3><p>撤销工作区的所有本地更改</p>
<pre><code>$ git reset --hard HEAD</code></pre><p>丢弃工作区的修改，文件修改还没有添加到暂存区,推荐第2种</p>
<pre><code>$ git checkout HEAD &lt;file&gt;
  or
$ git checkout -- &lt;file&gt;</code></pre><p>还原提交(通过产生具有相反更改的新提交)</p>
<pre><code>$ git revert &lt;commit&gt;</code></pre><p>回退到某个版本</p>
<pre><code>//回退到上个版本
$ git reset --hard HEAD^

//根据指定commit id回退版本
$ git reset --hard &lt;commit&gt;</code></pre><p>保存未添加暂存区的所有更改</p>
<pre><code>$ git reset &lt;commit&gt;</code></pre><p>保存未提交的本地更改</p>
<pre><code>$ git reset --keep &lt;commit&gt;</code></pre><p>把添加到暂存区的内容撤销（补充）</p>
<pre><code>$ git reset HEAD &lt;file&gt;</code></pre><p><strong>本文链接：<a href="">GIT命令清单</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx搭建HTTP文件服务器</title>
    <url>/2019/11/14/nginx-build-http-file-system.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><strong>Nginx(engine x)是一个高性能的HTTP和反向代理web服务器，同时能提供了IMAP/POP3/SMTP服务，Nginx的优点：</strong></p>
<h5 id="1-高性能，支持高并发连接"><a href="#1-高性能，支持高并发连接" class="headerlink" title="1.高性能，支持高并发连接"></a>1.高性能，支持高并发连接</h5><h5 id="2-低资源消耗，内存占用少"><a href="#2-低资源消耗，内存占用少" class="headerlink" title="2.低资源消耗，内存占用少"></a>2.低资源消耗，内存占用少</h5><h5 id="3-稳定性高"><a href="#3-稳定性高" class="headerlink" title="3.稳定性高"></a>3.稳定性高</h5><h5 id="4-配置简单"><a href="#4-配置简单" class="headerlink" title="4.配置简单"></a>4.配置简单</h5><h5 id="5-支持热部署"><a href="#5-支持热部署" class="headerlink" title="5.支持热部署"></a>5.支持热部署</h5><a id="more"></a>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="1-检查Nignx是否安装"><a href="#1-检查Nignx是否安装" class="headerlink" title="1.检查Nignx是否安装"></a>1.检查Nignx是否安装</h4><p><strong>使用以下命令检查Nginx服务器状态：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status nginx</span><br></pre></td></tr></table></figure>
<h4 id="2-安装Nginx-ubuntu"><a href="#2-安装Nginx-ubuntu" class="headerlink" title="2.安装Nginx(ubuntu)"></a>2.安装Nginx(ubuntu)</h4><p><strong>命令：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure>
<p><strong>Ubuntu安装之后的文件结构大致为：</strong></p>
<ul>
<li>所有的配置文件都在/etc/nginx下，并且每个虚拟主机已经安排在了/etc/nginx/sites-available下</li>
<li>程序文件/usr/sbin/nginx</li>
<li>日志在/var/log/nginx目录中</li>
<li>启动脚本nginx在/etc/init.d/下</li>
<li>默认的虚拟主机的目录设置在了/var/www/nginx-default (有的版本默认的虚拟主机的目录设置在了/var/www, 请参考/etc/nginx/sites-available里的配置)</li>
</ul>
<p><strong>在/etc/nginx目录下，nginx.conf是Nginx的核心配置文件，可以修改处理器数量、日志路径、pid文件等。在nginx.conf文件中有一段代码：<code>inxclude /etc/nginx/conf.d/*.conf</code>,这表示可以将自己的配置文件放在conf.d/中，Nginx会自动识别这个配置文件</strong></p>
<h4 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3.修改配置文件"></a>3.修改配置文件</h4><p><code>vim /etc/nginx/sites-available/default</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 8080 default_server;</span><br><span class="line">        listen [::]:8080 default_server;</span><br><span class="line">        <span class="comment">#root /usr/share/nginx/html;</span></span><br><span class="line">        root /usr/<span class="built_in">local</span>/data/file;</span><br><span class="line">        server_name _;</span><br><span class="line">        location / &#123;</span><br><span class="line">           <span class="comment"># First attempt to serve request as file, then</span></span><br><span class="line">           <span class="comment"># as directory, then fall back to displaying a 404.</span></span><br><span class="line">           try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ =404;</span><br><span class="line">           autoindex on;<span class="comment">#显示目录</span></span><br><span class="line">           autoindex_exact_size on;<span class="comment">#显示文件大小</span></span><br><span class="line">           autoindex_localtime on;<span class="comment">#显示文件时间</span></span><br><span class="line">           charset utf-8;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-启动nginx"><a href="#4-启动nginx" class="headerlink" title="4.启动nginx"></a>4.启动nginx</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/nginx start</span><br></pre></td></tr></table></figure>
<h4 id="5-浏览器访问"><a href="#5-浏览器访问" class="headerlink" title="5.浏览器访问"></a>5.浏览器访问</h4><p>浏览器打开：<code>http://localhost:8080</code>可以看到/data/file目录下的文件，点击可下载</p>
<h4 id="6-修改配置后重载"><a href="#6-修改配置后重载" class="headerlink" title="6.修改配置后重载"></a>6.修改配置后重载</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/nginx reload</span><br></pre></td></tr></table></figure>

<p><strong>本文链接：<a href="">Nginx搭建HTTP文件服务器</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>图解SQL的各种join用法</title>
    <url>/2019/11/09/diagrams-for-various-join-uses-of-sql.html</url>
    <content><![CDATA[<p><strong>下图展示了LEFT JOIN、RIGHT JOIN、INNER JOIN、OUTER JOIN 相关的 7 种用法</strong></p>
<p><img src="/images/sql_201912121520.png" alt="upload successful"></p>
<a id="more"></a>
<h4 id="具体分解如下："><a href="#具体分解如下：" class="headerlink" title="具体分解如下："></a>具体分解如下：</h4><h5 id="1-INNER-JOIN（内连接）"><a href="#1-INNER-JOIN（内连接）" class="headerlink" title="1.INNER JOIN（内连接）"></a>1.INNER JOIN（内连接）</h5><p><img src="/images/sql_201912121523.png" alt="upload successful"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;select_list&gt; </span><br><span class="line"><span class="keyword">FROM</span> Table_A A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> Table_B B</span><br><span class="line"><span class="keyword">ON</span> A.Key = B.Key</span><br></pre></td></tr></table></figure>
<h5 id="2-LEFT-JOIN（左连接）"><a href="#2-LEFT-JOIN（左连接）" class="headerlink" title="2.LEFT JOIN（左连接）"></a>2.LEFT JOIN（左连接）</h5><p><img src="/images/sql_201912121558.png" alt="upload successful"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;select_list&gt;</span><br><span class="line"><span class="keyword">FROM</span> Table_A A</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Table_B B</span><br><span class="line"><span class="keyword">ON</span> A.Key = B.Key</span><br></pre></td></tr></table></figure>
<h5 id="3-RIGHT-JOIN（右连接）"><a href="#3-RIGHT-JOIN（右连接）" class="headerlink" title="3.RIGHT JOIN（右连接）"></a>3.RIGHT JOIN（右连接）</h5><p><img src="/images/sql_201912121528.png" alt="upload successful"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;select_list&gt;</span><br><span class="line"><span class="keyword">FROM</span> Table_A A</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> Table_B B</span><br><span class="line"><span class="keyword">ON</span> A.Key = B.Key</span><br></pre></td></tr></table></figure>
<h5 id="4-OUTER-JOIN（外连接）"><a href="#4-OUTER-JOIN（外连接）" class="headerlink" title="4.OUTER JOIN（外连接）"></a>4.OUTER JOIN（外连接）</h5><p><img src="/images/sql_201912121532.png" alt="upload successful"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;select_list&gt;</span><br><span class="line"><span class="keyword">FROM</span> Table_A A</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Table_B B</span><br><span class="line"><span class="keyword">ON</span> A.Key = B.Key</span><br></pre></td></tr></table></figure>
<h5 id="5-LEFT-JOIN-EXCLUDING-INNER-JOIN（左连接-内连接）"><a href="#5-LEFT-JOIN-EXCLUDING-INNER-JOIN（左连接-内连接）" class="headerlink" title="5.LEFT JOIN EXCLUDING INNER JOIN（左连接-内连接）"></a>5.LEFT JOIN EXCLUDING INNER JOIN（左连接-内连接）</h5><p><img src="/images/sql_201912121531.png" alt="upload successful"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;select_list&gt; </span><br><span class="line"><span class="keyword">FROM</span> Table_A A</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Table_B B</span><br><span class="line"><span class="keyword">ON</span> A.Key = B.Key</span><br><span class="line"><span class="keyword">WHERE</span> B.Key <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></table></figure>
<h5 id="6-RIGHT-JOIN-EXCLUDING-INNER-JOIN（右连接-内连接）"><a href="#6-RIGHT-JOIN-EXCLUDING-INNER-JOIN（右连接-内连接）" class="headerlink" title="6.RIGHT JOIN EXCLUDING INNER JOIN（右连接-内连接）"></a>6.RIGHT JOIN EXCLUDING INNER JOIN（右连接-内连接）</h5><p><img src="/images/sql_201912121552.png" alt="upload successful"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;select_list&gt;</span><br><span class="line"><span class="keyword">FROM</span> Table_A A</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> Table_B B</span><br><span class="line"><span class="keyword">ON</span> A.Key = B.Key</span><br><span class="line"><span class="keyword">WHERE</span> A.Key <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></table></figure>
<h5 id="7-OUTER-JOIN-EXCLUDING-INNER-JOIN（外连接-内连接）"><a href="#7-OUTER-JOIN-EXCLUDING-INNER-JOIN（外连接-内连接）" class="headerlink" title="7.OUTER JOIN EXCLUDING INNER JOIN（外连接-内连接）"></a>7.OUTER JOIN EXCLUDING INNER JOIN（外连接-内连接）</h5><p><img src="/images/sql_201912121553.png" alt="upload successful"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;select_list&gt;</span><br><span class="line"><span class="keyword">FROM</span> Table_A A</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Table_B B</span><br><span class="line"><span class="keyword">ON</span> A.Key = B.Key</span><br><span class="line"><span class="keyword">WHERE</span> A.Key <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">OR</span> B.Key <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></table></figure>

<p><strong>原文链接：<a href="https://www.toutiao.com/i6766789647902179847" target="_blank" rel="noopener">看一张图秒懂SQL的各种JOIN用法</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA常用快捷键</title>
    <url>/2019/06/08/idea-keyboard-shortcuts_01.html</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Alt+Enter</td>
<td>导入包，自动修正代码</td>
</tr>
<tr>
<td>Ctrl+Y</td>
<td>删除光标所在行</td>
</tr>
<tr>
<td>Ctrl+D</td>
<td>复制光标所在行的内容，插入光标的下一行</td>
</tr>
<tr>
<td>Ctrl+Alt+L</td>
<td>格式化代码</td>
</tr>
<tr>
<td>Ctrl+/</td>
<td>单行注释，再按一次取消注释</td>
</tr>
<tr>
<td>Ctrl+Shift+/</td>
<td>选中代码注释，多行注释，再按一次取消注释</td>
</tr>
<tr>
<td>Alt+Ins</td>
<td>自动生成代码，toString,get,set方法</td>
</tr>
<tr>
<td>Alt+Shift+上下箭头</td>
<td>移动当前代码行</td>
</tr>
<tr>
<td>Shift+F6</td>
<td>鼠标选中全局修改名称</td>
</tr>
</tbody></table>
<a id="more"></a>

<p>更新…</p>
<p><strong>本文链接：<a href="">IDEA常用快捷键</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>面试官：Maven的jar包冲突如何解决</title>
    <url>/2019/01/31/java-interview_0029.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>本文主要介绍了解决Maven中jar包冲突的几种方式</p>
<h3 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h3><p>假设我们现在又一个多模块的项目，依赖关系如下，我们在st-web模块中引入st-dal依赖时，st-common-lib这个依赖也会被我们引入，这个就是依赖传递。下表列出了scope在依赖过程中发生的变化，列标题为被依赖的模块，每行为要依赖的模块</p>
<a id="more"></a>

<p><strong>st-common-lib &lt;- st-dal &lt;- st-web</strong></p>
<table>
<thead>
<tr>
<th>[scope]</th>
<th>compile</th>
<th>test</th>
<th>provided</th>
<th>runtime</th>
</tr>
</thead>
<tbody><tr>
<td>compile</td>
<td>compile</td>
<td>-</td>
<td>-</td>
<td>runtime</td>
</tr>
<tr>
<td>test</td>
<td>test</td>
<td>-</td>
<td>-</td>
<td>test</td>
</tr>
<tr>
<td>provided</td>
<td>provided</td>
<td>-</td>
<td>provided</td>
<td>provided</td>
</tr>
<tr>
<td>runtime</td>
<td>runtime</td>
<td>-</td>
<td>-</td>
<td>runtime</td>
</tr>
</tbody></table>
<h3 id="依赖仲裁"><a href="#依赖仲裁" class="headerlink" title="依赖仲裁"></a>依赖仲裁</h3><p>依赖仲裁就是当项目中引入的jar包，groupID（公司名倒过来）和artifactID（功能命令）一样，但是version不一样，应该选用哪一个version？经常也被人叫做依赖冲突</p>
<p><strong>最短路径原则</strong></p>
<p>假如说我们现在的项目依赖关系如下，那么maven会选用st-common-lib的那个版本呢？</p>
<p>答案是1.1这个版本，st-web到st-common-lib（1.1）的距离为1，st-web到st-common-lib（1.0）的距离为2，选用距离短的，即最短路径原则</p>
<p><strong>st-common-lib(1.0) &lt;- st-dal &lt;- st-web -&gt; st-common-lib(1.1)</strong></p>
<p>如何看出依赖的距离关系呢？之前的一篇关于maven的文章说过，执行如下命令打印出全局的依赖树，层级关系特别清楚<br><code>mvn dependency：tree &gt; show.txt</code></p>
<p><strong>声明优先原则</strong></p>
<p>项目依赖如下，路径一样？会选用st-common-lib的哪个版本呢？这就得看你在pom文件中先声明哪个依赖，如果在pom.xml文件中，st-remote-invoke写在前面，就会用1.0这个版本，如果st-dal写在前面，则会用1.1这个版本</p>
<p><strong>st-common-lib（1.0） &lt;- st-remote-invoke &lt;- st-web</strong><br/><br><strong>st-common-lib（1.1） &lt;- st-dal &lt;- st-web</strong></p>
<p><strong>依赖排除</strong></p>
<p>去掉间接引入的jar包</p>
<p>如果不想用spring boot默认提供的log，想集成第三方的log时</p>
<p>或者说上面依赖仲裁的第二个例子中，只想用st-common-lib的1.1版本，就可以把1.0版本排除</p>
<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;
    &lt;exclusions&gt;
        &lt;exclusion&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;
        &lt;/exclusion&gt;
    &lt;/exclusions&gt;
&lt;/dependency&gt;</code></pre><p><strong>本文链接：<a href="">面试官：Maven的jar包冲突如何解决</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>搞定Java面试题</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>面试官：mvn package和mvn install都能打包，他们有区别吗</title>
    <url>/2019/01/30/java-interview_0028.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>我们用maven打包一般用如下2个命令</p>
<p>mvn clean package 清理打包<br>mvn clean install 清理打包，并将jar包或者war包复制到本地仓库</p>
<p>区别就是install比package多了一步将打好的jar包放到本地仓库的过程</p>
<p>我从头说一下maven帮我们做了那些，并解释一下maven的工程流程</p>
<a id="more"></a>

<h3 id="没有Maven之前的日子"><a href="#没有Maven之前的日子" class="headerlink" title="没有Maven之前的日子"></a>没有Maven之前的日子</h3><p>个人的一个小感受，学习一个新技术，应该以历史的眼光来看待这个新技术出现的原因，以及帮我们解决了什么问题。我们来回忆一下没有Maven的日子是怎么样的？  </p>
<p>开发一个项目，需要用别人写好的jar包，我们先把开源的jar包下载下来放到项目的lib目录下，并且把这个目录添加到classpath（告诉Java执行环境，在哪些目录下可以找到你要执行的Java程序需要的类或者包）。我们下载了a.jar发现a.jar还需要依赖b.jar，结果又去把b.jar下载下来开始运行。如果运气够好，我们项目在添加完所有的依赖后，能正常运行了。如果运气不好，还会遇到jar包版本的问题，例如a.jar在调用b.jar的时候发现b.jar根本没有这个方法，在别的版本中才有，现在好了，光找依赖和适配版本就能花上不少时间。而且我们往git上上传代码的时候，还必须把这些lib都上传上去。别人下载我们的代码也必须把lib下载下来，这个真心耗费时间  </p>
<p>这时候Maven作为Java世界包管理工具出现了，当然Java的世界还有其他的包管理工具，例如gradle等。就像yum是Linux世界的包管理工具，webpack是前端世界的包管理工具一样</p>
<h3 id="Maven仓库的种类"><a href="#Maven仓库的种类" class="headerlink" title="Maven仓库的种类"></a>Maven仓库的种类</h3><p><strong>本地仓库，私服，中央仓库</strong><br>Maven找jar包的过程是这样的，先在本地仓库找，找不到再去私服(如果配置了的话)，再找不到去中央仓库（Maven团队维护中）  </p>
<p>从中央仓库找到后，会在私服和本地仓库放一份，从私服找到后也会在本地仓库放一份  </p>
<p>当你安装好了Maven后，在conf目录下有个settings.xml文件，这个里面的配置的项很多，后文会详细介绍这个配置文件</p>
<pre><code>&lt;!-- localRepository --&gt;
Default: ${user.home}/.m2/repository
&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</code></pre><p>在这个配置文件下有这样的一段话，说了Maven默认的本地仓库的地址为${user.home}/.m2/repository（当然你可以重新设置本地仓库的地址，上面就是模板），我是windows电脑，来看看这个目录可以看到很多jar包被存在本地，当然如果你想配置私服也是在settings.xml进行配置，随便一搜很多教程，不再赘述  </p>
<p>搭建私服好处多多，在一个公司内部可以开发一些公共的基础组件放到私服上，方便其他同事使用</p>
<h3 id="Maven的默认配置"><a href="#Maven的默认配置" class="headerlink" title="Maven的默认配置"></a>Maven的默认配置</h3><p>一个Maven的项目整体结构是这样的</p>
<p>在这里插入图片描述（图片省略…）</p>
<p>为什么一个Maven项目的文件结构是这种的呢？</p>
<p>这里就不得不说Maven的一个特性，约定优于配置</p>
<p>Maven默认配置了：<br>${project.basedir}/src/main/java为项目的源代码目录<br>${project.basedir}/src/main/test为项目的测试源代码目录<br>${project.basedir}/target为项目的编译输出目录等   </p>
<p>spring boot 就是约定优于配置的体现，想想我们用springMVC的时候还得配置视图解析器，包的自动扫描，而用spring boot框架后，我们就完全不用再配置了</p>
<h3 id="Maven的项目详解"><a href="#Maven的项目详解" class="headerlink" title="Maven的项目详解"></a>Maven的项目详解</h3><p>安装还是挺简单的，我就不再介绍了，我也没有单独下载，一般就有了idea自带的Maven插件，下载完后目录结构如下：<br><strong>bin目录</strong><br>该目录包含了mvn运行的脚本，这些脚本用来配置java命令，准备好classpath和相关的Java系统属性，然后执行Java命令。  </p>
<p><strong>boot目录</strong><br>该目录只包含一个文件，该文件为<strong>plexus-classworlds-2.5.2.jar</strong>。plexus-classworlds是一个类加载器框架，相对于默认的Java类加载器，它提供了更加丰富的语法以方便配置，Maven使用该框架加载自己的类库  </p>
<p><strong>conf目录</strong><br>该目录包含了一个非常重要的文件settings.xml文件。直接修改该文件，就能在机器上全局的定制Maven的行为，即对所有用户都生效。一般情况下，我们更偏向于复制该文件至<del>/.m2/目录下（</del>表示用户家目录，windows下~就是C:\Users{用户名}），然后修改该文件，在用户级别定制Maven的行为。  </p>
<p><strong>lib目录</strong><br>该目录包含了所有Maven运行需要的Java类库，Maven本身是分模块开发的，因此用户能看到诸如maven-core-3.0.jar，maven-model-3.0.jar之类的文件，此外这里还包含一些Maven用到的第三方依赖如common-cli-1.2.jar,common-lang-2.6.jar等等。</p>
<p><strong>settings.xml配置文件详解</strong><br>我们来细说一下settings.xml文件，这个文件可以定制Maven的行为，上面已经说到settings.xml可以可以放在2个位置，~/.m2/settings.xml(默认没有，需要我们自己复制)和${maven.home}/conf/settings.xml</p>
<p>这2个配置文件的加载顺序为~/.m2/settings.xml &gt; ${maven.home}/conf/settings.xml，为了不影响他人，所以我们将conf下的settings.xml配置文件复制到家目录，在用户级别定制Maven的行为</p>
<p>这个和配置环境变量有点类似，Windows和Linux都可以配置系统级别的环境变量和用户级别的环境变量，这里单说一下Linux的吧，在/etc/profile里面配置的就是系统级别的环境变量，在~/.bash_profile里面配置的就是用户级别的环境变量</p>
<p>各种配置项还是挺多的，设置镜像仓库（国内用阿里云的比较多），设置代理，不再赘述</p>
<h3 id="Maven常用命令"><a href="#Maven常用命令" class="headerlink" title="Maven常用命令"></a>Maven常用命令</h3><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>mvn -version</td>
<td>显示版本信息</td>
</tr>
<tr>
<td>mvn clean</td>
<td>删除target目录</td>
</tr>
<tr>
<td>mvn compile</td>
<td>编译src/main/java下的代码</td>
</tr>
<tr>
<td>mvn package</td>
<td>打包，在target目录下生成jar或war包</td>
</tr>
<tr>
<td>mvn test</td>
<td>执行src/test/java下以Test开头或者以Test结尾的的测试用例</td>
</tr>
<tr>
<td>mvn install</td>
<td>打包，并把jar或war包复制到本地仓库，供其他模块引用</td>
</tr>
<tr>
<td>mvn deploy</td>
<td>将打包的文件发到私服</td>
</tr>
<tr>
<td>mvn dependency：tree</td>
<td>打印出项目整个依赖树</td>
</tr>
</tbody></table>
<p>当然也可以连着使用<br>mvn clean package 清理打包<br>mvn clean package -DskipTest=true 清理打包，并跳过测试用例<br>mvn clean install 清理打包，并将jar包或者war包复制到本地仓库</p>
<p>运行单元测试的时候也没必要一个一个的点击测试方法，mvn test一个命令跑完所有的测试用例，要注意的是只会执行以Test开头或者结尾的测试类，也没必要自己写测试类，网上有些文章介绍了快速生成测试类的方法，可以去搜索看看，生成的测试类都是以Test开头或结尾的，这里不再赘述。</p>
<p>mvn dependency:tree &gt; show.txt将项目的整个依赖重定向到文件中，方便查看  </p>
<p><strong>本文链接：<a href="">面试官：mvn package和mvn install都能打包，他们有区别吗</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>搞定Java面试题</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>面试官：每次你可以爬1或者2个台阶，爬到第n级台阶有多少种方法</title>
    <url>/2019/01/29/java-interview_0019.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>这是leeCode的第70题</p>
<p><strong>题目描述</strong></p>
<p>假设你正在爬楼梯。需要n阶你才能到达楼顶。</p>
<p>每次你可以爬1或者2个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>
<p>注意：给定n是一个正整数。</p>
<p>示例1：</p>
<pre><code>输入：2
输出：2
解释：有两种方法可以爬到楼顶。
1.1阶 + 1阶
2.2阶</code></pre><a id="more"></a>

<p>示例2：<br>    输入：3<br>    输出：3<br>解释：有三种方法可以爬到楼顶。</p>
<pre><code>1.1阶 + 1阶 + 1阶
2.1阶 + 2阶
3.2阶 + 1阶</code></pre><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>这是一个简单的递推题目，搞懂了其实就是一个斐波那契数列。你想的没错，就是你开始学编程时，那个兔子繁殖的问题。</p>
<p>如果一开始有一对兔子，他们每月生育一对兔子，小兔出生后一个月又开始生育繁殖的情况与最初的那对兔子一样，那么一年后有多少对兔子呢？</p>
<p>答案是，每月兔子的总数可以用一下数列表示：1，1，2，3，5，8，13，21，34，55，89，144，233…</p>
<p>来想一下，第n阶台阶可以从那一节上爬上来?只能是n-1和n-2啊，所以我们就能得到递推公式<br>f(n)=f(n-1)+f(n-2),f(n)表示到n阶台阶方法数，这不就是典型的斐波那契数列吗？有意思的是斐波那契数列有很多种实现方法，看来一一道来。</p>
<p><strong>第一种：递归</strong></p>
<p>递归出口是当n=1的值为1，当n=2时值为2</p>
<pre><code>class solution{
    public int climbStairs(int n){
        if(n==1||n==2)
            return n;
    }
    return climbStairs(n-1)+climbStairs(n-2);
}</code></pre><p>这种代码在Leecode上会超时，因为递归比较耗时和耗内存。面试的时候也不要回答这种方法。</p>
<p><strong>第二种：递推</strong><br>当n=1值为1，当n=2时值为2</p>
<p>当n&gt;=3的递推公式是f(n)=f(n-1)+f(n-2)</p>
<pre><code>public class solution{
    public int climbStairs(int n){
        if(n==1)
            return 1;
    }
    int[] f = new int[n+1];
    f[1]=1;
    f[2]=2;
    for (int i = 3; i &lt;= n; i++) {
        f[i] = f[i-2] + f[i-1];
    }
    return f[n];
}</code></pre><p>一般回答这种方式即可，时间复杂度为O(n)</p>
<p><strong>第三种 通向公式</strong></p>
<p>很多人其实并不知道有通向公式，通向公式如下</p>
<p><img src="http://cdn.ergzcode.com/b/wS5voBM.jpg" alt=""></p>
<p>递推过程就不分析了，写这种算法是因为你可以和面试官说一波，因为很多面试官其实也不知道这种方法</p>
<pre><code>public static int climbStaris1(int n){

    double sqrt5=Math.sqrt(5);
    double fibn=Math.pow((1+sqrt5)/2,n+1)-Math.pow((1-sqrt5)/2,n+1);
    return (int) (fibn/sqrt5);
}

public static void main(String[] args) {
    System.out.println(climbStaris1(4));
}</code></pre><p><strong>矩阵快速幂</strong></p>
<p>这种算法用了矩阵乘法的思想，因为要讲清楚还得复习一遍高等数学的矩阵乘法，面试也很少写这种算法，就不再解释了，有兴趣的可以找相关的资料来看，面试中一般用递推打出来就行。面大厂的可以看一波这个算法，偶尔会问的深一点。</p>
<p><strong>本文链接：<a href="">面试官：每次你可以爬1或者2个台阶，爬到第n级台阶有多少种方法</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>搞定Java面试题</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>面试官：写一下单例模式吧，知道单例模式有几种写法吗</title>
    <url>/2019/01/28/java-interview_0012.html</url>
    <content><![CDATA[<p>参考之前的一篇文章：<a href="http://www.ergzcode.com/2016/05/22/design-pattern-for-singleton.html">深入Java单例模式</a></p>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>设计模式很多，单例模式绝对是问的最多的一个了，也是让手写的最多的一个设计模式。很多人只会写双重检测的设计模式，但问的深一点其实很多人答不上来。比如，变量为什么要用volatile修饰，为什么要写2个if，一个if不行吗？还有就是单例模式有很多种写法。我以演进的方式写一个单例模式的5种写法，面试的时候建议写双重检测的写法和静态内部类的写法。</p>
<p>有一些对象其实我们只需要一个，比如说：线程池，缓存，对话框，处理偏好设置和注册表的对象，日志对象，充当打印机，显卡等设备的驱动程序的对象。事实上，这类对象只能看到一个实例，如果制造出多个实例，就会导致许多问题产生，例如：程序的行为异常，资源使用过量，或者不一致的结果。</p>
<a id="more"></a>

<h3 id="第一种（懒汉）"><a href="#第一种（懒汉）" class="headerlink" title="第一种（懒汉）"></a>第一种（懒汉）</h3><pre><code>//code1
public class Singleton {
        private static Singleton uniqueInstance;

    private Singleton(){}

    public static Singleton getInstance(){
        if (uniqueInstance == null){
            uniqueInstance = new Singleton();
        }
        return uniqueInstance;
    }
}</code></pre><p>当2个线程同时进入getInstance()的if语句里面，会返回2个不同的实例，因此这种方式是线程不安全的</p>
<pre><code>//code2
public class Singleton {
        private static Singleton uniqueInstance;

    private Singleton(){}
    //同步方法
    public static synchronized Singleton getInstance(){
        if (uniqueInstance == null){
            uniqueInstance = new Singleton();
        }
        return uniqueInstance;
    }
}</code></pre><p>用所synchronized修饰可以保证线程安全，但是只有第一次执行此方法时才需要同步，设置好uniqueInstance，就不需要同步这个方法了，之后每次调用这个方法，同步都是一种累赘。</p>
<h3 id="双重检查锁定（推荐）"><a href="#双重检查锁定（推荐）" class="headerlink" title="双重检查锁定（推荐）"></a>双重检查锁定（推荐）</h3><p><strong>synchronized锁粒度太大</strong>，人们就想到通过双重检查锁定来降低同步的开销，下面是实例代码</p>
<pre><code>//code3
public class Singleton {
    private static Singleton uniqueInstance;

    private Singleton(){}

    public static Singleton getInstance(){
        if (uniqueInstance == null){
            //同步代码块
            synchronized(Singleton.class){
                if (uniqueInstance == null){
                    uniqueInstance = new Singleton();
                }
            }
        }
        return uniqueInstance;
    }
}</code></pre><p>如上面的代码所示，如果第一次检查uniqueInstance不为null，那么就不需要执行下面的加锁和初始化操作，可以大幅降低synchronized带来的性能消耗，当在多线程环境下试图在同一时间创建对象时，会通过加锁来保证只有一个线程能创建对象，这就保证了只有一个实例的创建。</p>
<p>经常有人对code3中，为什么要执行2次if语句不太清楚，简答的描述一下，有可能有AB2个线程同时进入第一个if语句，然后A拿到锁，创建对象完成。因为B线程也判断了uniqueInstance为null,如果不再做一次判空处理的话，B拿到锁后会重新创建对象，但是加了第二个if语句后，就直接返回退出了。</p>
<p>双重检查锁定看起来似乎很完美，但这里一个错误的优化！在线程执行到getInstance()方法的第4行时，代码读取到uniqueInstance不为null，uniqueSingleton引用指向的对象有可能还没有完成初始化（半初始化）。</p>
<p>简单概述一下《Java并发编程的艺术》的解释，</p>
<p>uniqueInstance = new Singleton()可以分解为如下三行代码：</p>
<pre><code>memory = allocate();//1：申请一块内存空间分配给对象
ctorInstance(memory);//2:调用构造方法初始化对象
uniqueInstance = memory;//3：设置uniqueInstance指向刚分配的内存地址</code></pre><p>3行伪代码中的2和3之间，可能会被重排序，重排序后执行的顺序如下</p>
<pre><code>memory = allocate();//1：申请一块内存空间分配给对象
uniqueInstance = memory;//3：设置uniqueInstance指向刚分配的内存地址
                         //注意：此时对象还没有初始化
ctorInstance(memory);//2:调用构造方法初始化对象</code></pre><p>多个线程访问时可能出现如下的情况</p>
<table>
<thead>
<tr>
<th>时间</th>
<th>线程A</th>
<th>线程B</th>
</tr>
</thead>
<tbody><tr>
<td>11</td>
<td>A1：分配对象的内存空间</td>
<td></td>
</tr>
<tr>
<td>12</td>
<td>A3：设置uniqueInstance指向的内存地址</td>
<td></td>
</tr>
<tr>
<td>13</td>
<td></td>
<td>B1：判断uniqueInstance是否为空</td>
</tr>
<tr>
<td>14</td>
<td></td>
<td>B2：由于uniqueInstance不为null，线程B访问uniqueInstance引用的对象</td>
</tr>
<tr>
<td>15</td>
<td>A2：初始化对象</td>
<td></td>
</tr>
<tr>
<td>16</td>
<td>A4：访问instance引用的对象</td>
<td></td>
</tr>
</tbody></table>
<p>这样会导致线程B访问到一个还没有初始化的对象，此时可以用volatile修饰Singleton,这样3行伪代码中的2和3之间的重排序，在多线程环境中将会被禁止</p>
<pre><code>//code4
public class Singleton {
    private  volatile static Singleton uniqueSingleton;

    private Singleton(){}

    public static  Singleton getInstance(){
        if (uniqueSingleton == null){
            synchronized(Singleton.class){
                if (uniqueSingleton == null){
                    uniqueSingleton = new Singleton();
                }
            }
        }
        return uniqueSingleton;
    }
}</code></pre><h3 id="第三种（饿汉）"><a href="#第三种（饿汉）" class="headerlink" title="第三种（饿汉）"></a>第三种（饿汉）</h3><p>如果应用程序总是创建并使用单例模式，或者在创建和运行时方面的负担不太繁重，我们可以以饿汉式的方式来创建单例<br>code5（静态常量）</p>
<pre><code>//code5
public class Singleton {
    private static final Singleton INSTANCE =new Singleton();

    private Singleton(){}

    public static  Singleton getInstance(){
        return INSTANCE;
    }
}</code></pre><p>code6（静态代码块）</p>
<pre><code>//code6
public class Singleton {
    private static Singleton instance;

    private Singleton(){}

    static {
         uniqueSingleton = new Singleton();
    }

    public static  Singleton getInstance(){
        return instance;
    }
}</code></pre><p>在类加载的时候直接创建这个对象，这样既可以提高效率，又能保证线程安全，code5和code6几乎没有区别，因为静态成员变量和静态代码块都是类初始化的时候加载执行。</p>
<h3 id="第四种静态内部类（推荐用）"><a href="#第四种静态内部类（推荐用）" class="headerlink" title="第四种静态内部类（推荐用）"></a>第四种静态内部类（推荐用）</h3><pre><code>//code7
public class Singleton {
    private static class SingletonHolder{
        private static final Singleton instance = new Singleton();
    }

    private Singleton(){}

    public static Singleton getInstance(){
        return SingletonHolder.instance ;
    }
}</code></pre><p>饿汉式的方式只要Singleton类被装载了，那么instance就会被实例化（没有达到lazy loading的效果），而这种方式是Singleton类被装载了，instance不一定被初始化。因为SingletonHolder类没有被主动使用，只有显示的通过调用getInstance()方法时，才会显示装载SingletonHolder类，从而实例化instance。</p>
<h3 id="第五种枚举（推荐用）"><a href="#第五种枚举（推荐用）" class="headerlink" title="第五种枚举（推荐用）"></a>第五种枚举（推荐用）</h3><pre><code>public enum Singleton {
    INSTANCE;
    public void whateverMethod() {

    }
}</code></pre><p>枚举是公认实现单例的最好方式。借助JDK1.5中添加的枚举来实现的单例模式，不仅能避免多线程安全问题，而且还能防止反序列化和反射对单例的破坏问题。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>不管采用何种方案，请记住使用单例的三大点：</p>
<ul>
<li>线程安全</li>
<li>延迟加载</li>
<li>序列化和反序列化安全</li>
</ul>
<p><strong>本文链接：<a href="">面试官：写一下单例模式吧，知道单例模式有几种写法吗</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>搞定Java面试题</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>面试官：volatile关键字用过吧？说一下作用和实现吧</title>
    <url>/2019/01/27/java-interview_0017.html</url>
    <content><![CDATA[<h3 id="极简计算机发展史"><a href="#极简计算机发展史" class="headerlink" title="极简计算机发展史"></a>极简计算机发展史</h3><p>我们知道，计算机的CPU和内存的交互是最频繁的，内存是我们的高速缓存区。而刚开始是用户磁盘和CPU进行交互，CPU运转速度越来越快，磁盘远远跟不上CPU的读写速度，才设计了内存，但是随着CPU的发展，内存的读写速度也远远跟不上CPU的读写速度，因此，为了解决这一矛盾，CPU厂商在每颗CPU上加上了高速缓存，用来缓解这种症状，因此，现在CPU同内存交互就变成了下面的样子。</p>
<p><strong>CPU&lt;-&gt;High Speed cache memory&lt;-&gt;Main memory physical menory</strong></p>
<a id="more"></a>
<p>单核CPU的性能不可能无限制的增长，要想很多的提升性能，需要多个处理器协同工作，这就是多核处理器的由来。基于高速缓存的存储交互很好的解决了处理器和内存之间的矛盾。也引入了新的问题：缓存一致性的问题。在多核处理器系统中，每个处理器有自己的高速缓存，而他们又共享同一个块内存（下文成主存，main memory主要内存），当多个处理器运算都涉及到同一块内存区域的时候，就有可能发生缓存不一致的现象。为了解决这一问题，需要各个处理器运行时都遵循一些协议，在运行时需要用这些协议来保证数据的一致性。</p>
<img src="http://cdn.ergzcode.com/b/vdohcW5.jpg" width = "60%" height = "40%" div align=center/>

<p>缓存一致性协议中最出名的就是Intel的MESI协议。MESI协议保证了每个缓存中使用的共享变量的副本是一致的。它的核心的思想是：当CPU写数据时，如果发生操作的变量是共享变量，即在其他CPU中也存在该变量的副本，会发出信号通知其他CPU将该变量的缓存设置为无效状态，因此当其他CPU需要读取这个变量时，发现自己缓存中该变量是无效状态，那么它就会从内存中重新读取</p>
<h3 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h3><p>Java的内存模型和上面的结构还是挺相似的，此时在看工作内存和主内存的关系，从逻辑上，高速缓存对应工作内存，每个线程分配到CPU时间片时，独自享有高速缓存的使用能力。主内存对应存储的物理内存，这只是逻辑上的对等关系，物理上的具体对应关系十分复杂，这里不讨论。</p>
<img src="http://cdn.ergzcode.com/b/tGsWL8n.jpg" width = "60%" height = "40%" div align=center/>

<h3 id="volatile的作用是什么"><a href="#volatile的作用是什么" class="headerlink" title="volatile的作用是什么"></a>volatile的作用是什么</h3><p>volatile可以保证可见性，有序性，但不保证原子性：</p>
<ul>
<li><p>可见性</p>
<p>可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看到修改的值</p>
</li>
</ul>
<p>假如说有2个线程对一个变量data进行操作，线程先会把主内存中的值缓存到工作内存，这样做的原因和上面提到的高速缓存类似，提高效率</p>
<img src="http://cdn.ergzcode.com/b/9kKE1wp.jpg" width = "60%" height = "40%" div align=center/>

<p>但是这样会引入新的问题，假如说线程A把data的值修改为1，线程A的工作内存data的值为1，但是主内存和线程B的工作内存data值为0，此时就有可能出现Java并发编程中的可见性问题</p>
<img src="http://cdn.ergzcode.com/b/4SQpPL7.jpg" width = "60%" height = "40%" div align=center/>

<p>举个例子，如下面代码，线程A已经将flag的值改变，但是线程B并没有及时感知到，导致一直进行死循环</p>
<pre><code>public class Test{

    public static boolean flag = false;

    public static void main(String[] args){

        new Thread(()-&gt;{
            while(!flag){
            }
            System.out.println(&quot;threadB end&quot;);
        }).start();
        try{
            TimeUnit.SECONDS.sleep(1);
        }catch(InterruptedException e){
            e.printstackTrace();
        }
        new Thread(()-&gt;{
            flag= =true;
            System.out.println(&quot;threadA end&quot;);
        }).start();
    }

}</code></pre><p>线程B一直没有结束,输出为:</p>
<pre><code>threadA end</code></pre><p>但是如果将data定义为如下形式，线程A对data的变更，线程B立马能感知到</p>
<pre><code>public static volatile boolean flag = false;</code></pre><p>输出为:</p>
<pre><code>threadA end
threadB end</code></pre><p>那么是如何实现的呢？其实volatile保证可见性的方式和上面提到的缓存一致性协议的原理很类似：</p>
<p>1.线程A将工作内存的data更改后，强制将data值刷回主内存<br>2.如果线程B的工作内存中有data值变量的缓存，会强制让这个data变量缓存失效<br>3.当线程B需要读取data变量的值时，先从工作内存中读，发现已经失效过期，就会从主内存中加载data变量的最新值了</p>
<p>放个图理解的更清楚</p>
<img src="http://cdn.ergzcode.com/b/b9kvvf2.jpg" width = "60%" height = "40%" div align=center/>

<ul>
<li>有序性</li>
</ul>
<p>有序性即程序执行的顺序按照代码的先后顺序执行</p>
<pre><code>int i = 0;
boolean flag = false;
i = 1;//语句1
flag = true;//语句2</code></pre><p>上面的代码定义了一个int型的变量，定义了一个boolean类型的变量，然后分别对这两个变量进行赋值操作。从代码顺序上看，语句1是在语句2前面的，那么JVM在真正执行这段代码的时候会保证语句1一定会在语句2前面执行吗？不一定，为什么？这里可能会发生指令重排序（Instruction Reorder）。</p>
<p>下面解释一下什么是指令重排序，一般来说，处理器为了提高程序的运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码的执行结果是一致的。</p>
<p>比如上面的代码中，语句1和语句2谁先执行对最终的程序运行结果并没有影响，那么就有可能在执行的过程中，语句2先执行而语句1后执行。</p>
<p>但是有依赖关系的语句不会进行重排序，如下面求圆面积的代码</p>
<pre><code>double pi = 4.14;//A
double r = 1.0;//B
double area = pi * r * r;//C</code></pre><p>程序的执行顺序只有下面这2种形式</p>
<p>A-&gt;B-&gt;C和B-&gt;A-&gt;C，因为A和C之间存在依赖关系，同时B和C之间也存在依赖关系。因此最终执行的指令序列中C不能被重排序到A和B前面。</p>
<p>虽然重排序不会影响单个线程内程序的执行结果，但是多线程呢？下面看一个例子</p>
<pre><code>//线程1
context = loadContext();//语句1
inited = true;//语句2

//线程2
while(!inited){
    sleep();    
}
doSomethingwithconfig(context);</code></pre><p>上面的代码中，由于语句1和语句2没有数据依赖性，因此可能会被重排序。假如发生了重排序，在线程1执行的过程中先执行语句2，而此时线程2会以为初始化工作已经完成，那么就会跳出while循环，去执行doSomethingwithconfig(context)的方法，而此时context并没有被初始化，就会导致程序出错。</p>
<p>从上面可以看出，指令重排序不会影响单个线程的执行，但是会影响到线程并发执行的正确性</p>
<p>当写双重检测锁定版本（double check）的单例模式时，就要用到volatile关键来保证可见性</p>
<ul>
<li>原子性</li>
</ul>
<p>原子性即一个操作或多个操作，要么全部执行并且执行的过程中不会被任何因素打断，要么就都不会执行。</p>
<pre><code>public class Test{
    public static volatile int inc = 0;
    public static void main(String[] args){
        //新建一个线程池
        ExecutorService service = Executors.newCachedThreadPool();
        for(int i = 0;i &lt; 5;i++){
            service.execute(()-&gt;{
                for(int j = 0;j &lt; 1000;j++){
                    inc++;
                }
            });
        }    
        //关闭线程池
        service.shutdown();
        try{
            TimeUnit.SECONDS.sleep(1);
        }cacth(InterruptedException e){
            e.printStackTrace();
        }
        System.out.println(&quot;inc = &quot;+inc);
    }

}</code></pre><p>执行上面的代码结果并不是每次都是5000，表明volatile并不能保证原子性</p>
<p>可能回有朋友就会有疑问，不对啊，上面是对变量Inc进行自增操作，由于volatile保证了可见性，那么在每个线程中对Inc自增完之后，其他线程中都能看到修改后的值啊，所以有5个线程分别进行了1000次操作，那么最终Inc的值应该是1000*5=5000。</p>
<p>这里面就有一个误区了，volatile关键字能保证可见性是没有错，但是上面的程序错在没能保证原子性。可见性只能保证每次读取的是最新的值，但是volatile没办法保证对变量的操作的原子性。</p>
<p>在前面已经提到过，自增操作是不具备原子性的，它包括读取变量的原始值，进行加1操作，写入工作内存。那么就是说自增操作的三个子操作可能会分割执行，就有可能导致下面这种情况出现：</p>
<p>加入某个时刻变量Inc的值为10，线程1对变量进行自增操作，线程1先读取变量Inc的原始值，然后线程1倍阻塞了；然后线程2对变量进行自增操作，线程2也去读取inc的原始值，由于线程1只是对变量进行读取操作，而没有对变量进行修改操作，所以不会导致线程2的工作内存中缓存变量inc的缓存失效，也不会导致主内存中inc的值刷新，所以线程2会直接从工作内存中读取Inc的值，发现inc的值是10，然后进行加1操作，并把11写入工作内存，最后写入主存。</p>
<p>然后线程1接着进行加1操作，由于已经读取了inc的值（inc++，包括3个操作，1.读取inc的值，2.进行加1操作，3.写入新的值），注意此时在线程1的工作内存中inc的值仍然为10，所以线程1对inc进行加1操作后inc的值为11，然后将11写入工作内存，最后写入主存。</p>
<p>那么两个线程分别进行了一次自增操作后，inc只增加1。</p>
<p>根源就在这里，自增操作不是原子操作，而且volatile关键字也无法保证对变量的任何操作都是原子性的。</p>
<p>解决方案：可以通过synchronized或lock，进行加锁，来保证操作的原子性。也可以通过使用AtomicInteger</p>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>前面已经演示过了</p>
<p>1.状态标记量</p>
<p>2.单例模式中的double check</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>volatile有两部分，一个是lock，禁止指令重排序，因为重排序会导致MESI的一致性协议失效；二是push,设置cache line失效。</p>
<p><strong>本文链接：<a href="">面试官：volatile关键字用过吧？说一下作用和实现吧</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>搞定Java面试题</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>面试官：说一下Spring StringBuffer StringBuilder的区别</title>
    <url>/2019/01/26/java-interview_0003.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>先来看String类的实现</p>
<pre><code>public final class String implements      java.io.serializable,Comparable&lt;String&gt;,CharSequence{
    /** The value is used for character storage **/

    private final char value[];
}</code></pre><p>先来说说final关键字的作用</p>
<ul>
<li>final修饰类时，表明这个类不能被继承</li>
<li>final修饰方法时，表明方法不能被重写</li>
<li>final修饰变量时，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象</li>
</ul>
<a id="more"></a>

<p>可以看到String类和保存变量的value数组都被final修饰，表明String类是不可变的。</p>
<p>StringBuffer和StringBuilder都继承自AbstractStringBuilder类，看一下AbstractStringBuilder类的定义</p>
<pre><code>abstract class AbstractStringBuilder implements Appendable,CharSequence{
    /**
     *The value is userd for character storage
     */
    char[] value;
    }</code></pre><p>看到区别了吗？ value数组没有用private和final修饰，说明了StringBuffer和StringBuilder是可变的。</p>
<p>而StringBuilder和StringBuffer的方法是差不多的，只不过StringBuffer在方法上添加了<code>synchronized</code>关键字，所以在多线程环境下用StringBuffer来获得更高的效率。</p>
<p>看2个类中同一个方法的定义</p>
<p>StringBUffer类</p>
<pre><code>//StringBuffer append方法
@Override
public synchronized StringBuffer append(char[] str){
    toStringCache = null;
    super.append(str);    
    return this;
}</code></pre><p>StringBuilder类</p>
<pre><code>//StringBuilder append方法
@Override
public StringBuilder append(char[] str){
    super.append(str);
    return this;
}</code></pre><p>因为StringBuffer和StringBulider的实现类似，所以性能比较就落在String和StringBuilder之间了。</p>
<p>1.String是不可变对象，每次操作都会生成新的String对象，然后指针指向新的对象。</p>
<p>2.抽象类AbstractStringBuilder内部提供了一个自动扩容机制，当发现长度不够的时候，会自动进行扩容工作（具体扩容可以看源码，很容易理解），会创建一个新的数组，并将原来数组的数据复制到新的数组，不会创建新的对象，所以拼接字符串的效率高。</p>
<p>用源码证实一下</p>
<p>String类</p>
<pre><code>public String substring(int beginIndex) {
    if (beginIndex &lt; 0) {
        throw new StringIndexOutOfBoundsException(beginIndex);
    }
    int subLen = value.length - beginIndex;
    if (subLen &lt; 0) {
        throw new StringIndexOutOfBoundsException(subLen);
    }
    return (beginIndex == 0) ? this : new String(value, beginIndex, subLen);
}</code></pre><p>StringBuilder类</p>
<pre><code>public StringBuilder append(String str) {
    super.append(str);
    return this;
}</code></pre><p>介绍完毕，所以你应该知道这道题应该怎么答了</p>
<h3 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h3><p><strong>1. 说一下String StringBuffer StringBuilder的区别</strong></p>
<ul>
<li>都是final类，不能被继承</li>
<li>String长度是不可变的，StringBuffer和StringBuilder长度是可变的</li>
<li>StringBuffer是线程安全的，StringBuilder不是线程安全的。但他们的方法很相似，StringBuffer在方法上添加了<code>synchronized</code>关键字修饰，保证了线程安全</li>
<li>StringBuilder比StringBuffer拥有更好的性能</li>
<li>如果一个String类型的字符串，在编译时可以确定是一个字符串常量，则编译完成后，字符串会自动拼接成一个常量，此时String比StringBuffer和StringBuilder的性能好的多</li>
</ul>
<p>我用例子解释一下第五条</p>
<pre><code>String a = &quot;a&quot;;
String b = &quot;b&quot;;
String c = a+b;
String d = &quot;a&quot;+&quot;b&quot;+&quot;c&quot;;</code></pre><p>反编译class的文件是这样的</p>
<pre><code>String a = &quot;a&quot;;
String b = &quot;b&quot;;
(new StringBuilder()).append(a).append(b).toString();
String d = &quot;abc&quot;;</code></pre><p>看到String d,理解了吗？</p>
<p>同时看c的拼接过程，先生成一个StringBuilder对象，再调用2次append方法，最后再返回一个String对象，知道StringBuilder比String慢的愿意了吧。</p>
<p><strong>本文链接：<a href="">面试官：说一下Spring StringBuffer StringBuilder的区别</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>搞定Java面试题</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>面试官：说一下构造函数，静态代码块，构造代码块的加载顺序</title>
    <url>/2019/01/25/java-interview_0002.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><strong>构造函数，静态代码块，构造代码块的执行顺序</strong></p>
<pre><code>class Test{
    //静态代码块1
    static{
        System.out.println(&quot;我的静态代码块1&quot;);        
    }
    //构造代码块1
    {
        System.out.println(&quot;我的构造代码块1&quot;);
    }
    //构造函数1
    public Test(){
        System.out.println(&quot;我是无参数构造函数&quot;);            
    }
    //构造函数2
    public Test(int t){
        System.out.println(&quot;我是带参数构造函数，&quot;+&quot;参数是&quot;+t);            
    }

    //静态代码块2
    static{
        System.out.println(&quot;我的静态代码块2&quot;);        
    }
    //构造代码块2
    {
        System.out.println(&quot;我的构造代码块2&quot;);
    }
} </code></pre><a id="more"></a>
<p>来New一个Test类看看会输出什么？</p>
<pre><code>public class TestShow{
    public static void main(String[] args){
        /*创建第一个对象
         我是静态代码块1
         我的静态代码块2
         我的构造代码块1
         我的构造代码块2
         我是无参数构造函数
        */
        System.out.println(&quot;创建第一个对象：&quot;);
        Test test1 = new Test();

        /*创建第二个对象
          我的构造代码块1
          我的构造代码块2
          我是带参数构造函数，参数是5
        */
        System.out.println(&quot;创建第二个对象：&quot;);
        Test test2 = new Test(5);
    }    

}</code></pre><p>从输出我们可以总结处如下结论：</p>
<p>执行时间：<strong>静态代码块 &gt; 构造代码块 &gt; 构造函数，静态代码块只会在类被加载入内存时加载一次，构造代码块和构造函数都是在对象创建的时候执行，有几个对象就会执行几次</strong>，所以一般将加载配置文件的过程写在静态代码块中。</p>
<p><strong>没有继承的加载顺序</strong></p>
<p>先定义一个类作为成员变量，方便看打印输出</p>
<pre><code>public class Parameter {
    public Parameter(String str){
        System.out.println(str);
    }    
}</code></pre><p>写一个测试类</p>
<pre><code>public Test1{
    public static Prarmeter parameter1 =  new Parameter(&quot;静态成员变量&quot;);
    public Prarmeter parameter2 =  new Parameter(&quot;非静态成员变量&quot;);    
    public Test1(){
        System.out.println(&quot;构造函数&quot;);        
    }
    //静态代码块
    static{
        System.out.println(&quot;静态代码块&quot;);        
    }
    //构造代码块a
    {
        System.out.println(&quot;构造代码块a&quot;);
    }
    //构造代码块b
    {
        System.out.println(&quot;构造代码块b&quot;);
    }
}</code></pre><p>输出如下</p>
<pre><code>public class ForShow{
    public static void main(String[] args){
        /*静态成员变量
          静态代码块
          非静态成员变量
          构造代码块a    
          构造代码块b
          构造函数
        */
        new Test1();
        /*非静态成员变量
          构造代码块a    
          构造代码块b
          构造函数
        */
        new Test1();
    }    

}</code></pre><p><strong>可以看出静态成员变量和静态代码块一样，只会在类被加载到内存时加载唯一的一次</strong></p>
<p>改变一下Test类中定义的顺序，看看有什么变化。</p>
<pre><code>public Test2{

    //静态代码块
    static{
        System.out.println(&quot;静态代码块&quot;);        
    }
    //构造函数
    public Test2(){
        System.out.println(&quot;构造函数&quot;);        
    }
    //构造代码块b
    {
        System.out.println(&quot;构造代码块b&quot;);
    }
    //构造代码块a
    {
        System.out.println(&quot;构造代码块a&quot;);
    }
    public static Prarmeter parameter1 =  new Parameter(&quot;静态成员变量&quot;);
    public Prarmeter parameter2 =  new Parameter(&quot;非静态成员变量&quot;);    
}</code></pre><p>输出如下</p>
<pre><code>public class ForShow{
    public static void main(String[] args){

        /*静态代码块
          静态成员变量
          构造代码块b    
          构造代码块a
          非静态成员变量
          构造函数
        */
        new Test2();
    }    

}</code></pre><p><strong>没有继承情况的执行顺序</strong></p>
<ul>
<li>静态代码块和静态成员变量，加载的顺序由编写的顺序决定</li>
<li>构造代码块和非静态成员变量，加载顺序由编写顺序决定</li>
<li>构造函数</li>
</ul>
<p><strong>有继承情况的执行顺序</strong></p>
<p>定义父类</p>
<pre><code>public class Father{
    public static Prarmeter parameter1 =  new Parameter(&quot;父类静态成员变量&quot;);
    public Prarmeter parameter2 =  new Parameter(&quot;父类非静态成员变量&quot;);    

    public Father(){
        System.out.println(&quot;父类构造函数&quot;);        
    }
}</code></pre><p>定义子类</p>
<pre><code>public class Son extends Father{
    public static Prarmeter parameter1 =  new Parameter(&quot;子类静态成员变量&quot;);
    public Prarmeter parameter2 =  new Parameter(&quot;子类非静态成员变量&quot;);    

    public Son(){
        System.out.println(&quot;子类构造函数&quot;);        
    }
}</code></pre><p><strong>有继承情况的执行顺序</strong></p>
<ul>
<li>父类的静态（静态代码块，静态成员变量），子类的静态（静态代码块，静态成员变量）</li>
<li>父类的非静态（构造代码块，非静态成员变量），父类的构造函数</li>
<li>子类的非静态（构造代码块，非静态成员变量），子类的构造函数</li>
</ul>
<p>记住这几条规则足以应付这一类型的所有面试题</p>
<h3 id="常见的面试题"><a href="#常见的面试题" class="headerlink" title="常见的面试题"></a>常见的面试题</h3><p><strong>1.Java类定义如下，写出main函数执行后的输出结果</strong></p>
<pre><code>public class A{
    static {
        System.out.println(&quot;static A&quot;);
    }    
    public A(){
        System.out.println(&quot;class A&quot;);
    }
}

public class B extends A{
    public B(){
        System.out.println(&quot;class B&quot;);
    }
    public static void main(String[] args){
        B instance = new B();            
    }
}</code></pre><p>上面的知识点如果理解的很清楚的话，这个结果立马就能写出来</p>
<p>所以输出如下</p>
<pre><code>static A
class A
class B</code></pre><p><strong>2.问题是如果main函数中的代码如下呢？就是B这个类new了2次</strong></p>
<pre><code>public static void main(String[] args){
        B instance1 = new B();
        B instance2 = new B();            
    }</code></pre><p>万变不离其宗，输出如下</p>
<pre><code>static A
class A
class B
class A
class B</code></pre><p>因为静态成员变量和静态代码块只会在类被载入内存时加载一次。</p>
<p><strong>本文链接：<a href="">面试官：说一下构造函数，静态代码块，构造代码块的加载顺序</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>搞定Java面试题</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>面试官：说一下八种基本数据类型及其包装类吧</title>
    <url>/2019/01/24/java-interview_0001.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><strong>Java基本数据类型分为4大类：</strong></p>
<ul>
<li>整数型：byte,short,int,long</li>
<li>浮点型：flost,double</li>
<li>逻辑型：boolean</li>
<li>字符型：char</li>
</ul>
<table>
<thead>
<tr>
<th>原始类型</th>
<th>所占字节数</th>
<th>包装类</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>1个字节</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>2个字节</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>4个字节</td>
<td>Integer</td>
</tr>
<tr>
<td>long</td>
<td>8个字节</td>
<td>Long</td>
</tr>
<tr>
<td>float</td>
<td>4个字节</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>8个字节</td>
<td>Double</td>
</tr>
<tr>
<td>boolean</td>
<td>1个字节</td>
<td>Boolean</td>
</tr>
<tr>
<td>char</td>
<td>2个字节</td>
<td>Character</td>
</tr>
</tbody></table>
<a id="more"></a>
<h3 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h3><p>要注意的是基本数据的包装类很多都实现了享元模式。享元模式就是运用共享技术有效地支持大量细粒度对象的复用。用一个常见的面试题来解释</p>
<p><strong>1.判断如下代码的输出，并说出原因</strong></p>
<pre><code>Integer a1 = 40;
Integer a2 = 40;
System.out.println(a1==a2);

Integer a3 = 200;
Integer a4 = 200;
System.out.println(a3 == a4);</code></pre><p>由自动装箱和拆箱可以知道这2种写法是等价的</p>
<pre><code>Integer a1 = 40;
Integer a1 = Integer.valueOf(40);</code></pre><p>看一下Integer.valueOf(int i)的方法</p>
<pre><code>//...valueOf(int):Integer
public static Integer valueOf(int i) {
    assert IntegerCache.high &gt;= 127;
    if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)
        return IntegerCache.cache[i + (-IntegerCache.low)];
    return new Integer(i);
}

//...IntegerCache
private static class IntegerCache {
    static final int low = -128;
    static final int high;
    static final Integer cache[];

    static {
        // high value may be configured by property
        int h = 127;
        String integerCacheHighPropValue =
            sun.misc.VM.getSavedProperty(&quot;java.lang.Integer.IntegerCache.high&quot;);
        if (integerCacheHighPropValue != null) {
            int i = parseInt(integerCacheHighPropValue);
            i = Math.max(i, 127);
            // Maximum array size is Integer.MAX_VALUE
            h = Math.min(i, Integer.MAX_VALUE - (-low) -1);
        }
        high = h;

        cache = new Integer[(high - low) + 1];
        int j = low;
        for(int k = 0; k &lt; cache.length; k++)
            cache[k] = new Integer(j++);
    }

    private IntegerCache() {}
}</code></pre><p>IntegerCache是Integer的静态内部类，默认创建了[-128,127]的对象，并放到IntegerCache内部的一个cache数组中，在[-128,127]这个范围内的整数对象，不用创建。直接从IntegerCache中的cache数组中根据下标拿就可以了,超出这个范围的每次去创建新的对象。其他几种包装类型的常量池和Integer的思路差不多，源码都很相似。<br>所以答案如下：</p>
<pre><code>Integer a1 = 40;
Integer a2 = 40;
System.out.println(a1 == a2);//true

Integer a3 = 200;
Integer a4 = 200;
System.out.println(a3 == a4);//false</code></pre><p>包装类缓存数据范围如下：</p>
<table>
<thead>
<tr>
<th>包装类</th>
<th>缓存范围</th>
</tr>
</thead>
<tbody><tr>
<td>Byte</td>
<td>-128~127</td>
</tr>
<tr>
<td>Short</td>
<td>-128~127</td>
</tr>
<tr>
<td>Integer</td>
<td>-128~127</td>
</tr>
<tr>
<td>Long</td>
<td>-128~127</td>
</tr>
<tr>
<td>Character</td>
<td>0~127</td>
</tr>
</tbody></table>
<p><strong>2.Java一个char类型可以存储中文吗？</strong></p>
<p>可以，因为Java中使用了Unicode字符，不论是中文还是英文固定占用2个字节。</p>
<pre><code>char a = &apos;中&apos;；
// 中
System.out.println(a);    </code></pre><p><strong>3.什么是自动装箱，自动拆箱</strong></p>
<p>自动装箱就是Java自动将原始类型转换为对应的对象，比如将int的变量转换为Integer对象，这个过程就是装箱，反之将Integer对象转换为int类型的值，这个过程就是拆箱。因为这里的装箱和拆箱是自动进行的非人为转换的，所以就称作自动装箱和自动拆箱。</p>
<p>自动装箱时编译器调用ValueOf将原始类型值转换为对象，同时自动拆箱时，编译器通过调用类似intValue(),doubleValue()这类的方法将对象转换为原始类型值</p>
<pre><code>//jdk1.5之前的写法
Integer tempNum1 = Integer.valueOf(5);
int num1 = tempNum1.intValue();

//jdk1.5之后的写法，自动装箱和拆箱
Integer tempNum2= 5;
int num1 = tempNum2;</code></pre><p><strong>4.为什么要需要基本数据类型的包装类</strong></p>
<p>（1）Java是面向对象的语言，很多地方是需要使用的是对象而不是基本数据类型。例如，List,Map等容器类中基本数据类型是放不进去的。<br>（2）包装类在原先的基本数据类型上，新增加了很多方法，比如Integer.valueOf(String s)等</p>
<p><strong>5.既然包装类能完成所有的功能，为啥还需要基本数据类型</strong></p>
<p>基本数据类型基于数值，对象类型基于引用。基本数据类型存储在栈的局部变量表中。</p>
<p>而对象类型的变量则是存储堆中引用，实例放在堆中，因此对象类型的变量需要占用更多的内存空间，基本数据类型因为占用更少内存被保留下来。</p>
<p><strong>6.写出如下代码的输出</strong></p>
<pre><code>Integer i1 = 40;
Integer i2 = 40;
Integer i3 = 0;
Integer i4 = new Integer(40);
Integer i5 = new Integer(40);
Integer i6 = new Integer(0);

System.out.println(i1 == i2);
System.out.println(i1 == i2 + i3);
System.out.println(i1 == i4);
System.out.println(i4 == i5);
System.out.println(i4 == i5 + i6);
System.out.println(40 == i5 + i6);</code></pre><p>输出及解释如下</p>
<pre><code>Integer i1 = 40;
Integer i2 = 40;
Integer i3 = 0;
Integer i4 = new Integer(40);
Integer i5 = new Integer(40);
Integer i6 = new Integer(0);

System.out.println(i1 == i2);//true
//Integer.valueOf()用了常量池，看上面的源码
//比较是内存地址

System.out.println(i1 == i2 + i3);//true
// + 操作会导致左右两边都转换为基本数据类型
//比较是值

System.out.println(i1 == i4);//false
//Integer.valueOf()使用常量池中的对象
//new Integer每次都会创建新对象
//比较是内存地址

System.out.println(i4 == i5);//false
//new关键字会创建新的实例所以这是2个不同的对象
//比较是内存地址

System.out.println(i4 == i5 + i6);//true
//解释在下面，比较的是值


System.out.println(40 == i5 + i6);//true
//解释在下面，比较的是值</code></pre><p>语句i4 = i5 + i6,因为这个 + 操作符不适用于Integer对象，首先i5和i6进行了自动拆箱的操作，进行数值相加，即i4 == 40。然后Integer对象无法与数值进行直接比较，所以i4自动拆箱转为int数据类型，值为40，最终这条语句转为40 == 40进行数值的比较。</p>
<p><strong>本文链接：<a href="">面试官：说一下八种基本数据类型及其包装类吧</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>搞定Java面试题</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库优化，看这篇就够了</title>
    <url>/2018/10/18/mysql-database-optimization-this-article-is-enough.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>数据库优化一方面是找出系统的瓶颈,提高MySQL数据库的整体性能,而另一方面需要合理的结构设计和参数调整,以提高用户的相应速度,同时还要尽可能的节约系统资源,以便让系统提供更大的负荷.</strong></p>
<h3 id="1-优化一览图"><a href="#1-优化一览图" class="headerlink" title="1. 优化一览图"></a>1. 优化一览图</h3><p><img src="/images/mysql_201912182301.png" alt="upload successful"></p>
<a id="more"></a>
<h3 id="2-优化"><a href="#2-优化" class="headerlink" title="2. 优化"></a>2. 优化</h3><p>笔者将优化分为了两大类,软优化和硬优化,软优化一般是操作数据库即可,而硬优化则是操作服务器硬件及参数设置.</p>
<h4 id="2-1-软优化"><a href="#2-1-软优化" class="headerlink" title="2.1 软优化"></a>2.1 软优化</h4><h5 id="2-1-1-查询语句优化"><a href="#2-1-1-查询语句优化" class="headerlink" title="2.1.1 查询语句优化"></a>2.1.1 查询语句优化</h5><p>1.首先我们可以用EXPLAIN或DESCRIBE(简写:DESC)命令分析一条查询语句的执行信息.<br>2.例:<strong>DESC SELECT * FROM user</strong><br>显示：<br><img src="/images/mysql_201912182306.png" alt="upload successful"><br>其中会显示索引和查询数据读取数据条数等信息.</p>
<h5 id="2-1-2-优化子查询"><a href="#2-1-2-优化子查询" class="headerlink" title="2.1.2 优化子查询"></a>2.1.2 优化子查询</h5><p>在MySQL中,尽量使用JOIN来代替子查询.因为子查询需要嵌套查询,嵌套查询时会建立一张临时表,临时表的建立和删除都会有较大的系统开销,而连接查询不会创建临时表,因此效率比嵌套子查询高.</p>
<h5 id="2-1-3-使用索引"><a href="#2-1-3-使用索引" class="headerlink" title="2.1.3 使用索引"></a>2.1.3 使用索引</h5><p>索引是提高数据库查询速度最重要的方法之一,关于索引可以参高笔者&lt;MySQL数据库索引&gt;一文,介绍比较详细,此处记录使用索引的三大注意事项:<br>    1.LIKE关键字匹配’%’开头的字符串,不会使用索引.<br>    2.OR关键字的两个字段必须都是用了索引,该查询才会使用索引.<br>    3.使用多列索引必须满足最左匹配.</p>
<h5 id="2-1-4-分解表"><a href="#2-1-4-分解表" class="headerlink" title="2.1.4 分解表"></a>2.1.4 分解表</h5><p>对于字段较多的表,如果某些字段使用频率较低,此时应当,将其分离出来从而形成新的表,</p>
<h5 id="2-1-5-中间表"><a href="#2-1-5-中间表" class="headerlink" title="2.1.5 中间表"></a>2.1.5 中间表</h5><p>对于将大量连接查询的表可以创建中间表,从而减少在查询时造成的连接耗时.</p>
<h5 id="2-1-6-增加冗余字段"><a href="#2-1-6-增加冗余字段" class="headerlink" title="2.1.6 增加冗余字段"></a>2.1.6 增加冗余字段</h5><p>类似于创建中间表,增加冗余也是为了减少连接查询.</p>
<h5 id="2-1-7-分析表-检查表-优化表"><a href="#2-1-7-分析表-检查表-优化表" class="headerlink" title="2.1.7 分析表,检查表,优化表"></a>2.1.7 分析表,检查表,优化表</h5><p>分析表主要是分析表中关键字的分布,检查表主要是检查表中是否存在错误,优化表主要是消除删除或更新造成的表空间浪费.</p>
<p>一.分析表: 使用 <strong>ANALYZE</strong> 关键字,如<strong>ANALYZE TABLE user;</strong><br><img src="/images/mysql_201912182311.png" alt="upload successful"><br>1.Op:表示执行的操作.<br>2.Msg_type:信息类型,有status,info,note,warning,error.<br>3.Msg_text:显示信息.</p>
<p>二.检查表: 使用<strong>CHECK</strong>关键字,如<strong>CHECK TABLE user [option]</strong><br>option只对MyISAM有效,共五个参数值:<br>1.QUICK:不扫描行,不检查错误的连接.<br>2.FAST:只检查没有正确关闭的表.<br>3.CHANGED:只检查上次检查后被更改的表和没被正确关闭的表.<br>4.MEDIUM:扫描行,以验证被删除的连接是有效的,也可以计算各行关键字校验和.<br>5.EXTENDED:最全面的的检查,对每行关键字全面查找.</p>
<p>三.优化表:使用<strong>OPTIMIZE</strong>关键字,如<strong>OPTIMIZE [LOCAL|NO_WRITE_TO_BINLOG] TABLE user;</strong><br>LOCAL|NO_WRITE_TO_BINLOG都是表示不写入日志.,优化表只对VARCHAR,BLOB和TEXT有效,通过OPTIMIZE TABLE语句可以消除文件碎片,在执行过程中会加上只读锁.</p>
<h4 id="2-2-硬优化"><a href="#2-2-硬优化" class="headerlink" title="2.2 硬优化"></a>2.2 硬优化</h4><h5 id="2-2-1-硬件三件套"><a href="#2-2-1-硬件三件套" class="headerlink" title="2.2.1 硬件三件套"></a>2.2.1 硬件三件套</h5><p>1.配置多核心和频率高的cpu,多核心可以执行多个线程.<br>2.配置大内存,提高内存,即可提高缓存区容量,因此能减少磁盘I/O时间,从而提高响应速度.<br>3.配置高速磁盘或合理分布磁盘:高速磁盘提高I/O,分布磁盘能提高并行操作的能力.</p>
<h5 id="2-2-2-优化数据库参数"><a href="#2-2-2-优化数据库参数" class="headerlink" title="2.2.2 优化数据库参数"></a>2.2.2 优化数据库参数</h5><p>优化数据库参数可以提高资源利用率,从而提高MySQL服务器性能.MySQL服务的配置参数都在my.cnf或my.ini,下面列出性能影响较大的几个参数.</p>
<p>1.key_buffer_size:索引缓冲区大小<br>2.table_cache:能同时打开表的个数<br>3.query_cache_size和query_cache_type:前者是查询缓冲区大小,后者是前面参数的开关,0表示不使用缓冲区,1表示使用缓冲区,但可以在查询中使用4.SQL_NO_CACHE表示不要使用缓冲区,2表示在查询中明确指出使用缓冲区才用缓冲区,即SQL_CACHE.<br>5.sort_buffer_size:排序缓冲区</p>
<p><strong>传送门:<a href="https://www.mysql.com/cn/why-mysql/performance/index.html" target="_blank" rel="noopener">更多参数</a></strong></p>
<h5 id="2-2-3-分库分表"><a href="#2-2-3-分库分表" class="headerlink" title="2.2.3 分库分表"></a>2.2.3 分库分表</h5><p>因为数据库压力过大，首先一个问题就是高峰期系统性能可能会降低，因为数据库负载过高对性能会有影响。另外一个，压力过大把你的数据库给搞挂了怎么办？所以此时你必须得对系统做分库分表 + 读写分离，也就是把一个库拆分为多个库，部署在多个数据库服务上，这时作为主库承载写入请求。然后每个主库都挂载至少一个从库，由从库来承载读请求。<br><img src="/images/mysql_201912182321.png" alt="upload successful"></p>
<h5 id="2-2-4-缓存集群"><a href="#2-2-4-缓存集群" class="headerlink" title="2.2.4 缓存集群"></a>2.2.4 缓存集群</h5><p><img src="/images/mysql_201912182322.png" alt="upload successful"></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>一个完整而复杂的高并发系统架构中，一定会包含各种复杂的自研基础架构系统和各种精妙的架构设计.因此一篇小文顶多具有抛砖引玉的效果,但是数据库优化的思想差不多就这些了.</p>
<p><strong>原文链接:<a href="https://segmentfault.com/a/1190000018631870" target="_blank" rel="noopener">MySQL数据库优化</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat优化之修改内存配置</title>
    <url>/2018/10/18/tomcat-modifying-memory-configuration-for-optimization.html</url>
    <content><![CDATA[<h5 id="一、配置"><a href="#一、配置" class="headerlink" title="一、配置"></a>一、配置</h5><p><strong>Tomcat/conf/server.xml修改配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">redirectPort</span>=<span class="string">"8443"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">URIEncoding</span>=<span class="string">"UTF-8"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">minSpareThreads</span>=<span class="string">"25"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxSpareThreads</span>=<span class="string">"300"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxThreads</span>=<span class="string">"500"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">acceptCount</span>=<span class="string">"500"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">connectionTimeout</span>=<span class="string">"30000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">enableLookups</span>=<span class="string">"false"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="二、参数说明"><a href="#二、参数说明" class="headerlink" title="二、参数说明"></a>二、参数说明</h5><a id="more"></a>
<p><strong>maxIdleTime</strong>：最大空闲时间，超过这个空闲时间，且线程数大于minSpareThreads的，都会被回收，默认值1分钟（60000ms）；</p>
<p><strong>minSpareThreads</strong>：最小空闲线程数，任何情况都会存活的线程数，即便超过了最大空闲时间，也不会被回收，默认值4；</p>
<p><strong>maxSpareThreads</strong>：最大空闲线程数，在最大空闲时间（maxIdleTime）内活跃过，此时空闲，当空闲时间大于maxIdleTime则被回收，小则继续存活，等待被调度，默认值50；</p>
<p><strong>maxThreads</strong>：最大线程数，大并发请求时，tomcat能创建来处理请求的最大线程数，超过则放入请求队列中进行排队，默认值为200；</p>
<p><strong>acceptCount</strong>：当最大线程数（maxThreads）被使用完时，可以放入请求队列排队个数，超过这个数返回connection refused（请求被拒绝），一般设置和maxThreads一样，不过这个具体需要根据自己的应用实际访问峰值和平均值来权衡，默认值为100；</p>
<p><strong>connectionTimeout</strong>：网络连接超时，假设设置为0表示永不超时，这样设置隐患巨大，通常可设置为30000ms，默认60000ms；</p>
<p>Windows Tomcat允许每个进程maxThreads（最大线程数）2000，Linux Tomcat允许每个进程maxThreads（最大线程数）1000</p>
<p><img src="/images/tomcat_201912182226.png" alt="upload successful"></p>
<p><strong>请看下面三种情况</strong><br>情况1：接受一个请求，此时tomcat起动的线程数没有到达maxThreads，tomcat会起动一个线程来处理此请求。</p>
<p>情况2：接受一个请求，此时tomcat起动的线程数已经到达maxThreads，tomcat会把此请求放入等待队列，等待空闲线程。</p>
<p>情况3：接受一个请求，此时tomcat起动的线程数已经到达maxThreads，等待队列中的请求个数也达到了acceptCount，此时tomcat会直接拒绝此次请求，返回connection refused</p>
<p><strong>maxThreads如何配置</strong><br>一般的服务器操作都包括两方面：1计算（主要消耗cpu），2等待（io、数据库等）。</p>
<p>第一种极端情况，如果我们的操作是纯粹的计算，那么系统响应时间的主要限制就是cpu的运算能力，此时maxThreads应该尽量设的小，降低同一时间内争抢cpu的线程个数，可以提高计算效率，提高系统的整体处理能力。</p>
<p>第二种极端情况，如果我们的操作纯粹是IO或者数据库，那么响应时间的主要限制就变为等待外部资源，此时maxThreads应该尽量设的大，这样才能提高同时处理请求的个数，从而提高系统整体的处理能力。此情况下因为tomcat同时处理的请求量会比较大，所以需要关注一下tomcat的虚拟机内存设置和linux的open file限制。</p>
<p>我在测试时遇到一个问题，maxThreads我设置的比较大比如3000，当服务的线程数大到一定程度时，一般是2000出头，单次请求的响应时间就会急剧的增加，百思不得其解这是为什么，四处寻求答案无果，最后我总结的原因可能是cpu在线程切换时消耗的时间随着线程数量的增加越来越大，cpu把大多数时间都用来在这2000多个线程直接切换上了，当然cpu就没有时间来处理我们的程序了。以前一直简单的认为多线程=高效率。其实多线程本身并不能提高cpu效率，线程过多反而会降低cpu效率。当cpu核心数&lt;线程数时，cpu就需要在多个线程直接来回切换，以保证每个线程都会获得cpu时间，即通常我们说的并发执行。所以maxThreads的配置绝对不是越大越好。</p>
<p>现实应用中，我们的操作都会包含以上两种类型（计算、等待），所以maxThreads的配置并没有一个最优值，一定要根据具体情况来配置。最好的做法是：在不断测试的基础上，不断调整、优化，才能得到最合理的配置。acceptCount的配置，我一般是设置的跟maxThreads一样大，这个值应该是主要根据应用的访问峰值与平均值来权衡配置的。如果设的较小，可以保证接受的请求较快相应，但是超出的请求可能就直接被拒绝。如果设的较大，可能就会出现大量的请求超时的情况，因为我们系统的处理能力是一定的。</p>
<p><strong>原文链接：<a href="https://www.toutiao.com/a6771285271473291783" target="_blank" rel="noopener">Tomcat修改内存配置</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>web服务器</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven之私服nexus</title>
    <url>/2016/05/24/maven-nexus_01.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Maven仓库分为本地仓库，远程仓库（私服），中央仓库，本文主要介绍了私服的使用。</p>
<h3 id="将项目发布到私服"><a href="#将项目发布到私服" class="headerlink" title="将项目发布到私服"></a>将项目发布到私服</h3><p>首先要把代码上传到私服上，必须要能登录到私服上，在Maven的settings.xml文件，配置连接私服的用户和密码。  </p>
<a id="more"></a>
<p>1.在Maven配置文件settings.xml的<servers></servers>域中添加以下代码：</p>
<pre><code>&lt;server&gt;
    &lt;id&gt;releases&lt;/id&gt;
    &lt;username&gt;admin&lt;/username&gt;
    &lt;password&gt;admin123&lt;/password&gt;
&lt;/server&gt;
&lt;server&gt;
    &lt;id&gt;snapshots&lt;/id&gt;
    &lt;username&gt;admin&lt;/username&gt;
    &lt;password&gt;admin123&lt;/password&gt;
&lt;/server&gt;</code></pre><p>releases 连接发布版本项目仓库<br>snapshots 连接测试版本项目仓库</p>
<p>2.配置项目pom.xml<br>配置私服仓库的地址，本公司的自己的jar包会上传到私服的宿主仓库，根据工程的版本号决定上传到哪个宿主仓库，如果版本为release则上传到私服的release仓库，如果版本为snapshot则上传到私服的snapshot仓库  </p>
<pre><code>&lt;distributionManagement&gt;
    &lt;repository&gt;
        &lt;id&gt;releases&lt;/id&gt;
        &lt;url&gt;http://localhost:8081/nexus/content/repositories/releases/&lt;/url&gt;
    &lt;/repository&gt;
    &lt;snapshotRepository&gt;
        &lt;id&gt;snapshots&lt;/id&gt;
        &lt;url&gt;http://localhost:8081/nexus/content/repositories/snapshots/&lt;/url&gt;
    &lt;/snapshotRepository&gt;
&lt;/distributionManagement&gt;</code></pre><p><strong>注意：pom.xml这里<id>和settings.xml配置<id>对应！</strong></p>
<h3 id="从私服下载jar包"><a href="#从私服下载jar包" class="headerlink" title="从私服下载jar包"></a>从私服下载jar包</h3><p>1.在setting.xml中配置仓库  </p>
<pre><code>&lt;!-- 下载jar包配置 --&gt;
&lt;profile&gt; 
    &lt;!--profile的id --&gt;
    &lt;id&gt;dev&lt;/id&gt;
    &lt;repositories&gt;
        &lt;repository&gt; 
                &lt;!--仓库id，repositories可以配置多个仓库，保证id不重复 --&gt;
            &lt;id&gt;nexus&lt;/id&gt;
                &lt;!--仓库地址，即nexus仓库组的地址 --&gt;
            &lt;url&gt;http://localhost:8081/nexus/content/groups/public/&lt;/url&gt;
                &lt;!--是否下载releases构件 --&gt;
            &lt;releases&gt;
                &lt;enabled&gt;true&lt;/enabled&gt;
            &lt;/releases&gt;
                &lt;!--是否下载snapshots构件 --&gt;
            &lt;snapshots&gt;
                &lt;enabled&gt;true&lt;/enabled&gt;
            &lt;/snapshots&gt;
        &lt;/repository&gt;
    &lt;/repositories&gt;
    &lt;pluginRepositories&gt;
        &lt;!-- 插件仓库，maven的运行依赖插件，也需要从私服下载插件 --&gt;
        &lt;pluginRepository&gt; 
            &lt;!-- 插件仓库的id不允许重复，如果重复后边配置会覆盖前边 --&gt;
            &lt;id&gt;public&lt;/id&gt;
            &lt;name&gt;Public Repositories&lt;/name&gt;
            &lt;url&gt;http://localhost:8081/nexus/content/groups/public/&lt;/url&gt;
        &lt;/pluginRepository&gt;
    &lt;/pluginRepositories&gt;
&lt;/profile&gt;</code></pre><p>使用profile定义仓库需要激活才可生效  </p>
<pre><code>&lt;activeProfiles&gt;
    &lt;activeProfile&gt;dev&lt;/activeProfile&gt;
&lt;/activeProfiles&gt;</code></pre><p>这里的activeProfile必须与上方profile的id一致</p>
<h3 id="安装第三方jar包到本地仓库"><a href="#安装第三方jar包到本地仓库" class="headerlink" title="安装第三方jar包到本地仓库"></a>安装第三方jar包到本地仓库</h3><p>这里将fastjson-1.1.37.jar上传到本地仓库，有2种方式：<br>1.进入jar包所在目录运行</p>
<pre><code>mvn install:install-file -DgroupId=com.alibaba -DartifactId=fastjson -Dversion=1.1.37 
    -Dfile=fastjson-1.1.37.jar -Dpackaging=jar</code></pre><p>2.打开cmd直接运行</p>
<pre><code>mvn install:install-file -DgroupId=com.alibaba -DartifactId=fastjson -Dversion=1.1.37 
    -Dpackaging=jar -Dfile=C:\Users\TOAJMER\Desktop\fastjson-1.1.37.jar</code></pre><h3 id="安装第三方jar包到私服"><a href="#安装第三方jar包到私服" class="headerlink" title="安装第三方jar包到私服"></a>安装第三方jar包到私服</h3><p>这里将fastjson-1.1.37.jar上传到私服，在settings配置文件中添加登录私服第三方登录信息：</p>
<pre><code>&lt;server&gt;
    &lt;id&gt;thirdparty&lt;/id&gt;
    &lt;username&gt;admin&lt;/username&gt;
    &lt;password&gt;admin123&lt;/password&gt;
&lt;/server&gt;</code></pre><p>有2种方式：<br>1.进入jar包所在目录运行</p>
<pre><code>mvn deploy:deploy-file -DgroupId=com.alibaba -DartifactId=fastjson -Dversion=1.1.37 
    -Dpackaging=jar -Dfile=fastjson-1.1.37.jar 
    -Durl=http://localhost:8081/nexus/content/repositories/thirdparty/ 
    -DrepositoryId=thirdparty</code></pre><p>2.打开cmd直接运行  </p>
<pre><code>mvn deploy:deploy-file -DgroupId=com.alibaba -DartifactId=fastjson -Dversion=1.1.37 
    -Dpackaging=jar -Dfile=C:\Users\TOAJMER\Desktop\fastjson-1.1.37.jar 
    -Durl=http://localhost:8081/nexus/content/repositories/thirdparty/ 
    -DrepositoryId=thirdparty</code></pre><p><strong>本文链接：<a href="">Maven之私服nexus</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
  <entry>
    <title>应届毕业生踏入社会需要注意的几点社会经验总结</title>
    <url>/2016/05/22/a-few-social-experience-summary-for-fresh-graduates%20.html</url>
    <content><![CDATA[<h3 id="一、经历比学历重要"><a href="#一、经历比学历重要" class="headerlink" title="一、经历比学历重要"></a>一、经历比学历重要</h3><p>现在一些年轻人，大学毕业后便急着考研究生，以为学历越高便越有水平，便越好找工作。其实对多数人来说，考研究生是浪费时间，说不定学的越多越无能。  </p>
<p>当代社会的工作，多数要不了那么多知识，大学毕业的水平就足够了。大学所学的知识，十分之一也用不到。还要考研究生，实在是浪费青春。除非你是想做科学研究工作，想当物理学家、数学家，那是一定要上研究生的。不然就没有必要。尤其是学文科专业，更是没有必要上研究生。  </p>
<a id="more"></a>

<p>对于非科研工作，多数是要在工作中有针对性的学习的。在工作中实际可用的专业知识很少，多数是要在工作中根据实际需要学习。由于在工作中的学习是有目的的，是可应用的，学二个月胜过在学校学一年。成效非常明显。因此人要在工作中不断学习，而不是在学校学习。  </p>
<p>有些人想上研究生，是因为对找工作没有信心，以为学历高了，就好找工作。其实如果有三年的实际工作经验，比上研究生可能更容易找工作。上研究生有两大缺点。本来学生最缺的是工作经验和社会经验，大学刚一毕业就上研究生，不会增加工作经验，更不能锻炼社会经验。本来就因为天天上学，显得傻乎乎，再上三年学，会变得更是傻乎乎。长期呆在校园，人会没有竞争意识，看什么都很难，看什么都不顺眼。研究生毕业了，更经不起社会的摔打和磨难，只想着能留校或是在一个稳稳当当的单位工作。意志被书本磨灭，一生都不可能有闯劲。  </p>
<p>长期上学，人会变得清高自负，而实际工作能力很差。即使研究生毕业了，也可能缺少实际工作能力。人需要的是磨练，受苦，经历各种人生的磨难，才能真正理解人，适应社会。上研究生，则是在逃避社会，受不了委屈，受不了苦，不懂世故，干什么事都会碰壁，又不能圆通的解决。我带过很多新记者，发现一个现象，研究生不如本科生，本科生不如大专生。研究生采访不到的，专科生由于人生经验丰富，能屈能伸，随机应变，反而能采访到。  </p>
<p>有三年的时间上研究生，不如三年换六个单位积累的人生经验多。每半年换一个单位，接触一批人，三年下来，会积累很多的社会经验和人脉关系。比上研究生收获大多了。人在三十岁之前，可以尽可能多的换单位，五六年下来，你将会成为全才，为三十岁以后的发展打下基础。  </p>
<p>再说了，现在的学校里，没有几个有实际工作经验的老师，学不到真东西，无非是多读了几本书。用不上，也没有多少实际意义。  </p>
<h3 id="二、会说比会做重要"><a href="#二、会说比会做重要" class="headerlink" title="二、会说比会做重要"></a>二、会说比会做重要</h3><p>现在的年轻人，一般都不懂世故，不会说话。有时一句话不慎，就可能毁掉自己一生，而自己还不知道原因。记得有一位年轻人，说了一句老同志能干的事情，我也能干。结果十年时间里，没有老同志愿带他工作，也没有独立工作的机会。有的年轻人，说话比较冲，在领导批评时，爱辩解，看起来维护了面子，但领导不喜欢这样的人，对他敬而远之。  </p>
<p>会做的不如会说的。这就是现实。年轻人总相信有水平就一定能受领导重视，其不知任何领导用人的第一原则是听话和亲近。年轻人喜欢追求个性，好张扬，老同志看不惯，无形当中被当成了另类。人的一生，要么是动手，要么是动嘴。多数人注意培养动手能力，不注意培养动嘴能力。这是一大误区。多数做管理的人，都是靠一张嘴。会不会管理，其实就是看你会不会说话。能不能做成生意，也在于你会不会说话。  </p>
<h3 id="三、会笑比会说重要"><a href="#三、会笑比会说重要" class="headerlink" title="三、会笑比会说重要"></a>三、会笑比会说重要</h3><p>年轻人由于心理自卑，表现上喜欢装成熟，一般不爱笑，或是笑不出。最美丽的表情是微笑，比化装品重要。会笑的人，心情好，表情好，易被人接受。你去看周围的人，会笑的人可以左右逢源，容易做事。  </p>
<h3 id="四、做人比做事重要"><a href="#四、做人比做事重要" class="headerlink" title="四、做人比做事重要"></a>四、做人比做事重要</h3><p>年轻人一般都比较愿意多做事，做大事，但往往忽视做人。有的人性格孤避，不爱结交朋友，不爱巴结领导，不爱说讨好人的话，遇事固执己见。做了很多事，却受不到大家肯定。有的人做事不多，能力不强，却见职务在上升。没有办法，不要看不惯，社会本来就是如此，柯责没有意义，也改变不了，反倒是要多反思自己。其实是自己不会做人。  </p>
<h3 id="五、做早比做好重要"><a href="#五、做早比做好重要" class="headerlink" title="五、做早比做好重要*"></a>五、做早比做好重要*</h3><p>拒绝拖延症，想到什么就立即实施。关于oracle方面想要学习到更多必然要去一些有用的网站看看，比如IT PUB, CSDN, Chinaunix, 思庄、中国IT、CNOUG等等。</p>
<h3 id="六、听话比说话重要"><a href="#六、听话比说话重要" class="headerlink" title="六、听话比说话重要"></a>六、听话比说话重要</h3><h3 id="七、心态比成绩重要"><a href="#七、心态比成绩重要" class="headerlink" title="七、心态比成绩重要"></a>七、心态比成绩重要</h3><p>有的人是一个积极的心态，乐观的心态，不管遇到什么困难、委屈，仍然会积极进取。有的人，稍吃一点亏便难以承受。有的人有了一点成绩，便要翅尾巴，结果引来嫉妒。心态决定人的一生，应当好好修练。  </p>
<h3 id="八、性格比水平重要"><a href="#八、性格比水平重要" class="headerlink" title="八、性格比水平重要"></a>八、性格比水平重要</h3><p>多数人干不了大事，不是由于水平问题，而是性格问题。在中国的企业家当中，有一半是从部队转业的。这些人本来专业技能并不算高，为何却能做大事呢。主要是在部队经过了严格的组织纪律性训练，养成了良好的生活和工作习惯，坚韧不拔，善于协作，敢担责任，敢冒风险。而学生出身的人，多作风散慢，性格懦弱，反而干不了什么大事。  </p>
<h3 id="九、今天比明天重要"><a href="#九、今天比明天重要" class="headerlink" title="九、今天比明天重要"></a>九、今天比明天重要</h3><p>先把今天的事做好，比构想明天的事更有意义。  </p>
<p><strong>来源：<a href="http://bbs.csdn.net/topics/391056194" target="_blank" rel="noopener">CSDN社区推荐</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>生活职场</category>
      </categories>
  </entry>
  <entry>
    <title>深入Java单例模式</title>
    <url>/2016/05/22/design-pattern-for-singleton.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>这是关于单例，我看过的，真的写的最好的一篇博文。非常的详尽，并且有浅及深</strong></p>
<p>在GoF的23种设计模式中，单例模式是比较简单的一种。然而有时候越是简单的东西越容易出现问题。下面就单例设计模式详细的探讨一下。</p>
<p>所谓单例模式，简单来说，就是在整个应用生命周期中保证只有一个实例存在。就像是Java Web中的application，也就是提供了一个全局变量，用处相当广泛，比如保存全局数据，实现全局性的操作等。</p>
<a id="more"></a>

<h3 id="1-最简单的实现"><a href="#1-最简单的实现" class="headerlink" title="1. 最简单的实现"></a>1. 最简单的实现</h3><p>首先，能够想到的最简单的实现是，把类的构造函数写成private的，从而保证别的类不能实例化此类，然后在类中提供一个静态的实例并能够返回给调用者。这样，调用者就可以通过这个引用使用到这个类的实例了。</p>
<pre><code>public class SingletonClass { 

  private static final SingletonClass instance = new SingletonClass(); 

  public static SingletonClass getInstance() { 
        return instance; 
      } 
  private SingletonClass() { 

      } 
}</code></pre><p>如上例，外部使用者如果需要使用SingletonClass的实例，只能通过getInstance()方法，并且它的构造方法是private的，这样就保证了只能有一个对象存在。</p>
<h3 id="2-性能优化——lazy-loaded"><a href="#2-性能优化——lazy-loaded" class="headerlink" title="2. 性能优化——lazy loaded"></a>2. 性能优化——lazy loaded</h3><p>上面的代码虽然简单，但是有一个问题——无论这个类是否被使用，都会创建一个instance对象。如果这个创建过程很耗时，比如需要连接10000次数据库(夸张了…:-))，并且这个类还并不一定会被使用，那么这个创建过程就是无用的。怎么办呢？<br>为了解决这个问题，我们想到了新的解决方案：</p>
<pre><code>public class SingletonClass { 

  private static SingletonClass instance = null; 

  public static SingletonClass getInstance() { 
    if(instance == null) { 
          instance = new SingletonClass(); 
        } 
        return instance; 
      } 

  private SingletonClass() { 

      } 
}    </code></pre><p>代码的变化有两处——首先，把instance初始化为null，直到第一次使用的时候通过判断是否为null来创建对象。因为创建过程不在声明处，所以那个final的修饰必须去掉。</p>
<p>我们来想象一下这个过程。要使用SingletonClass，调用getInstance()方法。第一次的时候发现instance是null，然后就新建一个对象，返回出去；第二次再使用的时候，因为这个instance是static的，所以已经不是null了，因此不会再创建对象，直接将其返回。这个过程就成为lazy loaded，也就是迟加载——直到使用的时候才进行加载。</p>
<h3 id="3-同步"><a href="#3-同步" class="headerlink" title="3. 同步"></a>3. 同步</h3><p>上面的代码很清楚，也很简单。然而就像那句名言：“80%的错误都是由20%代码优化引起的”。单线程下，这段代码没有什么问题，可是如果是多线程，麻烦就来了。我们来分析一下：</p>
<p>线程A希望使用SingletonClass，调用getInstance()方法。因为是第一次调用，A就发现instance是null的，于是它开始创建实例，就在这个时候，CPU发生时间片切换，线程B开始执行，它要使用SingletonClass，调用getInstance()方法，同样检测到instance是null——注意，这是在A检测完之后切换的，也就是说A并没有来得及创建对象——因此B开始创建。B创建完成后，切换到A继续执行，因为它已经检测完了，所以A不会再检测一遍，它会直接创建对象。这样，线程A和B各自拥有一个SingletonClass的对象——单例失败！</p>
<p>解决的方法也很简单，那就是加锁：</p>
<pre><code>public class SingletonClass { 

  private static SingletonClass instance = null; 

  public synchronized static SingletonClass getInstance() { 
    if(instance == null) { 
          instance = new SingletonClass(); 
    } 
    return instance; 
 } 

  private SingletonClass() { 

  }      
}</code></pre><p>是要getInstance()加上同步锁，一个线程必须等待另外一个线程创建完成后才能使用这个方法，这就保证了单例的唯一性。</p>
<h3 id="4-又是性能"><a href="#4-又是性能" class="headerlink" title="4. 又是性能"></a>4. 又是性能</h3><p>上面的代码又是很清楚很简单的，然而，简单的东西往往不够理想。这段代码毫无疑问存在性能的问题——synchronized修饰的同步块可是要比一般的代码段慢上几倍的！如果存在很多次getInstance()的调用，那性能问题就不得不考虑了！</p>
<p>让我们来分析一下，究竟是整个方法都必须加锁，还是仅仅其中某一句加锁就足够了？我们为什么要加锁呢？分析一下出现lazy loaded的那种情形的原因。原因就是检测null的操作和创建对象的操作分离了。如果这两个操作能够原子地进行，那么单例就已经保证了。于是，我们开始修改代码：</p>
<pre><code>public class SingletonClass { 

  private static SingletonClass instance = null; 

  public static SingletonClass getInstance() { 
    synchronized (SingletonClass.class) { 
          if(instance == null) { 
        instance = new SingletonClass(); 
      } 
}     
    return instance; 
  } 

  private SingletonClass() { 

  }   
}</code></pre><p>首先去掉getInstance()的同步操作，然后把同步锁加载if语句上。但是这样的修改起不到任何作用：因为每次调用getInstance()的时候必然要同步，性能问题还是存在。如果……如果我们事先判断一下是不是为null再去同步呢？</p>
<pre><code>public class SingletonClass { 

  private static SingletonClass instance = null; 

  public static SingletonClass getInstance() { 
    if (instance == null) { 
          synchronized (SingletonClass.class) { 
            if (instance == null) { 
              instance = new SingletonClass(); 
    } 
  } 
} 
    return instance; 
  } 

  private SingletonClass() { 

  }
}</code></pre><p>还有问题吗？首先判断instance是不是为null，如果为null，加锁初始化；如果不为null，直接返回instance。</p>
<p>这就是double-checked locking设计实现单例模式。到此为止，一切都很完美。我们用一种很聪明的方式实现了单例模式。</p>
<h3 id="5-从源头检查"><a href="#5-从源头检查" class="headerlink" title="5. 从源头检查"></a>5. 从源头检查</h3><p>下面我们开始说编译原理。所谓编译，就是把源代码“翻译”成目标代码——大多数是指机器代码——的过程。针对Java，它的目标代码不是本地机器代码，而是虚拟机代码。编译原理里面有一个很重要的内容是编译器优化。所谓编译器优化是指，在不改变原来语义的情况下，通过调整语句顺序，来让程序运行的更快。这个过程成为reorder。</p>
<p>要知道，JVM只是一个标准，并不是实现。JVM中并没有规定有关编译器优化的内容，也就是说，JVM实现可以自由的进行编译器优化。</p>
<p>下面来想一下，创建一个变量需要哪些步骤呢？一个是申请一块内存，调用构造方法进行初始化操作，另一个是分配一个指针指向这块内存。这两个操作谁在前谁在后呢？JVM规范并没有规定。那么就存在这么一种情况，JVM是先开辟出一块内存空间，然后把指针指向这块内存，最后调用构造方法进行初始化。</p>
<p>下面我们来考虑这么一种情况：线程A开始创建SingletonClass的实例，此时线程B调用了getInstance()方法，首先判断instance是否为null。按照我们上面所说的内存模型，A已经把instance指向了那块内存空间，只是还没有调用构造方法，因此B检测到instance不为null，于是直接把instance返回了——问题出现了，尽管instance不为null，但它并没有构造完成，就像一套房子已经给了你钥匙，但你并不能住进去，因为里面还没有收拾。此时，如果B在A将instance构造完成之前就使用了这个实例，程序就会出现错误了！</p>
<h3 id="6-解决方案"><a href="#6-解决方案" class="headerlink" title="6. 解决方案"></a>6. 解决方案</h3><p>说了这么多，难道单例没有办法在Java中实现吗？其实不然！<br><strong>在JDK5之后，Java使用了新的内存模型</strong>。<strong>volatile</strong>关键字有了明确的语义——在JDK1.5之前，volatile是个关键字，但是并没有明确的规定其用途——被volatile修饰的写变量不能和之前的读写代码调整，读变量不能和之后的读写代码调整！因此，只要我们简单的把instance加上volatile关键字就可以了。</p>
<pre><code>public class SingletonClass { 

  private volatile static SingletonClass instance = null; 

  public static SingletonClass getInstance() { 
    if (instance == null) { 
          synchronized (SingletonClass.class) { 
        if(instance == null) { 
              instance = new SingletonClass(); 
            } 
          } 
    } 
        return instance; 
  } 

  private SingletonClass() { 

  }  
}</code></pre><p>然而，这只是JDK1.5之后的Java的解决方案，那之前版本呢？其实，还有另外的一种解决方案，并不会受到Java版本的影响：</p>
<pre><code>public class SingletonClass { 

  private static class SingletonClassInstance { 
    private static final SingletonClass instance = new SingletonClass(); 
  } 

  public static SingletonClass getInstance() { 
    return SingletonClassInstance.instance; 
  } 

 private SingletonClass() { 

  }  
}</code></pre><p>在这一版本的单例模式实现代码中，我们使用了Java的静态内部类。这一技术是被JVM明确说明了的，因此不存在任何二义性。在这段代码中，因为SingletonClass没有static的<strong>属性</strong>，因此并不会被初始化。直到调用getInstance()的时候，会首先加载SingletonClassInstance类，这个类有一个static的SingletonClass实例，因此需要调用SingletonClass的构造方法，然后getInstance()将把这个内部类的instance返回给使用者。由于这个instance是static的，因此并不会构造多次。    </p>
<p>由于SingletonClassInstance是私有静态内部类，所以不会被其他类知道，同样，static语义也要求不会有多个实例存在。<strong>并且，JSL规范定义，类的构造必须是原子性的，非并发的，因此不需要加同步块</strong>。同样，由于这个构造是非并发的，所以getInstance()也并不需要加同步。</p>
<p>至此，我们完整的了解了单例模式在Java语言中的时候，提出了两种解决方案。个人偏向于第二种，并且Effiective Java也推荐的这种方式。</p>
<p><strong>本文链接：<a href="">深入Java单例模式</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>DesignPattern</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkdownPad2.5注册码</title>
    <url>/2016/05/15/markdownpad2.5-license-key.html</url>
    <content><![CDATA[<p><strong>邮箱 <a href="mailto:Soar360@live.com" target="_blank" rel="noopener">Soar360@live.com</a></strong></p>
<p><strong>注册码</strong><br>GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3<br>YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO<br>0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTR<br>KfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==</p>
<a id="more"></a>
<p><strong>输入Email address和license key</strong><br><img src="/images/markdown_201912251552.png" alt="upload successful"></p>
<p><strong>注册完成</strong><br><img src="/images/markdown_201912251554.png" alt="upload successful"></p>
<p><strong>本文链接：<a href="">MarkdownPad2.5注册码</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>阅读生活之人生赢家</title>
    <url>/2016/01/04/read-lifes_01.html</url>
    <content><![CDATA[<p><strong>1、给你90天，成为不一样的自己</strong></p>
<p>如果你想成功，从现在起和比自己成功的人去接触，别人的成功不是没有道理的；如果你想得到某个领域的经验，那就跨出你自己的领域去认识这个领域的人，任何方式都可以；如果你碍于面子，跨不出现有的圈子你就一直会在原地踏步；放下面子，放下偏见，放下自卑，重新认识你身边的人  </p>
<p><strong>2、吵架公约：把最后一句话留给对方说</strong></p>
<p>不论我们正在遭遇何种困局或是挣扎，所谓的吵架如果不能避免，那最后那一句话也要留给对方说，适可而止也是人生的一种高境界，能够成全自己的幸福人生。</p>
<a id="more"></a>

<p><strong>3、做事要找靠谱的人，聪明的人只能聊聊天</strong></p>
<p>这些年体会最深的是，一个靠谱的人给你介绍的朋友，合作起来就是人品好，办事靠谱的人。而一个不靠谱的人给你介绍一个朋友或者一个同事，也能碰到靠谱的，但需要你有慧眼，否则就只能碰运气。我们做事选择靠谱，是选择一种优秀的品质。一旦你靠谱的对待事情，你可能暂时受到伤害。</p>
<p><strong>4、如何在这操蛋的世界里保持快乐？</strong></p>
<p>恩，本质上，快乐的技术就是烂俗的。海明威不是说了嘛，心理健康有时候就意味着庸俗。爱你所拥有的。珍惜你所拥有的。快乐不等于傻逼。我们深知世界的复杂、黑暗和荒谬，依然选择面对复杂，保持欢喜。</p>
<p><strong>5、那些不声不响就把事情做了的人</strong> </p>
<p>你何时才能做一个不动声色的大人，取决于你拥有一颗怎样的心。树欲静则风止，这才是不动声色的境界。继续修炼吧！少年。</p>
<p><strong>6、为什么以前对你好的同学现在都不理你了？</strong>  </p>
<p>我们不要指望别人有义务拉你一把。人家又不是你爹你妈，凭什么要惯着你啊。这个世界就是马太效应。你越牛逼，机会越多。没有什么雪中送炭，这个世界只有锦上添花。你想要锦上添花，你得先变成锦。</p>
<p><strong>7、向这些教育方式说不</strong>  </p>
<p>爱孩子要爱得其法，孩子，不仅给了我们生命最本质的活力和喜悦，也给我们一个契机，重新审视生活，自省个人的言行。带孩子，是一条和孩子共同修行的路，我们不是领他们成长，而是和他们相伴，一起成长。</p>
<p><strong>8、朋友升官发财，你不必难过</strong></p>
<p>所以，不必看到别人手里拿着利剑而万分焦虑，很可能你的怀里揣着枪呢。在被打得落花流水的时候想一想，你是不是比错了项目，好好摸摸自己的口袋，找到那个最让你自信的、最多人为你点赞的、最常带给你优越感的能力，那就是你的武器，掏出它来，到属于你的战场战斗吧。</p>
<p><strong>9、不要一直在自己身上找原因</strong> </p>
<p>和人划清界限，知道哪些责任是自己的，哪些东西根本和自己无关是非常重要的。一个没有界限感的人，即便是怀着好心，最终也很有可能酿成大错。“一日三省吾身”是好，但这个“省身”也应该包括检查自己有没有过分承担。换句话说，你若一直在自己身上找原因，也是你太高估自己了。</p>
<p><strong>10、听懂另一半说爱你的方式</strong> </p>
<p>而我也慢慢学会，不再用自己表达爱的方式去绑架他，他也和我一样，而是渐渐懂得他表达爱和责任的方式，然后默默记在日记本里，记在心里… …</p>
<p><strong>11、你不是不会爱，而是怕麻烦</strong></p>
<p>坚持本来就是一件极其不易的事情，即便我们能够一辈子做自己的太阳，光芒偶尔也会被雾霾遮挡，但心中有爱的人终究不会迷途，因为从未曾忘记一路上予人玫瑰，手留余香又会还你满满的正能量。</p>
<p><strong>12、你永远不可能靠点赞融入那个不属于你的圈子</strong> </p>
<p>其次时间宝贵，年纪越大越不想徒劳消耗，有这个时间还不如去想想怎么挣钱，或者消耗在自己真心喜欢的人和事上。最后很残酷的一点，如果你自己没资本，社交也并不能给你带来什么你需要的人脉或真心的朋友。“没有平起平坐的资本，任何社交都无法换来有用的人脉。”所以不用硬融，你到了那种阶段，你会很自然被你喜欢的那群人吸纳进去。</p>
<p><strong>13、等人把话说完，是一种修养</strong></p>
<p>等别人把话说完是一种素质，看似絮絮叨叨的表达，身前身后却是气象万千的智慧和懂得。听别人说话，其实在渡你我到彼岸，一回头已是郁郁葱葱，繁花似锦。</p>
<p><strong>14、好与不好都走了，幸与不幸都过了</strong> </p>
<p>有时候，珍惜，是为了更好的拥有；而放下，则是为了更好的前行。好与不好都走了，幸与不幸都过了。人生的际遇，就像那窗外的雨，淋过，湿过；散了，远了。容不得我们许与不许，便已然不再。于是，人生，便总是从告别中走向明天。将美好留于心底，淡淡的就好；将悲伤置于脑后，遗忘了最好。</p>
<p><strong>15、为什么很多人工资不高，却还要拥挤在大城市生活？</strong></p>
<p>演出场地也是很多城市的标配，但是扪心自问，你一年内会在小城市看几场演出？体验是由物质和精神两个层面叠加起来的，即便配套跟一线城市完全没有区别，但生活在这个地方的人群跟你不同道，你也无法习惯。</p>
<p><strong>16、岁月美人都是养出来的</strong> </p>
<p>天生丽质的女子凤毛麟角，绝大多数的美人儿都是后天养出来的，而且绝对要富养，经济条件的好坏并不能决定你的颜值，但精神世界的高低，却能让岁月美人从众多莺莺燕燕中脱颖而出，在水一方窈窈窕窕，孤不孤单都是一种最精彩。美人需要很多爱的供养，很多自律的修炼，很多快乐的分享，很多生活的勇气，很多纯真的执着，所以我们要一起上路，任重道远也要彼此共勉，成就做一位岁月美人的终极梦想。</p>
<p><strong>17、林清玄：死在路上也是很好的事，总比没去过好</strong> </p>
<p>因此，我们对生命如果还有未完成的期盼，此刻就要去融入它，不要寄希望于渺茫的来生，活在一个又一个的片刻里，到死前都保有向前的姿势，只要完全融入一个纯粹天真的片刻，那也就够了。有很多人活在过去与未来的交错、预期、烦恼之中，从来没有进入过那个片刻呢！</p>
<p><strong>18、没人稀罕你做自己</strong>  </p>
<p>中国人讲究含蓄，西方人讲究距离，没人稀罕你做自己。还不如回家照照镜子，看看对着那张熟悉的放肆面容能不能和平相处，再考虑其他。至于真正的自己，回到斗室中再做也不迟。毕竟，能容忍自己的只有自己，能原谅自己的也只有自己。</p>
<p><strong>19、他没有用你理想的方式爱你，也很好</strong> </p>
<p>在非原则性的问题上，降低期望值，不较真儿，不偏执，懂得尊重与退让，愿意为爱妥协，才能爱得更轻松、更愉快。要相信，即使他没有用你理想的方式爱你，但只要真心依旧，其实也很好。</p>
<p><strong>20、你不快乐，是因为活得不宽容</strong> </p>
<p>哪怕我们身边的世界再复杂再艰难，也要好好保护你内心的宽容与温柔，愿你能遇见未知的那个美好的自己，在此之前你先要对别人宽容，愿你被世界温柔相待，在此之前你先要温柔相待这个世界。生活从不会辜负那些快乐又美好的人生，你若宽容温柔，不必算计争抢，自有命运打赏。</p>
<p><strong>来源：<a href="http://www.timetimetime.net/" target="_blank" rel="noopener">阅读时间</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>生活职场</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>关于mysql查询缓存详解</title>
    <url>/2016/01/01/mysql-query-cache_01.html</url>
    <content><![CDATA[<p><strong>mysql查询缓存</strong>  </p>
<p>在sql调优的过程中，发现原本很慢的一条sql（将近1分钟）在第二次运行时，瞬间就完成了（0.04sec）。 这是因为mysql自带的缓存机制，将查询结果进行缓存，如果table数据未发生变化，再次使用同一条sql进行查询时，直接从上次的查询结果缓存中读取数据，而不是重新分析、执行sql。 如果table数据发生变化，所有与之相关的缓存数据都会被释放刷新，这样就不会出现数据脏读问题。</p>
<a id="more"></a>

<p>The query cache stores the text of a SELECT statement together with the corresponding result that was sent to the client. If an identical statement is received later, the server retrieves the results from the query cache rather than parsing and executing the statement again. The query cache is shared among sessions, so a result set generated by one client can be sent in response to the same query issued by another client.  </p>
<p><strong>是否使用查询缓存</strong> </p>
<p>为了避免缓存，可以在sql查询语句的字段前增加<strong>SQL_NO_CACHE</strong>关键字，如：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_user;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> SQL_NO_CACHE * <span class="keyword">from</span> t_user;</span><br></pre></td></tr></table></figure>
<p>反之，你也可以使用<strong>SQL_CACHE</strong>关键字，强制mysql从缓存中读取数据，如：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">SQL_CACHE</span> * <span class="keyword">from</span> t_user;</span><br></pre></td></tr></table></figure>
<p>mysql还提供了一种释放全部缓存的方法:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">reset</span> <span class="keyword">query</span> <span class="keyword">cache</span>;</span><br></pre></td></tr></table></figure>
<p><strong>设置查询缓存</strong>  </p>
<p>查看是否有查询缓存：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'have_query_cache'</span>;</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>，只要数据库拥有查询缓存功能，这个VALUE就是YES，无论查询缓存是否启用，mysql默认为启用状态。mysql查询缓存可以通过两个变量来控制：<strong>query_cache_type</strong>和<strong>query_cache_size</strong>。  </p>
<p><strong>querycachetype</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'query_cache_type'</span>;</span><br></pre></td></tr></table></figure>
<p><strong>query_cache_type</strong>包含三种状态：</p>
<ul>
<li>0 or OFF 此时不会从缓存中读取查询数据。</li>
<li>1 or ON 表示除非声明了SELECT SQL_NO_CACHE，否则都会从缓存中读取数据。</li>
<li>2 or DEMAND 表示所有语句都会从缓存中读取，相当于所有查询语句都使用了SELECT SQL_CACHE。</li>
</ul>
<p>通过如下命令可以设置查询缓存状态(需要管理员权限)，执行后，需要重启mysql服务才能生效。  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> query_cache_type = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>但是此命令会影响所有的使用此mysql服务的client。可以通过如下命令，关闭此客户端的查询缓存状态，但是同样需要重启server后才能生效。  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">SESSION</span> query_cache_type = <span class="keyword">OFF</span>;  </span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'query_cache_type'</span>;</span><br></pre></td></tr></table></figure>
<p><strong>querycachesize</strong> </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'query_cache_size'</span>;</span><br></pre></td></tr></table></figure>
<p><strong>querycachesize</strong>表示缓存大小，默认为1M。如果设置为0，则相当于:<strong>query_cache_type=OFF</strong>，同样可通过<strong>SET GLOBAL</strong>进行设置。 </p>
<pre><code class="sql"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> query_cache_size=<span class="number">40000</span>;  </code></pre>
<p>需要注意的是，设置的<strong>querycachesize</strong>，并不全是用于存储数据，还有约40KB的空间来维护查询缓存的结构。</p>
<p><strong>本文链接：<a href="">关于mysql查询缓存详解</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Hibernate查询Jackson序列化懒加载问题</title>
    <url>/2015/05/26/jackson-hibernateLazyInitializer_01.html</url>
    <content><![CDATA[<p>在Hibernate查询出数据实体类使用jackson序列化为json时,出现下面错误：</p>
<pre><code>org.springframework.http.converter.HttpMessageNotWritableException...
...
disable SerializationConfig.SerializationFeature.FAIL_ON_EMPTY_BEANS</code></pre><p>引起以上问题的主要原因就是jackson把懒加载也作为pojo进行序列化了。<br>一般解决方法：在实体类上加上</p>
<pre><code>@JsonIgnoreProperties({&quot;hibernateLazyInitializer&quot;, &quot;handler&quot;})</code></pre><a id="more"></a>

<p>如果实体类中有集合属性那么将类里面所有的集合都加入到<strong>@JsonIgnoreProperties</strong></p>
<p>这个方法注解是放在类定义上面的,例如:<br>@JsonIgnoreProperties<br>class A<br>{}</p>
<p>如果你定义的类是这样的:</p>
<pre><code>class A{
    private String description;
    private Boolean enable;
    private Integer createUser;
    private Date createTime;
    private Integer updateUser;
    private Date updateTime;
    private Set operations = new HashSet(0);
    private Set roles = new HashSet(0);
    private Set menus = new HashSet(0);
}</code></pre><p>则把下面这句话加到类上</p>
<pre><code>@JsonIgnoreProperties(value={“hibernateLazyInitializer”,”handler”,”operations”,”roles”,”menus”})</code></pre><p><strong>注意：其中hibernateLazyInitializer，handler必须添加！</strong></p>
<p><strong>本文链接：<a href="">Hibernate查询Jackson序列化懒加载问题</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>Json</category>
      </categories>
      <tags>
        <tag>jackson</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP中basePath作用</title>
    <url>/2015/05/19/jsp-basePath_01.html</url>
    <content><![CDATA[<p>通常在JSP页面中有如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%  </span><br><span class="line">String path = request.getContextPath();  </span><br><span class="line">String basePath = request.getScheme()+<span class="string">"://"</span>+request.getServerName()+<span class="string">":"</span>+request.getServerPort()+path+<span class="string">"/"</span>;  </span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>这段代码的意思是获取当前项目的路径，如：<a href="http://localhost:8080/项目名称。" target="_blank" rel="noopener">http://localhost:8080/项目名称。</a></p>
<p>在<head></head>中通常有如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;base href=<span class="string">"&lt;%=basePath%&gt;"</span>&gt;</span><br></pre></td></tr></table></figure>

<p>这是设置基础路径的，<code>basePath</code>为变量，简单的静态网页的话你设置比如：<code>&lt;base href=&quot;http://www.baidu.com&quot;&gt;</code>，那你下面的href属性就会以你上面设置的值的为基准，如：<code>&lt;a href=&quot;http://www.baidu.com/xxx.htm&quot;&gt;&lt;/a&gt;</code>你现在就只需要写<code>&lt;a href=&quot;xxx.htm&quot;&gt;&lt;/a&gt;</code></p>
<p><strong>原文链接：<a href="http://lzc0088.iteye.com/blog/504015" target="_blank" rel="noopener">http://lzc0088.iteye.com/blog/504015</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Jsp</tag>
      </tags>
  </entry>
  <entry>
    <title>Java备份和还原MySQL数据库</title>
    <url>/2015/05/16/java-backup-and-recover-mysql_01.html</url>
    <content><![CDATA[<p><strong>使用Java代码备份和还原MySQL数据库</strong></p>
<a id="more"></a>

<h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">backup</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       Runtime runtime = Runtime.getRuntime();</span><br><span class="line">       Process process = runtime.exec(<span class="string">"mysqldump -u root -p123456 db"</span>);</span><br><span class="line">       InputStream inputStream = process.getInputStream();</span><br><span class="line">       InputStreamReader reader = <span class="keyword">new</span> InputStreamReader(inputStream);</span><br><span class="line">       BufferedReader br = <span class="keyword">new</span> BufferedReader(reader);</span><br><span class="line">       String s = <span class="keyword">null</span>;</span><br><span class="line">       StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">       <span class="keyword">while</span> ((s = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">           sb.append(s + <span class="string">"\r\n"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       s = sb.toString();</span><br><span class="line">       System.out.println(s);</span><br><span class="line">       File file = <span class="keyword">new</span> File(path);</span><br><span class="line">       file.getParentFile().mkdirs();</span><br><span class="line">       FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">       fileOutputStream.write(s.getBytes());</span><br><span class="line">       fileOutputStream.close();</span><br><span class="line">       br.close();</span><br><span class="line">       reader.close();</span><br><span class="line">       inputStream.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="还原"><a href="#还原" class="headerlink" title="还原"></a>还原</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">recover</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       Runtime runtime = Runtime.getRuntime();</span><br><span class="line">       Process process = runtime.exec(<span class="string">"mysql -u root -p123456 --default-character-set=utf8 db"</span>);</span><br><span class="line">       OutputStream outputStream = process.getOutputStream();</span><br><span class="line">       BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(path)));</span><br><span class="line">       String str = <span class="keyword">null</span>;</span><br><span class="line">       StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">       <span class="keyword">while</span> ((str = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">           sb.append(str + <span class="string">"\r\n"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       str = sb.toString();</span><br><span class="line">       System.out.println(str);</span><br><span class="line">       OutputStreamWriter writer = <span class="keyword">new</span> OutputStreamWriter(outputStream, <span class="string">"utf-8"</span>);</span><br><span class="line">       writer.write(str);</span><br><span class="line">       writer.flush();</span><br><span class="line">       outputStream.close();</span><br><span class="line">       br.close();</span><br><span class="line">       writer.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中的this关键字</title>
    <url>/2015/05/08/java-this_01.html</url>
    <content><![CDATA[<p><strong>主要有三点：</strong></p>
<p>1.使用this调用本类的属性(this.xx)</p>
<p>2.使用this调用构造方法(this(),this(xx))</p>
<p>3.表示当前对象的引用(谁调用就代表谁)</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中的final关键字</title>
    <url>/2015/05/07/java-final_01.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><strong>Java中的final关键字非常重要，它可以应用于类、方法以及变量。这篇文章中我将带你看看什么是final关键字？将变量，方法和类声明为final代表了什么？使用final的好处是什么？最后也有一些使用final关键字的实例。final经常和static一起使用来声明常量，你也会看到final是如何改善应用性能的。</strong></p>
<h3 id="final关键字的含义"><a href="#final关键字的含义" class="headerlink" title="final关键字的含义?"></a>final关键字的含义?</h3><p>final在Java中是一个保留的关键字，可以声明成员变量、方法、类以及本地变量。一旦你将引用声明作final，你将不能改变这个引用了，编译器会检查代码，如果你试图将变量再次初始化的话，编译器会报编译错误。</p>
<a id="more"></a>

<h3 id="什么是final变量？"><a href="#什么是final变量？" class="headerlink" title="什么是final变量？"></a>什么是final变量？</h3><p>凡是对成员变量或者本地变量(在方法中的或者代码块中的变量称为本地变量)声明为final的都叫作final变量。final变量经常和static关键字一起使用，作为常量。下面是final变量的例子：</p>
<pre><code>public static final String LOAN = &quot;loan&quot;;
LOAN = new String(&quot;loan&quot;) //invalid compilation error</code></pre><p>final变量是只读的。</p>
<h3 id="什么是final方法"><a href="#什么是final方法" class="headerlink" title="什么是final方法?"></a>什么是final方法?</h3><p>final也可以声明方法。方法前面加上final关键字，代表这个方法不可以被子类的方法重写。如果你认为一个方法的功能已经足够完整了，子类中不需要改变的话，你可以声明此方法为final。final方法比非final方法要快，因为在编译的时候已经静态绑定了，不需要在运行时再动态绑定。下面是final方法的例子：</p>
<pre><code>class PersonalLoan{
public final String getName(){
    return &quot;personal loan&quot;;
    }
}

class CheapPersonalLoan extends PersonalLoan{
@Override
public final String getName(){
    //compilation error: overridden method is final
    return &quot;cheap personal loan&quot;; 
   }
}</code></pre><h3 id="什么是final类？"><a href="#什么是final类？" class="headerlink" title="什么是final类？"></a>什么是final类？</h3><p>使用final来修饰的类叫作final类。final类通常功能是完整的，它们不能被继承。Java中有许多类是final的，譬如String, Interger以及其他包装类。下面是final类的实例：</p>
<pre><code>final class PersonalLoan{

}
 //compilation error: cannot inherit from final class
class CheapPersonalLoan extends PersonalLoan{  
}</code></pre><h3 id="final关键字的好处"><a href="#final关键字的好处" class="headerlink" title="final关键字的好处"></a>final关键字的好处</h3><p>下面总结了一些使用final关键字的好处</p>
<ul>
<li>final关键字提高了性能。JVM和Java应用都会缓存final变量</li>
<li>final变量可以安全的在多线程环境下进行共享，而不需要额外的同步开销</li>
<li>使用final关键字，JVM会对方法、变量及类进行优化</li>
</ul>
<h3 id="不可变类"><a href="#不可变类" class="headerlink" title="不可变类"></a>不可变类</h3><p>创建不可变类要使用final关键字。不可变类是指它的对象一旦被创建了就不能被更改了。String是不可变类的代表。不可变类有很多好处，譬如它们的对象是只读的，可以在多线程环境下安全的共享，不用额外的同步开销等等。</p>
<h3 id="关于final的重要知识点"><a href="#关于final的重要知识点" class="headerlink" title="关于final的重要知识点"></a>关于final的重要知识点</h3><ul>
<li><p>final关键字可以用于成员变量、本地变量（局部变量）、方法以及类</p>
</li>
<li><p>final成员变量必须在声明的时候初始化或者在构造器中初始化，否则就会报编译错误</p>
</li>
<li><p>不能够对final变量再次赋值</p>
</li>
<li><p>局部变量必须在声明时赋值</p>
</li>
<li><p>在匿名类中使用的所有外部变量都必须是final变量（*）</p>
</li>
<li><p>final方法不能被重写</p>
</li>
<li><p>final类不能被继承</p>
</li>
<li><p>final关键字不同于finally关键字，后者用于异常处理</p>
</li>
<li><p>final关键字容易与finalize()方法搞混，后者是在Object类中定义的方法，是在垃圾回收之前被JVM调用的方法</p>
</li>
<li><p>接口中声明的所有变量本身是final的（*）</p>
</li>
<li><p>final和abstract这两个关键字是反相关的，final类就不可能是abstract的</p>
</li>
<li><p>final方法在编译阶段绑定，称为静态绑定(static binding)</p>
</li>
<li><p>没有在声明时初始化final变量的称为空白final变量(blank final variable)，它们必须在构造器中初始化，或者调用this()初始化。不这么做的话，编译器会报错“final变量(变量名)需要进行初始化”</p>
</li>
<li><p>将类、方法、变量声明为final能够提高性能，这样JVM就有机会进行估计，然后优化</p>
</li>
<li><p>按照Java代码惯例，final变量就是常量，而且通常常量名要大写：</p>
<p>  private final int COUNT = 10;</p>
</li>
<li><p>对于集合对象声明为final指的是引用不能被更改，但是你可以向其中增加，删除或者改变内容，譬如：</p>
<p>  private final List Loans = new ArrayList();<br>  list.add(“home loan”);  //valid<br>  list.add(“personal loan”); //valid<br>  loans = new Vector();  //not valid</p>
</li>
</ul>
<p>我们已经知道final变量、final方法以及final类是什么了。必要的时候使用final，能写出更快、更好的代码的。</p>
<p><strong>本文链接：<a href="">Java中的final关键字</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
</search>
