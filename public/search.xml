<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>最新IDEA永久激活</title>
    <url>/2019/12/25/idea-latest-active.html</url>
    <content><![CDATA[<p><strong>已支持2019.2的版本且适用Windows、Mac、Ubuntu等所有平台</strong></p>
<h3 id="1-下载新版破解补丁"><a href="#1-下载新版破解补丁" class="headerlink" title="1.下载新版破解补丁"></a>1.下载新版破解补丁</h3><p>下载链接：<a href="http://cdn.ergzcode.com/jetbrains/jetbrains-agent.jar" target="_blank" rel="noopener">http://cdn.ergzcode.com/jetbrains/jetbrains-agent.jar</a>，并将它放置到IDEA安装目录的bin目录下（位置可随意）。</p>
<h3 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h3><p>如果你是刚下载的IDEA，先点击激活窗口的免费试用，创建一个新项目来进入到IDEA的工作目录。进入IDEA的工作界面后，点击IDEA的上方的菜单栏‘Help’-&gt;‘Edit Custom VM Options…’，如果提示是否要创建文件，请点‘Yes’，打开idea64.exe.vmoptions文件在末行添加：-javaagent:你的IDEA安装目录\bin\jetbrains-agent.jar</p>
<a id="more"></a>

<pre><code>-Xms512m
-Xmx2048m
-XX:ReservedCodeCacheSize=480m
-XX:+UseConcMarkSweepGC
-XX:SoftRefLRUPolicyMSPerMB=50
-ea
-XX:CICompilerCount=2
-Dsun.io.useCanonPrefixCache=false
-Djava.net.preferIPv4Stack=true
-Djdk.http.auth.tunneling.disabledSchemes=&quot;&quot;
-XX:+HeapDumpOnOutOfMemoryError
-XX:-OmitStackTraceInFastThrow
-Djdk.attach.allowAttachSelf
-Dkotlinx.coroutines.debug=off
-Djdk.module.illegalAccess.silent=true
-javaagent:C:\Program Files\JetBrains\ideaIU 2019.2.3\bin\jetbrains-agent.jar</code></pre><p>请仔细检查补丁路径是否正确，如果错误则会出现IDEA打不开的情况，这时候可以删除用户配置目录下的IDEA文件夹:</p>
<ul>
<li>windwos：C:\Users\用户名\</li>
<li>macos：~/Library/Preferences/</li>
<li>ubuntu：~/.    </li>
</ul>
<p><strong>修改完配置文件之后重启IDEA</strong></p>
<h3 id="3-输入激活码"><a href="#3-输入激活码" class="headerlink" title="3.输入激活码"></a>3.输入激活码</h3><p>重启IDEA之后，点击菜单栏中的 ‘Help ’-&gt; ‘Register…’，这里有两种激活方式：</p>
<p>一.选择最后一种License server激活方式，地址填入：<a href="http://jetbrains-license-server" target="_blank" rel="noopener">http://jetbrains-license-server</a> ,或者点击按钮：‘Discover Server’来自动填充地址，完成激活。</p>
<p>二.如果服务器激活方式无法激活，还可以选择Activation code方式激活，激活码下载:<a href="http://cdn.ergzcode.com/jetbrains/%E6%BF%80%E6%B4%BB%E7%A0%81.txt" target="_blank" rel="noopener">激活码.txt</a>，下载复制激活码填入，点击OK即可。</p>
<p>服务器激活是没有期限的，是永久有效。激活码激活的有效期到2089年。</p>
<p><strong>本文链接：<a href="http://www.ergzcode.com/2019/12/25/idea-latest-active.html">最新IDEA永久激活</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx反向代理实现二级域名与端口的映射</title>
    <url>/2019/12/14/nginx-reverse-proxy-implements-the-mapping-of-secondary-domain-names-to-ports.html</url>
    <content><![CDATA[<p><strong>在之前的一篇文章：<a href="http://www.ergzcode.com/2019/11/14/nginx-build-http-file-system.html">Nginx搭建HTTP文件服务器</a>中,我们搭建了一个HTTP的文件服务器，通过8080端口来访问服务。现在我们想通过域名的方式（二级域名）来访问这个HTTP的文件服务器，我们知道通过浏览器URL地址的方式访问一个网站，比如<code>http://www.ergzcode.com</code>,默认的是去服务器找80端口下的服务，也就是<code>http://www.ergzcode.com:80</code>这个地址。考虑到80端口是比较特殊的端口，所以部署hexo时指定的端口是4000，这样将会导致只有使用<code>http://www.ergzcode.com:4000</code>才能访问到本站，但这种的URL无疑是让人接受不了的。</strong></p>
<a id="more"></a>
<p><strong>现在需要做到以下两点：</strong></p>
<ul>
<li>将<code>http://www.ergzcode.com</code>的请求转发给4000端口下的应用程序，也就是通过这种URL访问本站</li>
<li>将<code>http://cdn.ergzcode.com</code>的请求转发给8080端口下的http文件服务器</li>
</ul>
<p><strong>当然在这之前，有个前提就是你需要让<code>cdn.ergzcode.com</code>和<code>www.ergzcode.com</code>这两个域名解析到你的服务器IP上，DNS解析在域名提供商那里作处理,这里不再介绍</strong></p>
<p><strong>现在要做到上面的请求转发，就要用到Nginx的反向代理机制，下面来创建Nginx的配置文件，在<code>/etc/nginx/conf.d</code>目录下创建一个叫做reverse_proxy.conf的文件，文件名可以随意指定，但要以.conf为后缀名，然后加入下面的内容</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">        listen 80;<span class="comment">#监听端口</span></span><br><span class="line">        server_name www.ergzcode.com;<span class="comment">#根据域名跳转</span></span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_redirect off;</span><br><span class="line">                proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">                proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">                proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                proxy_pass http://127.0.0.1:4000;<span class="comment">#跳转的路径</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name cdn.ergzcode.com;</span><br><span class="line">        <span class="comment">#root /usr/local/data/file;</span></span><br><span class="line">        location / &#123;</span><br><span class="line">                <span class="comment"># try_files $uri $uri/ =404;</span></span><br><span class="line">                proxy_redirect off;</span><br><span class="line">                proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">                proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">                proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                proxy_pass http://127.0.0.1:8080;<span class="comment">#跳转的路径</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>执行命令使修改配置生效<code>/etc/init.d/nginx reload</code></strong></p>
<p>访问本站：<a href="http://www.ergzcode.com">http://www.ergzcode.com</a><br>访问HTTP服务器：<a href="http://cdn.ergzcode.com" target="_blank" rel="noopener">http://cdn.ergzcode.com</a><br><strong>完成！！</strong></p>
<p><strong>本文链接：<a href="http://www.ergzcode.com/2019/12/14/nginx-reverse-proxy-implements-the-mapping-of-secondary-domain-names-to-ports.html">Nginx反向代理实现二级域名与端口的映射</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>开发中常用的一些免费API</title>
    <url>/2019/12/11/some-common-and-free-apis-for-developing.html</url>
    <content><![CDATA[<p><strong>为了方便广大的开发者，特此统计了网上诸多的免费API，为您收集免费的接口服务，做一个api的搬运工，以后会每月定时更新新的接口。有些接口来自第三方，在第三方注册就可以成为他们的会员，免费使用他们的部分接口。</strong></p>
<p><b>百度AccessToken</b>:针对HTTP API调用者，百度AIP开…——<a href="https://www.free-api.com/doc/1" target='_blank'>接口地址</a><br><b>语音识别</b>:通过场景识别优化，为车载导航，智能家居和…——<a href="https://www.free-api.com/doc/2" target='_blank'>接口地址</a><br><b>语音合成</b>:将用户输入的文字，转换成流畅自然的语音输…——<a href="https://www.free-api.com/doc/4" target='_blank'>接口地址</a><br><b>出租车票识别(可在线调用)</b>:针对出租车票（现支持北京、上海、深圳）的…——<a href="https://www.free-api.com/doc/6" target='_blank'>接口地址</a><br><b>火车票识别(可在线调用)</b>:支持对大陆火车票的车票号、始发站、目的站…——<a href="https://www.free-api.com/doc/7" target='_blank'>接口地址</a><br><a id="more"></a><b>数字识别(可在线调用)</b>:对图像中的阿拉伯数字进行识别提取，适用于…——<a href="https://www.free-api.com/doc/8" target='_blank'>接口地址</a><br><b>通用文字识别(可在线调用)</b>:支持多场景下的文字检测识别，多项ICDA…——<a href="https://www.free-api.com/doc/9" target='_blank'>接口地址</a><br><b>网络图片文字识别(可在线调用)</b>:能够快速准确识别各种网络图片中的文字，在…——<a href="https://www.free-api.com/doc/10" target='_blank'>接口地址</a><br><b>身份证识别(可在线调用)</b>:支持对二代居民身份证正反面的关键字段识别…——<a href="https://www.free-api.com/doc/11" target='_blank'>接口地址</a><br><b>银行卡识别(可在线调用)</b>:支持对主流银行卡卡号识别，并返回发卡行和…——<a href="https://www.free-api.com/doc/12" target='_blank'>接口地址</a><br><b>驾驶证识别(可在线调用)</b>:支持对机动车驾驶证正页的关键字段识别，包…——<a href="https://www.free-api.com/doc/13" target='_blank'>接口地址</a><br><b>行驶证识别(可在线调用)</b>:支持对机动车行驶证正页的关键字段识别，包…——<a href="https://www.free-api.com/doc/14" target='_blank'>接口地址</a><br><b>手写文字识别(可在线调用)</b>:能够对手写汉字和手写数字进行识别——<a href="https://www.free-api.com/doc/15" target='_blank'>接口地址</a><br><b>增值税发票识别(可在线调用)</b>:识别并结构化返回增值税发票的各个字段及其…——<a href="https://www.free-api.com/doc/16" target='_blank'>接口地址</a><br><b>营业执照识别(可在线调用)</b>:支持对营业执照关键字段的识别，包括单位名…——<a href="https://www.free-api.com/doc/17" target='_blank'>接口地址</a><br><b>车牌识别(可在线调用)</b>:支持对中国大陆机动车车牌的识别，包括地域…——<a href="https://www.free-api.com/doc/18" target='_blank'>接口地址</a><br><b>票据识别(可在线调用)</b>:支持对增值税发票、火车票、出租车票（支持…——<a href="https://www.free-api.com/doc/19" target='_blank'>接口地址</a><br><b>表格文字识别</b>:自动识别表格线及表格内容，结构化输出表头…——<a href="https://www.free-api.com/doc/20" target='_blank'>接口地址</a><br><b>通用物体和场景识别(可在线调用)</b>:支持超过10万类物体和场景识别，接口返回…——<a href="https://www.free-api.com/doc/21" target='_blank'>接口地址</a><br><b>图像主体检测(可在线调用)</b>:检测图片中关键主体位置，接口支持检测单张…——<a href="https://www.free-api.com/doc/22" target='_blank'>接口地址</a><br><b>品牌logo识别(可在线调用)</b>:实现2万类品牌logo识别，接口返回品牌…——<a href="https://www.free-api.com/doc/23" target='_blank'>接口地址</a><br><b>植物识别(可在线调用)</b>:植物识别支持2万多种通用植物识别、近…——<a href="https://www.free-api.com/doc/24" target='_blank'>接口地址</a><br><b>动物识别(可在线调用)</b>:支持数千种动物识别，接口返回名称——<a href="https://www.free-api.com/doc/25" target='_blank'>接口地址</a><br><b>菜品识别(可在线调用)</b>:识别超过5万个菜品，接口返回菜品的名称、…——<a href="https://www.free-api.com/doc/26" target='_blank'>接口地址</a><br><b>地标识别(可在线调用)</b>:支持识别约5万中外著名地标、景点，接口返…——<a href="https://www.free-api.com/doc/27" target='_blank'>接口地址</a><br><b>车型识别(可在线调用)</b>:识别车辆的具体车型，以小汽车为主，输出图…——<a href="https://www.free-api.com/doc/28" target='_blank'>接口地址</a><br><b>车辆检测</b>:识别图像中所有机动车辆的类型和位置，并对…——<a href="https://www.free-api.com/doc/29" target='_blank'>接口地址</a><br><b>GIF色情图像识别(可在线调用)</b>:人工智能鉴黄技术，智能识别图片和视频中的…——<a href="https://www.free-api.com/doc/30" target='_blank'>接口地址</a><br><b>图像审核(可在线调用)</b>:通过人脸检测、文字识别、色情识别、暴恐识…——<a href="https://www.free-api.com/doc/31" target='_blank'>接口地址</a><br><b>人脸检测与属性分析(可在线调用)</b>:检测图中的人脸，并为人脸标记出边框。检测…——<a href="https://www.free-api.com/doc/39" target='_blank'>接口地址</a><br><b>在线活体检测(可在线调用)</b>:提供在线方式的人脸活体检测能力，在人脸识…——<a href="https://www.free-api.com/doc/41" target='_blank'>接口地址</a><br><b>人体关键点识别(可在线调用)</b>:检测人体并返回人体矩形框位置，精准定位1…——<a href="https://www.free-api.com/doc/44" target='_blank'>接口地址</a><br><b>人流量统计(可在线调用)</b>:统计图像中的人体个数和流动趋势，以头肩为…——<a href="https://www.free-api.com/doc/45" target='_blank'>接口地址</a><br><b>人体检测与属性识别(可在线调用)</b>:检测图像中的所有人体，识别人体的20类属…——<a href="https://www.free-api.com/doc/46" target='_blank'>接口地址</a><br><b>手势识别(可在线调用)</b>:识别图片中的手部位置和手势类型，可识别2…——<a href="https://www.free-api.com/doc/47" target='_blank'>接口地址</a><br><b>人像分割(可在线调用)</b>:识别图像中的人体轮廓，与背景进行分离——<a href="https://www.free-api.com/doc/48" target='_blank'>接口地址</a><br><b>驾驶行为分析(可在线调用)</b>:针对车载场景，识别驾驶员使用手机、抽烟、…——<a href="https://www.free-api.com/doc/49" target='_blank'>接口地址</a><br><b>词法分析(可在线调用)</b>:基于大数据和用户行为的分词、词性标注、命…——<a href="https://www.free-api.com/doc/50" target='_blank'>接口地址</a><br><b>词向量表示(可在线调用)</b>:词向量计算是通过训练的方法，将语言词表中…——<a href="https://www.free-api.com/doc/51" target='_blank'>接口地址</a><br><b>词义相似度(可在线调用)</b>:用于计算两个给定词语的语义相似度，基于自…——<a href="https://www.free-api.com/doc/52" target='_blank'>接口地址</a><br><b>依存句法分析(可在线调用)</b>:利用句子中词与词之间的依存关系来表示词语…——<a href="https://www.free-api.com/doc/53" target='_blank'>接口地址</a><br><b>DNN语言模型(可在线调用)</b>:语言模型是通过计算给定词组成的句子的概率…——<a href="https://www.free-api.com/doc/54" target='_blank'>接口地址</a><br><b>短文本相似度(可在线调用)</b>:短文本相似度计算服务能够提供不同短文本之…——<a href="https://www.free-api.com/doc/55" target='_blank'>接口地址</a><br><b>文本纠错(可在线调用)</b>:文本纠错支持短文本、长文本、语音识别结果…——<a href="https://www.free-api.com/doc/56" target='_blank'>接口地址</a><br><b>情感倾向分析(可在线调用)</b>:针对带有主观描述的中文文本，可自动判断该…——<a href="https://www.free-api.com/doc/57" target='_blank'>接口地址</a><br><b>评论观点抽取(可在线调用)</b>:自动分析评论关注点和评论观点，并输出评论…——<a href="https://www.free-api.com/doc/58" target='_blank'>接口地址</a><br><b>对话情绪识别(可在线调用)</b>:针对一段对话文本，自动识别出当前会话者所…——<a href="https://www.free-api.com/doc/59" target='_blank'>接口地址</a><br><b>文章标签(可在线调用)</b>:文章标签服务对文章的标题和内容进行深度分…——<a href="https://www.free-api.com/doc/60" target='_blank'>接口地址</a><br><b>文章分类(可在线调用)</b>:文章分类服务对文章内容进行深度分析，输出…——<a href="https://www.free-api.com/doc/61" target='_blank'>接口地址</a><br><b>新闻摘要(可在线调用)</b>:基于深度语义分析模型，自动抽取新闻文本中…——<a href="https://www.free-api.com/doc/62" target='_blank'>接口地址</a><br><b>通用翻译(可在线调用)</b>:支持28种语言实时互译，覆盖中、英、日、…——<a href="https://www.free-api.com/doc/64" target='_blank'>接口地址</a><br><b>实体标注(可在线调用)</b>:结合上下文，识别文本中的实体并将其关联到…——<a href="https://www.free-api.com/doc/65" target='_blank'>接口地址</a><br><b>新闻头条(可在线调用)</b>:最新新闻头条，各类社会、国内、国际、体育…——<a href="https://www.free-api.com/doc/66" target='_blank'>接口地址</a><br><b>手机号码归属地(可在线调用)</b>:根据手机号码或手机号码的前7位，查询手机…——<a href="https://www.free-api.com/doc/67" target='_blank'>接口地址</a><br><b>彩票开奖结果查询(可在线调用)</b>:目前支持双色球、大乐透、七乐彩、七星彩、…——<a href="https://www.free-api.com/doc/68" target='_blank'>接口地址</a><br><b>天气预报(可在线调用)</b>:查询天气情况：温度、湿度、AQI、天气、…——<a href="https://www.free-api.com/doc/69" target='_blank'>接口地址</a><br><b>二维码生成(可在线调用)</b>:按照设定的参数、生成二维码——<a href="https://www.free-api.com/doc/70" target='_blank'>接口地址</a><br><b>汇率(可在线调用)</b>:外汇报价，货币汇率——<a href="https://www.free-api.com/doc/71" target='_blank'>接口地址</a><br><b>历史上的今天(可在线调用)</b>:回顾历史的长河，历史是生活的一面镜子——<a href="https://www.free-api.com/doc/72" target='_blank'>接口地址</a><br><b>成语词典(可在线调用)</b>:新华字典在线查字,最新最全——<a href="https://www.free-api.com/doc/74" target='_blank'>接口地址</a><br><b>新华字典(可在线调用)</b>:最大最全的新华汉语词典，按拼音查、按部首…——<a href="https://www.free-api.com/doc/75" target='_blank'>接口地址</a><br><b>微信精选(可在线调用)</b>:微信精选文章——<a href="https://www.free-api.com/doc/76" target='_blank'>接口地址</a><br><b>笑话大全(可在线调用)</b>:搜集网络幽默、搞笑、内涵段子，不间断更新——<a href="https://www.free-api.com/doc/77" target='_blank'>接口地址</a><br><b>全国WIFI(可在线调用)</b>:全国免费的WIFI热点分布——<a href="https://www.free-api.com/doc/78" target='_blank'>接口地址</a><br><b>货币汇率(可在线调用)</b>:支持人民币牌价、外汇汇率查询；数据仅供参…——<a href="https://www.free-api.com/doc/79" target='_blank'>接口地址</a><br><b>手机固话来电显示</b>:查询手机/固话号码归属地，是否诈骗、营销…——<a href="https://www.free-api.com/doc/80" target='_blank'>接口地址</a><br><b>简/繁/火星字体转换(可在线调用)</b>:实现简体、繁体、火星文之间的转换,转换字…——<a href="https://www.free-api.com/doc/81" target='_blank'>接口地址</a><br><b>全国邮编查询(可在线调用)</b>:提供全国邮政编码大全,为你快速准确查邮编——<a href="https://www.free-api.com/doc/82" target='_blank'>接口地址</a><br><b>老黄历(可在线调用)</b>:提供老黄历查询,黄历每日吉凶宜忌查询——<a href="https://www.free-api.com/doc/83" target='_blank'>接口地址</a><br><b>周公解梦(可在线调用)</b>:周公解梦,周公解梦大全,周公解梦查询，免…——<a href="https://www.free-api.com/doc/84" target='_blank'>接口地址</a><br><b>净值数据(可在线调用)</b>:根据基金类型及分页参数来获取数据(开放式…——<a href="https://www.free-api.com/doc/85" target='_blank'>接口地址</a><br><b>星座运势(可在线调用)</b>:十二星座每日、每月、每年运势——<a href="https://www.free-api.com/doc/86" target='_blank'>接口地址</a><br><b>图书电商数据(可在线调用)</b>:于万千之中选择你所爱–好书推荐，值得你…——<a href="https://www.free-api.com/doc/87" target='_blank'>接口地址</a><br><b>身份证查询(可在线调用)</b>:身份证归属地信息查询——<a href="https://www.free-api.com/doc/88" target='_blank'>接口地址</a><br><b>黄金数据(可在线调用)</b>:黄金品种、最新价、开盘价、最高价等信息——<a href="https://www.free-api.com/doc/89" target='_blank'>接口地址</a><br><b>IP地址(可在线调用)</b>:根据查询的IP地址或者域名，查询该IP所…——<a href="https://www.free-api.com/doc/90" target='_blank'>接口地址</a><br><b>笑话大全——文字(可在线调用)</b>:每小时更新。文字笑话大全，信息搜集整理于…——<a href="https://www.free-api.com/doc/92" target='_blank'>接口地址</a><br><b>笑话大全——图片(可在线调用)</b>:每小时更新。图片笑话大全，信息搜集整理于…——<a href="https://www.free-api.com/doc/93" target='_blank'>接口地址</a><br><b>最新新闻</b>:新闻API接口 官方自营 会员接口…——<a href="https://www.free-api.com/doc/94" target='_blank'>接口地址</a><br><b>美图大全</b>:根据几十个种类获取图片列表，每日更新。种…——<a href="https://www.free-api.com/doc/95" target='_blank'>接口地址</a><br><b>手机归属地查询</b>:最全、最新的手机号段数据库。本地找不到的…——<a href="https://www.free-api.com/doc/96" target='_blank'>接口地址</a><br><b>历史上的今天</b>:回顾历史的长河,历史是生活的一面镜子;历…——<a href="https://www.free-api.com/doc/97" target='_blank'>接口地址</a><br><b>来福岛笑话——图片</b>:来福岛爆笑娱乐网创建于2000年，是国内…——<a href="https://www.free-api.com/doc/99" target='_blank'>接口地址</a><br><b>来福岛笑话——文字</b>:来福岛爆笑娱乐网创建于2000年，是国内…——<a href="https://www.free-api.com/doc/100" target='_blank'>接口地址</a><br><b>全国景点查询</b>:全国景点查询接口（来自同程网的合作数据）…——<a href="https://www.free-api.com/doc/101" target='_blank'>接口地址</a><br><b>健康知识</b>:根据养生、用药、两性等频道内容获取健康知…——<a href="https://www.free-api.com/doc/102" target='_blank'>接口地址</a><br><b>猜一猜</b>:随机返回谜语，有2.5万谜语，每日更新。…——<a href="https://www.free-api.com/doc/103" target='_blank'>接口地址</a><br><b>身份证查询</b>:可根据身份证号，查询其签发地、生日、性别…——<a href="https://www.free-api.com/doc/104" target='_blank'>接口地址</a><br><b>爱飞天气插件</b>:爱飞天气是ShowAPI官方天气接口的一…——<a href="https://www.free-api.com/doc/105" target='_blank'>接口地址</a><br><b>PM2.5空气质量指数</b>:本接口每小时更新1次。空气质量指数提供实…——<a href="https://www.free-api.com/doc/106" target='_blank'>接口地址</a><br><b>全球IP地址查询</b>:全球IP地址——<a href="https://www.free-api.com/doc/107" target='_blank'>接口地址</a><br><b>域名查询</b>:域名查询地理位置——<a href="https://www.free-api.com/doc/108" target='_blank'>接口地址</a><br><b>汉字转拼音</b>:将汉字转换为拼音和拼音首字母缩写——<a href="https://www.free-api.com/doc/110" target='_blank'>接口地址</a><br><b>中文分词</b>:中文分词接口。将长段中文切词分开。使用场…——<a href="https://www.free-api.com/doc/111" target='_blank'>接口地址</a><br><b>图片验证码生成</b>:图形|图片验证码生成，支持自定义高宽，文…——<a href="https://www.free-api.com/doc/112" target='_blank'>接口地址</a><br><b>新闻、网页正文抽取</b>:传入一个新网或网页地址，接口将返回此ur…——<a href="https://www.free-api.com/doc/114" target='_blank'>接口地址</a><br><b>实时IP代理查询</b>:代理数量并不是越多越好，可以用才是真正的…——<a href="https://www.free-api.com/doc/116" target='_blank'>接口地址</a><br><b>今日油价</b>:今日油价，可查询全国31个省的油价。每天…——<a href="https://www.free-api.com/doc/117" target='_blank'>接口地址</a><br><b>QQ号码测凶吉</b>:输入qq号码，得到此号码的算命情况，例如…——<a href="https://www.free-api.com/doc/118" target='_blank'>接口地址</a><br><b>地址转换经纬度</b>:根据城市和名称转换为相应的经纬度——<a href="https://www.free-api.com/doc/120" target='_blank'>接口地址</a><br><b>经纬度转换地址</b>:根据经纬度转换成相应地址——<a href="https://www.free-api.com/doc/121" target='_blank'>接口地址</a><br><b>黄历运势</b>:根据输入日期，查看某一天的黄历运势——<a href="https://www.free-api.com/doc/122" target='_blank'>接口地址</a><br><b>十大银行实时汇率</b>:包括工商银行、中国银行、农业银行、交通银…——<a href="https://www.free-api.com/doc/123" target='_blank'>接口地址</a><br><b>汇率转换</b>:1分钟更新1次。当前十大银行，包括工商银…——<a href="https://www.free-api.com/doc/124" target='_blank'>接口地址</a><br><b>添加图片水印</b>:传入底板图及水印图，根据位置参数，接口把…——<a href="https://www.free-api.com/doc/125" target='_blank'>接口地址</a><br><b>图像裁剪</b>:裁剪原图的部份区域——<a href="https://www.free-api.com/doc/126" target='_blank'>接口地址</a><br><b>生成缩略图</b>:根据传入的比率将原图生成缩略图——<a href="https://www.free-api.com/doc/127" target='_blank'>接口地址</a><br><b>星座运势</b>:每天1点、7点、17点更新。包含十二星座…——<a href="https://www.free-api.com/doc/128" target='_blank'>接口地址</a><br><b>PDF文件正文抽取</b>:抽取PDF文件中的文字信息——<a href="https://www.free-api.com/doc/129" target='_blank'>接口地址</a><br><b>网络搜索热词排行</b>:每2小时更新一次。根据分类查询网络最热的…——<a href="https://www.free-api.com/doc/131" target='_blank'>接口地址</a><br><b>二维码识别</b>:根据图片的Base64信息,识别图片中的…——<a href="https://www.free-api.com/doc/132" target='_blank'>接口地址</a><br><b>二维码生成</b>:生成二维码图片 图片存放在showapi…——<a href="https://www.free-api.com/doc/133" target='_blank'>接口地址</a><br><b>中文文本相似度检测</b>:通过计算向量间的夹角（余弦公式），来判断…——<a href="https://www.free-api.com/doc/134" target='_blank'>接口地址</a><br><b>全国火车票查询</b>:数据来源于12306。 包括城市列表\列…——<a href="https://www.free-api.com/doc/135" target='_blank'>接口地址</a><br><b>药品查询</b>:药品信息——<a href="https://www.free-api.com/doc/136" target='_blank'>接口地址</a><br><b>菜谱大全</b>:本菜谱的信息来源于网络,所以本信息仅用于…——<a href="https://www.free-api.com/doc/137" target='_blank'>接口地址</a><br><b>台风最新坐标轨迹</b>:可查询当前存在威胁的台风列表，每个台风的…——<a href="https://www.free-api.com/doc/138" target='_blank'>接口地址</a><br><b>网页级别查询</b>:google的pr查询——<a href="https://www.free-api.com/doc/139" target='_blank'>接口地址</a><br><b>关键词抽取</b>:根据传入的大段文字，使用TextRank…——<a href="https://www.free-api.com/doc/140" target='_blank'>接口地址</a><br><b>全国行政区划分</b>:最新最全的全国省、市、区县、乡镇的分级查…——<a href="https://www.free-api.com/doc/141" target='_blank'>接口地址</a><br><b>微信小程序查询</b>:搜索查询已经上架的微信小程序。包括基本信…——<a href="https://www.free-api.com/doc/142" target='_blank'>接口地址</a><br><b>生成文章摘要</b>:根据传入的长篇文章，系统使用智能算法抽取…——<a href="https://www.free-api.com/doc/143" target='_blank'>接口地址</a><br><b>藏头诗生成</b>:藏头诗生成器。可输入人名生成藏头、藏尾、…——<a href="https://www.free-api.com/doc/144" target='_blank'>接口地址</a><br><b>国际原油价格查询</b>:WTI和布伦特的油价查询——<a href="https://www.free-api.com/doc/145" target='_blank'>接口地址</a><br><b>水质查询</b>:根据地点和时间查询水质——<a href="https://www.free-api.com/doc/146" target='_blank'>接口地址</a><br><b>条码生成</b>:提供EAN_8、EAN_13、CODE_…——<a href="https://www.free-api.com/doc/147" target='_blank'>接口地址</a><br><b>条码识别</b>:提供EAN_8、EAN_13、CODE_…——<a href="https://www.free-api.com/doc/148" target='_blank'>接口地址</a><br><b>全国站点换乘线路查询</b>:提供全国站点换乘线路查询——<a href="https://www.free-api.com/doc/149" target='_blank'>接口地址</a><br><b>全国公交换乘查询</b>:提供全国公交换乘查询——<a href="https://www.free-api.com/doc/150" target='_blank'>接口地址</a><br><b>汽车品牌查询</b>:收录了近200个品牌/子品牌,上万辆车型…——<a href="https://www.free-api.com/doc/151" target='_blank'>接口地址</a><br><b>周公解梦</b>:根据周公解梦全书提供相关信息——<a href="https://www.free-api.com/doc/152" target='_blank'>接口地址</a><br><b>正能量新闻</b>:社会正能量的新闻资讯，每天更新——<a href="https://www.free-api.com/doc/153" target='_blank'>接口地址</a><br><b>全国酒店查询</b>:该接口所返回的所有图片链接将在12小时内…——<a href="https://www.free-api.com/doc/154" target='_blank'>接口地址</a><br><b>经典语句</b>:根据名人，查询经典名言——<a href="https://www.free-api.com/doc/155" target='_blank'>接口地址</a><br><b>商品比价</b>:搜索商品，根据商品url搜索各大商城的历…——<a href="https://www.free-api.com/doc/156" target='_blank'>接口地址</a><br><b>姓名打分</b>:根据姓名，返回此姓名的运势得分——<a href="https://www.free-api.com/doc/157" target='_blank'>接口地址</a><br><b>公司名测吉凶</b>:根据公司名，返回此公司的运势得分——<a href="https://www.free-api.com/doc/158" target='_blank'>接口地址</a><br><b>车牌号测吉凶</b>:根据车牌名，返回此车牌号的运势得分——<a href="https://www.free-api.com/doc/159" target='_blank'>接口地址</a><br><b>手机号测吉凶</b>:根据手机号码，返回此号码的运势得分——<a href="https://www.free-api.com/doc/160" target='_blank'>接口地址</a><br><b>图书ISBN查询</b>:通过国际图书号查询图书相关信息，目前只支…——<a href="https://www.free-api.com/doc/161" target='_blank'>接口地址</a><br><b>影讯查询</b>:影讯查询——<a href="https://www.free-api.com/doc/162" target='_blank'>接口地址</a><br><b>手机套餐售价</b>:全国手机流量充值，4G流量，当月有效——<a href="https://www.free-api.com/doc/163" target='_blank'>接口地址</a><br><b>紫微斗数</b>:根据出生时间定紫薇斗数命盘，供命理研究，…——<a href="https://www.free-api.com/doc/164" target='_blank'>接口地址</a><br><b>唐诗宋词元曲等诗词查询</b>:根据朝代Id或诗人名称查询诗人信息——<a href="https://www.free-api.com/doc/165" target='_blank'>接口地址</a><br><b>脑筋急转弯</b>:查询常见的脑筋急转弯金句——<a href="https://www.free-api.com/doc/166" target='_blank'>接口地址</a><br><b>虚拟数字币|比特币行情</b>:查询主流虚拟货币实时行情，例如btc(比…——<a href="https://www.free-api.com/doc/167" target='_blank'>接口地址</a><br><b>全国房产信息</b>:搜索最新楼盘开盘信息、最新市场房价信息——<a href="https://www.free-api.com/doc/168" target='_blank'>接口地址</a><br><b>手游排行榜</b>:手游最热排行榜及最期待榜——<a href="https://www.free-api.com/doc/169" target='_blank'>接口地址</a><br><b>网游排行榜</b>:网游最热排行榜及最期待榜——<a href="https://www.free-api.com/doc/170" target='_blank'>接口地址</a><br><b>黄金行情</b>:上金所黄金行情——<a href="https://www.free-api.com/doc/171" target='_blank'>接口地址</a><br><b>电商淘宝平台联想词</b>:提供淘宝联想词查询——<a href="https://www.free-api.com/doc/172" target='_blank'>接口地址</a><br><b>中文反义词</b>:中文反义词——<a href="https://www.free-api.com/doc/173" target='_blank'>接口地址</a><br><b>中文近义词</b>:中文近义词——<a href="https://www.free-api.com/doc/174" target='_blank'>接口地址</a><br><b>歇后语查询</b>:查询歇后语列表——<a href="https://www.free-api.com/doc/175" target='_blank'>接口地址</a><br><b>中国互联网络信息</b>:中国互联网络信息——<a href="https://www.free-api.com/doc/176" target='_blank'>接口地址</a><br><b>实时票房排行</b>:实时票房中国（包括香港）、北美、全球票房…——<a href="https://www.free-api.com/doc/177" target='_blank'>接口地址</a><br><b>爱奇艺热点趋势</b>:爱奇艺视频指数——<a href="https://www.free-api.com/doc/178" target='_blank'>接口地址</a><br><b>空气质量指数(可在线调用)</b>:空气质量指数提供实时空气质量情况，目前支…——<a href="https://www.free-api.com/doc/179" target='_blank'>接口地址</a><br><b>IP地址查询(可在线调用)</b>:提供rest风格的IP地址查询接口，只需…——<a href="https://www.free-api.com/doc/180" target='_blank'>接口地址</a><br><b>天气预报(可在线调用)</b>:全国天气预报，预报7天天气，以及当天的生…——<a href="https://www.free-api.com/doc/181" target='_blank'>接口地址</a><br><b>人脸识别(可在线调用)</b>:检测图片(Image)中的人脸(Face…——<a href="https://www.free-api.com/doc/182" target='_blank'>接口地址</a><br><b>指纹识别</b>:检测图片(Image)中的指纹(Fing…——<a href="https://www.free-api.com/doc/183" target='_blank'>接口地址</a><br><b>医疗科室(可在线调用)</b>:医药健康接口专用的医疗科室字典项获取——<a href="https://www.free-api.com/doc/184" target='_blank'>接口地址</a><br><b>健康菜谱(可在线调用)</b>:健康菜谱，让人们在宣泄的都市中体验在家常…——<a href="https://www.free-api.com/doc/186" target='_blank'>接口地址</a><br><b>疾病信息(可在线调用)</b>:通过名称取得疾病详情——<a href="https://www.free-api.com/doc/187" target='_blank'>接口地址</a><br><b>药品查询(可在线调用)</b>:通过药品名字直接得到药品说明书、价格、生…——<a href="https://www.free-api.com/doc/188" target='_blank'>接口地址</a><br><b>食疗大全(可在线调用)</b>:通过名称取得食品详情只要是食品都有它…——<a href="https://www.free-api.com/doc/189" target='_blank'>接口地址</a><br><b>手术项目(可在线调用)</b>:通过名称取得手术详情通过名称取得手术…——<a href="https://www.free-api.com/doc/190" target='_blank'>接口地址</a><br><b>药房药店(可在线调用)</b>:通过名称取得药店信息通过名称取得药店…——<a href="https://www.free-api.com/doc/191" target='_blank'>接口地址</a><br><b>病状信息(可在线调用)</b>:通过名称取得病状详情——<a href="https://www.free-api.com/doc/192" target='_blank'>接口地址</a><br><b>微信精选(可在线调用)</b>:微信热门精选文章，实时更新——<a href="https://www.free-api.com/doc/193" target='_blank'>接口地址</a><br><b>国内新闻(可在线调用)</b>:国内新闻数据，实时更新——<a href="https://www.free-api.com/doc/194" target='_blank'>接口地址</a><br><b>国际新闻(可在线调用)</b>:国际新闻数据，实时更新——<a href="https://www.free-api.com/doc/195" target='_blank'>接口地址</a><br><b>体育新闻(可在线调用)</b>:体育新闻数据，实时更新——<a href="https://www.free-api.com/doc/196" target='_blank'>接口地址</a><br><b>科技新闻(可在线调用)</b>:科技新闻数据，实时更新——<a href="https://www.free-api.com/doc/197" target='_blank'>接口地址</a><br><b>奇闻轶事(可在线调用)</b>:奇闻轶事数据，实时更新——<a href="https://www.free-api.com/doc/198" target='_blank'>接口地址</a><br><b>旅游新闻(可在线调用)</b>:旅游热点数据，实时更新——<a href="https://www.free-api.com/doc/199" target='_blank'>接口地址</a><br><b>新华字典(可在线调用)</b>:新华字典数据库，可查字的拼音、读音、偏旁…——<a href="https://www.free-api.com/doc/200" target='_blank'>接口地址</a><br><b>五笔字根(可在线调用)</b>:查询汉字的五笔字根——<a href="https://www.free-api.com/doc/201" target='_blank'>接口地址</a><br><b>简繁体火星文转换(可在线调用)</b>:汉字的简体、繁体、火星文转换——<a href="https://www.free-api.com/doc/202" target='_blank'>接口地址</a><br><b>成语词典(可在线调用)</b>:成语查询——<a href="https://www.free-api.com/doc/203" target='_blank'>接口地址</a><br><b>歇后语(可在线调用)</b>:歇后语查询，根据关键字搜索歇后语——<a href="https://www.free-api.com/doc/204" target='_blank'>接口地址</a><br><b>唐诗宋词(可在线调用)</b>:根据关键字搜索唐诗宋词——<a href="https://www.free-api.com/doc/205" target='_blank'>接口地址</a><br><b>历史上的今天(可在线调用)</b>:以史为镜，可以知兴替。借历史上的成败得失…——<a href="https://www.free-api.com/doc/206" target='_blank'>接口地址</a><br><b>辞海(可在线调用)</b>:查询词语解释——<a href="https://www.free-api.com/doc/207" target='_blank'>接口地址</a><br><b>手机号码归属地(可在线调用)</b>:通过手机号码查询归属地、运营商、号码类型…——<a href="https://www.free-api.com/doc/208" target='_blank'>接口地址</a><br><b>笑话大全(可在线调用)</b>:海量互联网幽默、内涵段子、趣味图片，不间…——<a href="https://www.free-api.com/doc/209" target='_blank'>接口地址</a><br><b>同义词</b>:通过输入的词语查询对应的同义词——<a href="https://www.free-api.com/doc/210" target='_blank'>接口地址</a><br><b>全国WIFI(可在线调用)</b>:查询周边免费WIFI热点；全国免费WIF…——<a href="https://www.free-api.com/doc/211" target='_blank'>接口地址</a><br><b>NBA赛事(可在线调用)</b>:NBA赛事赛程信息，球队赛程赛事查询——<a href="https://www.free-api.com/doc/212" target='_blank'>接口地址</a><br><b>全国邮编查询(可在线调用)</b>:通过地名查询地区邮编，精确到街道——<a href="https://www.free-api.com/doc/213" target='_blank'>接口地址</a><br><b>周公解梦(可在线调用)</b>:周公解梦大全——<a href="https://www.free-api.com/doc/214" target='_blank'>接口地址</a><br><b>名人名言(可在线调用)</b>:通过关键字查询名人名言——<a href="https://www.free-api.com/doc/215" target='_blank'>接口地址</a><br><b>今日油价(可在线调用)</b>:可查询全国31个省的油价——<a href="https://www.free-api.com/doc/216" target='_blank'>接口地址</a><br><b>国际白银实时价格</b>:国际交易市场白银实时价格(美元/盎司)，…——<a href="https://www.free-api.com/doc/217" target='_blank'>接口地址</a><br><b>时事新闻检索(可在线调用)</b>:时事新闻，新闻检索等，实时更新——<a href="https://www.free-api.com/doc/218" target='_blank'>接口地址</a><br><b>号码吉凶(可在线调用)</b>:手机号码、QQ号码、车牌号等所有数字类型…——<a href="https://www.free-api.com/doc/219" target='_blank'>接口地址</a><br><b>金额小写转大写(可在线调用)</b>:人民币金额小写转大写——<a href="https://www.free-api.com/doc/220" target='_blank'>接口地址</a><br><b>电影票房(可在线调用)</b>:最新票房榜，网票票房——<a href="https://www.free-api.com/doc/221" target='_blank'>接口地址</a><br><b>全国长途汽车(可在线调用)</b>:全国长途汽车时刻表查询——<a href="https://www.free-api.com/doc/222" target='_blank'>接口地址</a><br><b>足球联赛(可在线调用)</b>:目前支持 英超，西甲，德甲，意甲，法甲，…——<a href="https://www.free-api.com/doc/223" target='_blank'>接口地址</a><br><b>影视影讯(可在线调用)</b>:影视信息播放链接检索，城市影讯检索——<a href="https://www.free-api.com/doc/224" target='_blank'>接口地址</a><br><b>标准电码查询(可在线调用)</b>:提供的标准中文电码查询程序结果——<a href="https://www.free-api.com/doc/225" target='_blank'>接口地址</a><br><b>火车时刻表(可在线调用)</b>:火车时刻表，站到站检索——<a href="https://www.free-api.com/doc/226" target='_blank'>接口地址</a><br><b>姓氏起源(可在线调用)</b>:《百家姓》是我国汉族姓氏总集，载有四百多…——<a href="https://www.free-api.com/doc/227" target='_blank'>接口地址</a><br><b>短链接生成(可在线调用)</b>:查找网提供长的网址链接缩短为新浪短网扯，…——<a href="https://www.free-api.com/doc/228" target='_blank'>接口地址</a><br><b>翻译(可在线调用)</b>:翻译API提供免费开放接口，覆盖中、英、…——<a href="https://www.free-api.com/doc/229" target='_blank'>接口地址</a><br><b>乌云漏洞(可在线调用)</b>:查看乌云最新的安全漏洞——<a href="https://www.free-api.com/doc/230" target='_blank'>接口地址</a><br><b>微信公众号查询(可在线调用)</b>:根据关键字搜索热门微信文章、微信公众号等…——<a href="https://www.free-api.com/doc/231" target='_blank'>接口地址</a><br><b>在线分词(可在线调用)</b>:基于深度学习的中文在线抽词——<a href="https://www.free-api.com/doc/232" target='_blank'>接口地址</a><br><b>MD5破解(可在线调用)</b>:md5密文：16位，32位,sha1(4…——<a href="https://www.free-api.com/doc/233" target='_blank'>接口地址</a><br><b>星座配对(可在线调用)</b>:星座配对测姻缘——<a href="https://www.free-api.com/doc/234" target='_blank'>接口地址</a><br><b>生肖配对(可在线调用)</b>:生肖配对测姻缘——<a href="https://www.free-api.com/doc/235" target='_blank'>接口地址</a><br><b>获取外网IP信息(可在线调用)</b>:取得客户端访问互联网时的外网ip及对应的…——<a href="https://www.free-api.com/doc/236" target='_blank'>接口地址</a><br><b>百度权重(可在线调用)</b>:根据网址查询百度权重——<a href="https://www.free-api.com/doc/237" target='_blank'>接口地址</a><br><b>新闻头条(可在线调用)</b>:最新新闻头条——<a href="https://www.free-api.com/doc/238" target='_blank'>接口地址</a><br><b>星座运势(可在线调用)</b>:黄道十二星座每日、每月、每年运势、不间断…——<a href="https://www.free-api.com/doc/239" target='_blank'>接口地址</a><br></p>
<hr>
<p>2019.7.3更新接口</p>
<hr>
<p><b>实时段子(可在线调用)</b>:实时段子,神评版本——<a href="https://www.free-api.com/doc/240" target="_blank" rel="noopener">接口地址</a><br><b>音乐搜索(可在线调用)</b>:根据音乐名称返回音乐详情——<a href="https://www.free-api.com/doc/241" target="_blank" rel="noopener">接口地址</a><br><b>小说查询(可在线调用)</b>:获取小说的详细信息——<a href="https://www.free-api.com/doc/242" target="_blank" rel="noopener">接口地址</a><br><b>天气查询(可在线调用)</b>:获取最近天气情况——<a href="https://www.free-api.com/doc/243" target="_blank" rel="noopener">接口地址</a><br><b>音悦tai搜索</b>:音悦Tai-是以高清MV为主的娱乐视频网…——<a href="https://www.free-api.com/doc/244" target="_blank" rel="noopener">接口地址</a><br><b>识别身份证文字(可在线调用)</b>:AI人工智能识别身份证图像文字 URL图…——<a href="https://www.free-api.com/doc/245" target="_blank" rel="noopener">接口地址</a><br><b>编码解码</b>:常见的编码和解码——<a href="https://www.free-api.com/doc/246" target="_blank" rel="noopener">接口地址</a><br><b>网站备案查询</b>:网站备案信息查询接口——<a href="https://www.free-api.com/doc/247" target="_blank" rel="noopener">接口地址</a><br><b>身份证信息查询(可在线调用)</b>:身份证信息查询(不支持查询百岁老人)——<a href="https://www.free-api.com/doc/248" target="_blank" rel="noopener">接口地址</a><br><b>图片PS</b>:在线图片加文字,返回为字符串,需要处理下——<a href="https://www.free-api.com/doc/249" target="_blank" rel="noopener">接口地址</a><br><b>一言</b>:随机返回一句话——<a href="https://www.free-api.com/doc/250" target="_blank" rel="noopener">接口地址</a><br><b>短链接生成与还原</b>:短链接生成与还原，包括新浪、腾讯、百度——<a href="https://www.free-api.com/doc/251" target="_blank" rel="noopener">接口地址</a><br><b>获取用户大致信息</b>:获取用户信息如网络运营商等等——<a href="https://www.free-api.com/doc/254" target="_blank" rel="noopener">接口地址</a><br><b>三合一收款码</b>:包括支付宝，qq，微信——<a href="https://www.free-api.com/doc/255" target="_blank" rel="noopener">接口地址</a><br><b>IP查询</b>:根据ip地址获取其所在省市区——<a href="https://www.free-api.com/doc/252" target="_blank" rel="noopener">接口地址</a><br><b>IP经纬度查询</b>:根据ip地址和经纬度获取其所在省市区——<a href="https://www.free-api.com/doc/253" target="_blank" rel="noopener">接口地址</a></p>
<hr>
<p>2019.8.7更新接口</p>
<hr>
<p><b>淘宝ip(可在线调用)</b>:来自淘宝的ip查询，可以根据ip地址查询…——<a href="https://www.free-api.com/doc/256" target="_blank" rel="noopener">接口地址</a><br><b>360ip(可在线调用)</b>:来自360的ip查询，可以根据ip地址查…——<a href="https://www.free-api.com/doc/257" target="_blank" rel="noopener">接口地址</a><br><b>地理编码(可在线调用)</b>:将详细的结构化地址转换为高德经纬度坐标。…——<a href="https://www.free-api.com/doc/258" target="_blank" rel="noopener">接口地址</a><br><b>逆地理编码(可在线调用)</b>:将经纬度转换为详细结构化的地址，且返回附…——<a href="https://www.free-api.com/doc/259" target="_blank" rel="noopener">接口地址</a><br><b>步行路径规划</b>:可以规划100KM以内的步行通勤方案，并…——<a href="https://www.free-api.com/doc/260" target="_blank" rel="noopener">接口地址</a><br><b>驾车路径规划(可在线调用)</b>:规划以小客车、轿车通勤出行的方案，并且返…——<a href="https://www.free-api.com/doc/261" target="_blank" rel="noopener">接口地址</a><br><b>公交路径规划</b>:规划综合各类公共（火车、公交、地铁）交通…——<a href="https://www.free-api.com/doc/262" target="_blank" rel="noopener">接口地址</a><br><b>骑行路径规划(可在线调用)</b>:用于规划骑行通勤方案，规划时不会考虑路况…——<a href="https://www.free-api.com/doc/263" target="_blank" rel="noopener">接口地址</a><br><b>距离测量</b>:根据经纬度测量距离——<a href="https://www.free-api.com/doc/264" target="_blank" rel="noopener">接口地址</a><br><b>行政区域查询(可在线调用)</b>:根据用户输入的搜索条件可以帮助用户快速的…——<a href="https://www.free-api.com/doc/265" target="_blank" rel="noopener">接口地址</a><br><b>矩形区域交通态势</b>:能够确定矩形交通态势情况，路况信息2分钟…——<a href="https://www.free-api.com/doc/266" target="_blank" rel="noopener">接口地址</a><br><b>圆形区域交通态势</b>:能够确定圆形交通态势情况，路况信息2分钟…——<a href="https://www.free-api.com/doc/267" target="_blank" rel="noopener">接口地址</a><br><b>指定线路交通态势</b>:能够确定指定线路交通情况，路况信息2分钟…——<a href="https://www.free-api.com/doc/268" target="_blank" rel="noopener">接口地址</a><br><b>输入提示(可在线调用)</b>:提供根据用户输入的关键词查询返回建议列表——<a href="https://www.free-api.com/doc/269" target="_blank" rel="noopener">接口地址</a><br><b>天气查询(可在线调用)</b>:查询目标区域当前/未来的天气情况——<a href="https://www.free-api.com/doc/270" target="_blank" rel="noopener">接口地址</a><br><b>IP定位(可在线调用)</b>:将IP信息转换为地理位置信息——<a href="https://www.free-api.com/doc/271" target="_blank" rel="noopener">接口地址</a><br><b>地点范围查询(可在线调用)</b>:根据经纬度查询查询其地址相关信息——<a href="https://www.free-api.com/doc/272" target="_blank" rel="noopener">接口地址</a></p>
<hr>
<p>2019.9.9更新接口</p>
<hr>
<p><b>行政区划区域检索(可在线调用)</b>:开发者可通过该功能，检索某一行政区划内（…——<a href="https://www.free-api.com/doc/273" target="_blank" rel="noopener">接口地址</a><br><b>圆形区域检索(可在线调用)</b>:开发者可设置圆心和半径，检索圆形区域内的…——<a href="https://www.free-api.com/doc/274" target="_blank" rel="noopener">接口地址</a><br><b>矩形区域检索(可在线调用)</b>:开发者可设置检索区域左下角和右上角坐标，…——<a href="https://www.free-api.com/doc/275" target="_blank" rel="noopener">接口地址</a><br><b>地点详情检索(可在线调用)</b>:地点详情检索针对指定POI，检索其相关的…——<a href="https://www.free-api.com/doc/276" target="_blank" rel="noopener">接口地址</a><br><b>地点输入提示(可在线调用)</b>:用户可通过该服务，匹配用户输入关键词的地…——<a href="https://www.free-api.com/doc/277" target="_blank" rel="noopener">接口地址</a><br><b>地理编码服务(可在线调用)</b>:用户可通过该功能，将结构化地址（省/市/…——<a href="https://www.free-api.com/doc/278" target="_blank" rel="noopener">接口地址</a><br><b>全球逆地理编码(可在线调用)</b>:用户可通过该功能，将位置坐标解析成对应的…——<a href="https://www.free-api.com/doc/279" target="_blank" rel="noopener">接口地址</a><br><b>公交路线规划(可在线调用)</b>:根据起点和终点检索符合条件的公共交通方案…——<a href="https://www.free-api.com/doc/280" target="_blank" rel="noopener">接口地址</a><br><b>骑行路线规划(可在线调用)</b>:根据起终点坐标检索符合条件的骑行路线规划…——<a href="https://www.free-api.com/doc/281" target="_blank" rel="noopener">接口地址</a><br><b>驾车路线规划(可在线调用)</b>:根据起终点坐标检索符合条件的驾车路线规划…——<a href="https://www.free-api.com/doc/282" target="_blank" rel="noopener">接口地址</a><br><b>批量算路</b>:用户可通过该服务，根据起点和终点坐标计算…——<a href="https://www.free-api.com/doc/283" target="_blank" rel="noopener">接口地址</a><br><b>普通IP定位(可在线调用)</b>:用户可以通过该服务，根据IP定位来获取大…——<a href="https://www.free-api.com/doc/284" target="_blank" rel="noopener">接口地址</a><br><b>道路实时路况查询(可在线调用)</b>:查询具体道路的实时拥堵评价和拥堵路段、拥…——<a href="https://www.free-api.com/doc/285" target="_blank" rel="noopener">接口地址</a><br><b>时间偏移查询(可在线调用)</b>:查询坐标所在地与协调世界时的时间偏移信息…——<a href="https://www.free-api.com/doc/286" target="_blank" rel="noopener">接口地址</a><br><b>周边上车点推荐(可在线调用)</b>:用户可通过该功能检索坐标点周围的上车点。…——<a href="https://www.free-api.com/doc/287" target="_blank" rel="noopener">接口地址</a><br><b>非百度坐标系转换(可在线调用)</b>:用户可通过该服务，实现 非百度坐标系→百…——<a href="https://www.free-api.com/doc/288" target="_blank" rel="noopener">接口地址</a><br><b>快递查询(可在线调用)</b>:可根据快递单号查询大部分主流快递的快递信…——<a href="https://www.free-api.com/doc/289" target="_blank" rel="noopener">接口地址</a><br><b>文件转换</b>:文件转换成指定格式，成功则返回成功转换的…——<a href="https://www.free-api.com/doc/290" target="_blank" rel="noopener">接口地址</a><br><b>获取文件转换内容</b>:根据文件转换成功所获取的id，查询转换成…——<a href="https://www.free-api.com/doc/291" target="_blank" rel="noopener">接口地址</a></p>
<hr>
<p>2019.10.8更新接口</p>
<hr>
<p><b>全球IP地理位置(可在线调用)</b>:单个IPv4 / IPv6地址或域名…——<a href="https://www.free-api.com/doc/292" target="_blank" rel="noopener">接口地址</a><br><b>域名备案(可在线调用)</b>:根据域名查询域名备案状态——<a href="https://www.free-api.com/doc/293" target="_blank" rel="noopener">接口地址</a><br><b>十五天天气预报</b>:采用城市ID来精准查询15天内的天气，接…——<a href="https://www.free-api.com/doc/294" target="_blank" rel="noopener">接口地址</a><br><b>农历查询(可在线调用)</b>:根据日期获取农历、黄历、禁忌、星期、生肖…——<a href="https://www.free-api.com/doc/295" target="_blank" rel="noopener">接口地址</a><br><b>ICP备案查询(可在线调用)</b>:根据域名查询ICP备案号——<a href="https://www.free-api.com/doc/296" target="_blank" rel="noopener">接口地址</a><br><b>三合一收款二维码</b>:将QQ、微信、支付宝收款集合到一起，省去…——<a href="https://www.free-api.com/doc/297" target="_blank" rel="noopener">接口地址</a><br><b>二维码生成</b>:将网址直接转换成二维码图片——<a href="https://www.free-api.com/doc/298" target="_blank" rel="noopener">接口地址</a><br><b>二维码解码(可在线调用)</b>:将二维码图片进行解码，解析处理——<a href="https://www.free-api.com/doc/299" target="_blank" rel="noopener">接口地址</a><br><b>短网址生成(可在线调用)</b>:将长网址进行缩短，支持百度、新浪、腾讯短…——<a href="https://www.free-api.com/doc/300" target="_blank" rel="noopener">接口地址</a><br><b>短网址还原(可在线调用)</b>:将缩短的短网址进行还原,支持常见的短网址——<a href="https://www.free-api.com/doc/301" target="_blank" rel="noopener">接口地址</a><br><b>网易云音乐随机歌曲(可在线调用)</b>:网易云音乐，随机歌曲输出——<a href="https://www.free-api.com/doc/302" target="_blank" rel="noopener">接口地址</a><br><b>获取访客相关信息(可在线调用)</b>:根据访客IP地址，操作系统，浏览器，访问…——<a href="https://www.free-api.com/doc/303" target="_blank" rel="noopener">接口地址</a><br><b>随机头像输出(可在线调用)</b>:随机头像输出——<a href="https://www.free-api.com/doc/304" target="_blank" rel="noopener">接口地址</a></p>
<hr>
<p>2019.11.5更新接口</p>
<hr>
<p><b>文章短篇</b>:根据日期获取一篇文章，有网上的，也有名家…——<a href="https://www.free-api.com/doc/305" target="_blank" rel="noopener">接口地址</a><br><b>必应故事</b>:随机获取来自必应的故事，可根据pid获取…——<a href="https://www.free-api.com/doc/306" target="_blank" rel="noopener">接口地址</a><br><b>每日一言</b>:获取来自一言、有道或金山词霸的每日一言内…——<a href="https://www.free-api.com/doc/307" target="_blank" rel="noopener">接口地址</a><br><b>二维码解析</b>:还原二维码的原始URL，支持支付宝，微信…——<a href="https://www.free-api.com/doc/308" target="_blank" rel="noopener">接口地址</a><br><b>生成海报</b>:根据提交的内容格式化生成可分享的精美海报——<a href="https://www.free-api.com/doc/309" target="_blank" rel="noopener">接口地址</a><br><b>历史上的今天</b>:历史上的今天——<a href="https://www.free-api.com/doc/310" target="_blank" rel="noopener">接口地址</a><br><b>生成二维码</b>:可根据传入的内容，生成对应的二维码，还可…——<a href="https://www.free-api.com/doc/311" target="_blank" rel="noopener">接口地址</a><br><b>IP地址详情信息</b>:IP地址详情信息查询——<a href="https://www.free-api.com/doc/312" target="_blank" rel="noopener">接口地址</a><br><b>XLS生成</b>:生成XLS——<a href="https://www.free-api.com/doc/313" target="_blank" rel="noopener">接口地址</a><br><b>土味情话</b>:和妹妹说的情话，返回一句随机的内容——<a href="https://www.free-api.com/doc/314" target="_blank" rel="noopener">接口地址</a><br><b>随机笑话(可在线调用)</b>:随机的笑话——<a href="https://www.free-api.com/doc/315" target="_blank" rel="noopener">接口地址</a></p>
<hr>
<p>2019.12.4更新接口</p>
<hr>
<p><b>经纬度信息(可在线调用)</b>:获取当前经纬度信息——<a href="https://www.free-api.com/doc/316" target="_blank" rel="noopener">接口地址</a><br><b>历史上的今天(可在线调用)</b>:历史上的今天——<a href="https://www.free-api.com/doc/317" target="_blank" rel="noopener">接口地址</a><br><b>Bing 壁纸获取(可在线调用)</b>:获取最近的Bing 壁纸——<a href="https://www.free-api.com/doc/318" target="_blank" rel="noopener">接口地址</a><br><b>天气查询(可在线调用)</b>:获取今天和未来三天的天气情况，来源于高德——<a href="https://www.free-api.com/doc/319" target="_blank" rel="noopener">接口地址</a><br><b>天气查询(可在线调用)</b>:根据城市名，获取今天和未来三天的天气情况…——<a href="https://www.free-api.com/doc/320" target="_blank" rel="noopener">接口地址</a><br><b>天气查询(可在线调用)</b>:根据城市id，获取未来15天的天气情况，…——<a href="https://www.free-api.com/doc/321" target="_blank" rel="noopener">接口地址</a><br><b>手机归属地查询(可在线调用)</b>:根据手机号码查询手机号的归属地信息——<a href="https://www.free-api.com/doc/322" target="_blank" rel="noopener">接口地址</a><br><b>手机归属地查询</b>:根据手机号码查询手机号的归属地信息，来源…——<a href="https://www.free-api.com/doc/323" target="_blank" rel="noopener">接口地址</a><br><b>IP域名归属地查询(可在线调用)</b>:查询IP或者域名归属地——<a href="https://www.free-api.com/doc/324" target="_blank" rel="noopener">接口地址</a><br><b>身份证查询(可在线调用)</b>:根据身份证获取该身份证号码的籍贯，出生年…——<a href="https://www.free-api.com/doc/325" target="_blank" rel="noopener">接口地址</a><br><b>淘宝关键字(可在线调用)</b>:淘宝搜索关键字——<a href="https://www.free-api.com/doc/326" target="_blank" rel="noopener">接口地址</a><br><b>百度关键字</b>:百度搜索关键字——<a href="https://www.free-api.com/doc/327" target="_blank" rel="noopener">接口地址</a><br><b>Bing关键字(可在线调用)</b>:Bing搜索关键字——<a href="https://www.free-api.com/doc/328" target="_blank" rel="noopener">接口地址</a><br><b>获取用户设备信息(可在线调用)</b>:通过 user-agent 分析用户设备…——<a href="https://www.free-api.com/doc/329" target="_blank" rel="noopener">接口地址</a><br><b>百度音乐搜索(可在线调用)</b>:根据关键字获取音乐的相关信息——<a href="https://www.free-api.com/doc/330" target="_blank" rel="noopener">接口地址</a></p>
<hr>
<p>努力添加中……</p>
<p><strong>原文链接：<a href="https://github.com/fangzesheng/free-api" target="_blank" rel="noopener">https://github.com/fangzesheng/free-api</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>PM2介绍</title>
    <url>/2019/12/10/pm2-common-commands-introduction.html</url>
    <content><![CDATA[<p>pm2 是一个带有负载均衡功能的Node应用的进程管理器。当你要把你的独立代码利用全部的服务器上的所有CPU，并保证进程永远都活着，0秒的重载， PM2是完美的。</p>
<p>主要特性：<br>1.内建负载均衡（使用Node cluster 集群模块）<br>2.后台运行<br>3.0秒停机重载，我理解大概意思是维护升级的时候不需要停机<br>4.具有Ubuntu和CentOS的启动脚本<br>5.停止不稳定的进程（避免无限循环）<br>6.控制台检测<br>7.提供 HTTP API<br>8.远程控制和实时的接口API(Nodejs模块,允许和PM2进程管理器交互 )</p>
<a id="more"></a>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g pm2 <span class="comment">#命令行安装pm2</span></span><br></pre></td></tr></table></figure>
<h5 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 start app.js -i 4 <span class="comment">#后台运行pm2，启动4个app.js</span></span><br><span class="line">pm2 start app.js --name my-api  <span class="comment">#命名进程</span></span><br><span class="line">pm2 list  <span class="comment">#显示所有进程状态</span></span><br><span class="line">pm2 monit  <span class="comment">#监视所有进程</span></span><br><span class="line">pm2 logs  <span class="comment">#显示所有进程日志</span></span><br><span class="line">pm2 stop all  <span class="comment">#停止所有进程</span></span><br><span class="line">pm2 restart all  <span class="comment">#重启所有进程</span></span><br><span class="line">pm2 reload all  <span class="comment">#0秒停机重载进程 (用于 NETWORKED 进程)</span></span><br><span class="line">pm2 stop 0  <span class="comment">#停止指定的进程</span></span><br><span class="line">pm2 restart 0  <span class="comment">#重启指定的进程</span></span><br><span class="line">pm2 startup  <span class="comment">#产生 init 脚本 保持进程活着</span></span><br><span class="line">pm2 web  <span class="comment">#运行健壮的 computer API endpoint</span></span><br><span class="line">pm2 delete 0  <span class="comment">#杀死指定的进程</span></span><br><span class="line">pm2 delete all  <span class="comment">#杀死全部进程</span></span><br><span class="line"></span><br><span class="line">运行进程的不同方式：</span><br><span class="line">pm2 start app.js -i max  <span class="comment">#根据有效CPU数目启动最大进程数目</span></span><br><span class="line">pm2 start app.js -i 3  <span class="comment">#启动3个进程</span></span><br><span class="line">pm2 start app.js -x  <span class="comment">#用fork模式启动 app.js 而不是使用 cluster</span></span><br><span class="line">pm2 start app.js -x -- -a 23  <span class="comment">#用fork模式启动 app.js 并且传递参数 (-a 23)</span></span><br><span class="line">pm2 start app.js --name serverone <span class="comment">#启动一个进程并把它命名为 serverone</span></span><br><span class="line">pm2 stop serverone  <span class="comment">#停止serverone进程</span></span><br><span class="line">pm2 start app.json  <span class="comment">#启动进程, 在app.json里设置选项</span></span><br><span class="line">pm2 start app.js -i max -- -a 23  <span class="comment">#在--之后给app.js传递参数</span></span><br><span class="line">pm2 start app.js -i max -e err.log -o out.log  <span class="comment">#启动 并生成一个配置文件</span></span><br><span class="line">你也可以执行用其他语言编写的app ( fork 模式):</span><br><span class="line">pm2 start my-bash-script.sh -x --interpreter bash</span><br><span class="line">pm2 start my-python-script.py -x --interpreter python</span><br><span class="line">pm2 list <span class="comment">#列出由pm2管理的所有进程信息，还会显示一个进程会被启动多少次</span></span><br><span class="line">pm2 monit <span class="comment">#监视每个node进程的CPU和内存的使用情况。</span></span><br></pre></td></tr></table></figure>

<p><strong>本文链接：<a href="http://www.ergzcode.com/2019/12/10/pm2-common-commands-introduction.html">PM2介绍</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>pm2</tag>
      </tags>
  </entry>
  <entry>
    <title>PM2守护hexo的进程</title>
    <url>/2019/12/08/pm2-watch-hexo-process.html</url>
    <content><![CDATA[<p>在服务器上安装好了hexo，执行hexo sever来启动它的服务，会发现过了一段时间hexo的进程总是莫名其妙的挂掉，然后导致网站无法访问。从网上搜索了一些解决方案，发现能使用PM2来接管hexo的后台进程，从而让hexo进程一直常驻后台。</p>
<p>操作步骤如下：</p>
<h5 id="1-首先安装pm2"><a href="#1-首先安装pm2" class="headerlink" title="1.首先安装pm2"></a>1.首先安装pm2</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g pm2</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h5 id="2-写一个shell-hexo-daemon-js"><a href="#2-写一个shell-hexo-daemon-js" class="headerlink" title="2.写一个shell hexo_daemon.js"></a>2.写一个shell hexo_daemon.js</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//run</span><br><span class="line">const &#123; <span class="built_in">exec</span> &#125; = require(<span class="string">'child_process'</span>)</span><br><span class="line"><span class="built_in">exec</span>(<span class="string">'hexo server -p 80 &amp; '</span>,(error, stdout, stderr) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(error)&#123;</span><br><span class="line">                console.log(<span class="string">'exec error: $&#123;error&#125;'</span>)</span><br><span class="line">                <span class="built_in">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        console.log(<span class="string">'stdout: $&#123;stdout&#125;'</span>);</span><br><span class="line">        console.log(<span class="string">'stderr: $&#123;stderr&#125;'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h5 id="3-在根目录下执行shell"><a href="#3-在根目录下执行shell" class="headerlink" title="3.在根目录下执行shell"></a>3.在根目录下执行shell</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 start hexo_daemon.js</span><br></pre></td></tr></table></figure>
<p><strong>本文链接：<a href="http://www.ergzcode.com/2019/12/08/pm2-watch-hexo-process.html">PM2守护hexo的进程</a><br>欢迎转载，请注明出处！<br>参考:<a href="https://www.jianshu.com/p/4a3d4d144ab2" target="_blank" rel="noopener">PM2使用</a></strong></p>
]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>pm2</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用命令使用</title>
    <url>/2019/11/26/git-common-commands-using.html</url>
    <content><![CDATA[<p>1.查看工作区的状态：<code>git status</code></p>
<p>2.查看文件具体修改了什么内容：<code>git diff file</code></p>
<p>3.查看提交的历史记录，该命令显示从最近到最远的历史记录：<code>git log</code>，如果嫌输出信息太多，可以试试加上<code>--pretty=oneline</code>参数：<code>git log --graph --pretty=oneline --abbrev-commit</code>，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span><br><span class="line">eede197ffb267fbda60482da9554ba654ff523e3 init hexo repo</span><br><span class="line">1f2508638115730cb301f73c51b9971fca5c7f09 Initial commit</span><br></pre></td></tr></table></figure>
<p>上面输出的一大串数字其实是 commit id(版本号)，这是一个SHA1计算出来的一个非常大的数字，用十六进制表示</p>
<a id="more"></a>
<p>4.<code>git reset</code>该命令用来回退到某个版本，在git中用<code>HEAD</code>表示当前版本，<code>HEAD^</code>表示上个版本，<code>HEAD^^</code>表示上上版本……<br>以此类推，<code>HEAD~100</code>表示往上100个版本<br>现在我们用命令回退到上个版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br><span class="line">HEAD is now at 1f2508</span><br></pre></td></tr></table></figure>
<p>可以根据版本号<code>commit id</code>指定回退到某个版本：<br><code>git reset --hard eede19</code><br>这里的版本号没必要写全，前几位就可以了，Git会自动去找，这样我们就又回到最新的版本了。Git版本的回退速度非常快，在Git内部有个指向当前版本的指针<code>HEAD</code>，所以我们在进行版本回退或回到最新的版本的时候，Git只是帮我们将<code>HEAD</code>指针指向某个版本号。</p>
<p>5.<code>git reflog</code>记录你的每一条命令，可以查看<code>commit id</code>,提交具体的操作和提交输入的信息，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@instance-my0hsclo:/usr/<span class="built_in">local</span>/ergzC0de<span class="comment"># git reflog </span></span><br><span class="line">eede197 HEAD@&#123;0&#125;: rebase finished: returning to refs/heads/master</span><br><span class="line">eede197 HEAD@&#123;1&#125;: pull --rebase origin master: init hexo repo</span><br><span class="line">1f25086 HEAD@&#123;2&#125;: pull --rebase origin master: checkout 1f2508638115730cb301f73c51b9971fca5c7f09</span><br><span class="line">fe14566 HEAD@&#123;3&#125;: commit (initial): init hexo repo</span><br></pre></td></tr></table></figure>

<p>6.<code>git checkout -- file</code>丢弃工作区的修改，文件修改还没有添加到暂存区，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -- readme.txt</span><br></pre></td></tr></table></figure>
<p>当文件修改后已经添加到了暂存区又作了修改，现在撤销修改就回到添加到暂存区后的状态。</p>
<p>7.<code>git reset HEAD file</code>把添加到暂存区的内容撤销，<code>HEAD</code>表示最新的版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@instance-my0hsclo:/usr/<span class="built_in">local</span>/learngit<span class="comment"># git reset HEAD readme.txt</span></span><br><span class="line">Unstaged changes after reset:</span><br><span class="line">M	readme.txt</span><br></pre></td></tr></table></figure>
<p>8.查看分支：<code>git branch</code></p>
<p>9.创建分支：<code>git branch &lt;name&gt;</code><br>我们创建新分支dev时，Git会新建一个指针叫<code>dev</code>，指向当前分支<code>master</code>的相同的提交点（HEAD指针指向的是当前分支），再把<code>HEAD</code>指向<code>dev</code>，之后的操作就在<code>dev</code>分支上完成，如图：</p>
<p><img src="/images/git_201912101316.png" alt="upload successful"></p>
<p>10.切换分支:<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code><br>创建并切换分支<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code></p>
<p>11.合并指定分支到当前分支上：<code>git merge &lt;name&gt;</code><br>当<code>dev</code>分支开发结束后，我们需要把<code>dev</code>分支合并到<code>master</code>（主分支）上，Git是如何操作的呢？Git直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并，这些操作都是靠指针来完成，文件并没有发生变化，如图：</p>
<p><img src="/images/git_201912101318.png" alt="upload successful"><br>分支合并时，Git默认使用<code>Fast forward</code>模式，使用这种模式，删除分支后，会丢掉分支的历史信息，使用<code>--no-ff</code>可以禁用<code>Fast forward</code>模式 <code>git merge --no-ff -m &quot;merge with no-ff&quot; dev</code>，这样每次合并会创建一个新的commit，加上<code>-m</code>参数，写上commit的描述。</p>
<p>12.删除分支:<code>git branch -d &lt;name&gt;</code><br>合并完分支后就可以删除<code>dev</code>分支，，删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后我们就剩下了一条<code>master</code>分支，如图：</p>
<p><img src="/images/201912101319.png" alt="upload successful"></p>
<p>13.查看分支合并图:<code>git log --graph</code></p>
<p>团队协作的分支开发流程图：</p>
<p><img src="/images/git_201912101326.png" alt="upload successful"></p>
<p><strong>本文链接：<a href="http://www.ergzcode.com/2019/11/26/git-common-commands-using.html">Git常用命令使用</a><br>欢迎转载，请注明出处！<br>参考：<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/896043488029600</a></strong></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx搭建HTTP文件服务器</title>
    <url>/2019/11/14/nginx-build-http-file-system.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><strong>Nginx(engine x)是一个高性能的HTTP和反向代理web服务器，同时能提供了IMAP/POP3/SMTP服务，Nginx的优点：</strong></p>
<h5 id="1-高性能，支持高并发连接"><a href="#1-高性能，支持高并发连接" class="headerlink" title="1.高性能，支持高并发连接"></a>1.高性能，支持高并发连接</h5><h5 id="2-低资源消耗，内存占用少"><a href="#2-低资源消耗，内存占用少" class="headerlink" title="2.低资源消耗，内存占用少"></a>2.低资源消耗，内存占用少</h5><h5 id="3-稳定性高"><a href="#3-稳定性高" class="headerlink" title="3.稳定性高"></a>3.稳定性高</h5><h5 id="4-配置简单"><a href="#4-配置简单" class="headerlink" title="4.配置简单"></a>4.配置简单</h5><h5 id="5-支持热部署"><a href="#5-支持热部署" class="headerlink" title="5.支持热部署"></a>5.支持热部署</h5><a id="more"></a>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="1-检查Nignx是否安装"><a href="#1-检查Nignx是否安装" class="headerlink" title="1.检查Nignx是否安装"></a>1.检查Nignx是否安装</h4><p><strong>使用以下命令检查Nginx服务器状态：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status nginx</span><br></pre></td></tr></table></figure>
<h4 id="2-安装Nginx-ubuntu"><a href="#2-安装Nginx-ubuntu" class="headerlink" title="2.安装Nginx(ubuntu)"></a>2.安装Nginx(ubuntu)</h4><p><strong>命令：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure>
<p><strong>Ubuntu安装之后的文件结构大致为：</strong></p>
<ul>
<li>所有的配置文件都在/etc/nginx下，并且每个虚拟主机已经安排在了/etc/nginx/sites-available下</li>
<li>程序文件/usr/sbin/nginx</li>
<li>日志在/var/log/nginx目录中</li>
<li>启动脚本nginx在/etc/init.d/下</li>
<li>默认的虚拟主机的目录设置在了/var/www/nginx-default (有的版本默认的虚拟主机的目录设置在了/var/www, 请参考/etc/nginx/sites-available里的配置)</li>
</ul>
<p><strong>在/etc/nginx目录下，nginx.conf是Nginx的核心配置文件，可以修改处理器数量、日志路径、pid文件等。在nginx.conf文件中有一段代码：<code>inxclude /etc/nginx/conf.d/*.conf</code>,这表示可以将自己的配置文件放在conf.d/中，Nginx会自动识别这个配置文件</strong></p>
<h4 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3.修改配置文件"></a>3.修改配置文件</h4><p><code>vim /etc/nginx/sites-available/default</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 8080 default_server;</span><br><span class="line">        listen [::]:8080 default_server;</span><br><span class="line">        <span class="comment">#root /usr/share/nginx/html;</span></span><br><span class="line">        root /usr/<span class="built_in">local</span>/data/file;</span><br><span class="line">        server_name _;</span><br><span class="line">        location / &#123;</span><br><span class="line">           <span class="comment"># First attempt to serve request as file, then</span></span><br><span class="line">           <span class="comment"># as directory, then fall back to displaying a 404.</span></span><br><span class="line">           try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ =404;</span><br><span class="line">           autoindex on;<span class="comment">#显示目录</span></span><br><span class="line">           autoindex_exact_size on;<span class="comment">#显示文件大小</span></span><br><span class="line">           autoindex_localtime on;<span class="comment">#显示文件时间</span></span><br><span class="line">           charset utf-8;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-启动nginx"><a href="#4-启动nginx" class="headerlink" title="4.启动nginx"></a>4.启动nginx</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/nginx start</span><br></pre></td></tr></table></figure>
<h4 id="5-浏览器访问"><a href="#5-浏览器访问" class="headerlink" title="5.浏览器访问"></a>5.浏览器访问</h4><p>浏览器打开：<code>http://localhost:8080</code>可以看到/data/file目录下的文件，点击可下载</p>
<h4 id="6-修改配置后重载"><a href="#6-修改配置后重载" class="headerlink" title="6.修改配置后重载"></a>6.修改配置后重载</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/nginx reload</span><br></pre></td></tr></table></figure>

<p><strong>本文链接：<a href="http://www.ergzcode.com/2019/11/14/nginx-build-http-file-system.html">Nginx搭建HTTP文件服务器</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>图解SQL的各种join用法</title>
    <url>/2019/11/09/diagrams-for-various-join-uses-of-sql.html</url>
    <content><![CDATA[<p><strong>下图展示了LEFT JOIN、RIGHT JOIN、INNER JOIN、OUTER JOIN 相关的 7 种用法</strong></p>
<p><img src="/images/sql_201912121520.png" alt="upload successful"></p>
<a id="more"></a>
<h4 id="具体分解如下："><a href="#具体分解如下：" class="headerlink" title="具体分解如下："></a>具体分解如下：</h4><h5 id="1-INNER-JOIN（内连接）"><a href="#1-INNER-JOIN（内连接）" class="headerlink" title="1.INNER JOIN（内连接）"></a>1.INNER JOIN（内连接）</h5><p><img src="/images/sql_201912121523.png" alt="upload successful"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;select_list&gt; </span><br><span class="line"><span class="keyword">FROM</span> Table_A A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> Table_B B</span><br><span class="line"><span class="keyword">ON</span> A.Key = B.Key</span><br></pre></td></tr></table></figure>
<h5 id="2-LEFT-JOIN（左连接）"><a href="#2-LEFT-JOIN（左连接）" class="headerlink" title="2.LEFT JOIN（左连接）"></a>2.LEFT JOIN（左连接）</h5><p><img src="/images/sql_201912121558.png" alt="upload successful"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;select_list&gt;</span><br><span class="line"><span class="keyword">FROM</span> Table_A A</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Table_B B</span><br><span class="line"><span class="keyword">ON</span> A.Key = B.Key</span><br></pre></td></tr></table></figure>
<h5 id="3-RIGHT-JOIN（右连接）"><a href="#3-RIGHT-JOIN（右连接）" class="headerlink" title="3.RIGHT JOIN（右连接）"></a>3.RIGHT JOIN（右连接）</h5><p><img src="/images/sql_201912121528.png" alt="upload successful"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;select_list&gt;</span><br><span class="line"><span class="keyword">FROM</span> Table_A A</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> Table_B B</span><br><span class="line"><span class="keyword">ON</span> A.Key = B.Key</span><br></pre></td></tr></table></figure>
<h5 id="4-OUTER-JOIN（外连接）"><a href="#4-OUTER-JOIN（外连接）" class="headerlink" title="4.OUTER JOIN（外连接）"></a>4.OUTER JOIN（外连接）</h5><p><img src="/images/sql_201912121532.png" alt="upload successful"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;select_list&gt;</span><br><span class="line"><span class="keyword">FROM</span> Table_A A</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Table_B B</span><br><span class="line"><span class="keyword">ON</span> A.Key = B.Key</span><br></pre></td></tr></table></figure>
<h5 id="5-LEFT-JOIN-EXCLUDING-INNER-JOIN（左连接-内连接）"><a href="#5-LEFT-JOIN-EXCLUDING-INNER-JOIN（左连接-内连接）" class="headerlink" title="5.LEFT JOIN EXCLUDING INNER JOIN（左连接-内连接）"></a>5.LEFT JOIN EXCLUDING INNER JOIN（左连接-内连接）</h5><p><img src="/images/sql_201912121531.png" alt="upload successful"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;select_list&gt; </span><br><span class="line"><span class="keyword">FROM</span> Table_A A</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Table_B B</span><br><span class="line"><span class="keyword">ON</span> A.Key = B.Key</span><br><span class="line"><span class="keyword">WHERE</span> B.Key <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></table></figure>
<h5 id="6-RIGHT-JOIN-EXCLUDING-INNER-JOIN（右连接-内连接）"><a href="#6-RIGHT-JOIN-EXCLUDING-INNER-JOIN（右连接-内连接）" class="headerlink" title="6.RIGHT JOIN EXCLUDING INNER JOIN（右连接-内连接）"></a>6.RIGHT JOIN EXCLUDING INNER JOIN（右连接-内连接）</h5><p><img src="/images/sql_201912121552.png" alt="upload successful"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;select_list&gt;</span><br><span class="line"><span class="keyword">FROM</span> Table_A A</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> Table_B B</span><br><span class="line"><span class="keyword">ON</span> A.Key = B.Key</span><br><span class="line"><span class="keyword">WHERE</span> A.Key <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></table></figure>
<h5 id="7-OUTER-JOIN-EXCLUDING-INNER-JOIN（外连接-内连接）"><a href="#7-OUTER-JOIN-EXCLUDING-INNER-JOIN（外连接-内连接）" class="headerlink" title="7.OUTER JOIN EXCLUDING INNER JOIN（外连接-内连接）"></a>7.OUTER JOIN EXCLUDING INNER JOIN（外连接-内连接）</h5><p><img src="/images/sql_201912121553.png" alt="upload successful"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;select_list&gt;</span><br><span class="line"><span class="keyword">FROM</span> Table_A A</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Table_B B</span><br><span class="line"><span class="keyword">ON</span> A.Key = B.Key</span><br><span class="line"><span class="keyword">WHERE</span> A.Key <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">OR</span> B.Key <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></table></figure>

<p><strong>原文链接：<a href="https://www.toutiao.com/i6766789647902179847" target="_blank" rel="noopener">看一张图秒懂SQL的各种JOIN用法</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>面试官：说一下Spring StringBuffer StringBuilder的区别</title>
    <url>/2019/01/26/java-interview-0003.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>先来看String类的实现</p>
<pre><code>public final class String implements      java.io.serializable,Comparable&lt;String&gt;,CharSequence{
    /** The value is used for character storage **/

    private final char value[];
}</code></pre><p>先来说说final关键字的作用</p>
<ul>
<li>final修饰类时，表明这个类不能被继承</li>
<li>final修饰方法时，表明方法不能被重写</li>
<li>final修饰变量时，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象</li>
</ul>
<a id="more"></a>

<p>可以看到String类和保存变量的value数组都被final修饰，表明String类是不可变的。</p>
<p>StringBuffer和StringBuilder都继承自AbstractStringBuilder类，看一下AbstractStringBuilder类的定义</p>
<pre><code>abstract class AbstractStringBuilder implements Appendable,CharSequence{
    /**
     *The value is userd for character storage
     */
    char[] value;
    }</code></pre><p>看到区别了吗？ value数组没有用private和final修饰，说明了StringBuffer和StringBuilder是可变的。</p>
<p>而StringBuilder和StringBuffer的方法是差不多的，只不过StringBuffer在方法上添加了<code>synchronized</code>关键字，所以在多线程环境下用StringBuffer来获得更高的效率。</p>
<p>看2个类中同一个方法的定义</p>
<p>StringBUffer类</p>
<pre><code>//StringBuffer append方法
@Override
public synchronized StringBuffer append(char[] str){
    toStringCache = null;
    super.append(str);    
    return this;
}</code></pre><p>StringBuilder类</p>
<pre><code>//StringBuilder append方法
@Override
public StringBuilder append(char[] str){
    super.append(str);
    return this;
}</code></pre><p>因为StringBuffer和StringBulider的实现类似，所以性能比较就落在String和StringBuilder之间了。</p>
<p>1.String是不可变对象，每次操作都会生成新的String对象，然后指针指向新的对象。</p>
<p>2.抽象类AbstractStringBuilder内部提供了一个自动扩容机制，当发现长度不够的时候，会自动进行扩容工作（具体扩容可以看源码，很容易理解），会创建一个新的数组，并将原来数组的数据复制到新的数组，不会创建新的对象，所以拼接字符串的效率高。</p>
<p>用源码证实一下</p>
<p>String类</p>
<pre><code>public String substring(int beginIndex) {
    if (beginIndex &lt; 0) {
        throw new StringIndexOutOfBoundsException(beginIndex);
    }
    int subLen = value.length - beginIndex;
    if (subLen &lt; 0) {
        throw new StringIndexOutOfBoundsException(subLen);
    }
    return (beginIndex == 0) ? this : new String(value, beginIndex, subLen);
}</code></pre><p>StringBuilder类</p>
<pre><code>public StringBuilder append(String str) {
    super.append(str);
    return this;
}</code></pre><p>介绍完毕，所以你应该知道这道题应该怎么答了</p>
<h3 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h3><p><strong>1. 说一下String StringBuffer StringBuilder的区别</strong></p>
<ul>
<li>都是final类，不能被继承</li>
<li>String长度是不可变的，StringBuffer和StringBuilder长度是可变的</li>
<li>StringBuffer是线程安全的，StringBuilder不是线程安全的。但他们的方法很相似，StringBuffer在方法上添加了<code>synchronized</code>关键字修饰，保证了线程安全</li>
<li>StringBuilder比StringBuffer拥有更好的性能</li>
<li>如果一个String类型的字符串，在编译时可以确定是一个字符串常量，则编译完成后，字符串会自动拼接成一个常量，此时String比StringBuffer和StringBuilder的性能好的多</li>
</ul>
<p>我用例子解释一下第五条</p>
<pre><code>String a = &quot;a&quot;;
String b = &quot;b&quot;;
String c = a+b;
String d = &quot;a&quot;+&quot;b&quot;+&quot;c&quot;;</code></pre><p>反编译class的文件是这样的</p>
<pre><code>String a = &quot;a&quot;;
String b = &quot;b&quot;;
(new StringBuilder()).append(a).append(b).toString();
String d = &quot;abc&quot;;</code></pre><p>看到String d,理解了吗？</p>
<p>同时看c的拼接过程，先生成一个StringBuilder对象，再调用2次append方法，最后再返回一个String对象，知道StringBuilder比String慢的愿意了吧。</p>
<p><strong>本文链接：<a href="http://www.ergzcode.com/2019/01/26/java-interview-0003.html">面试官：说一下Spring StringBuffer StringBuilder的区别</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>搞定Java面试题</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>面试官：说一下构造函数，静态代码块，构造代码块的加载顺序</title>
    <url>/2019/01/25/java-interview-0002.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><strong>构造函数，静态代码块，构造代码块的执行顺序</strong></p>
<pre><code>class Test{
    //静态代码块1
    static{
        System.out.println(&quot;我的静态代码块1&quot;);        
    }
    //构造代码块1
    {
        System.out.println(&quot;我的构造代码块1&quot;);
    }
    //构造函数1
    public Test(){
        System.out.println(&quot;我是无参数构造函数&quot;);            
    }
    //构造函数2
    public Test(int t){
        System.out.println(&quot;我是带参数构造函数，&quot;+&quot;参数是&quot;+t);            
    }

    //静态代码块2
    static{
        System.out.println(&quot;我的静态代码块2&quot;);        
    }
    //构造代码块2
    {
        System.out.println(&quot;我的构造代码块2&quot;);
    }
} </code></pre><a id="more"></a>
<p>来New一个Test类看看会输出什么？</p>
<pre><code>public class TestShow{
    public static void main(String[] args){
        /*创建第一个对象
         我是静态代码块1
         我的静态代码块2
         我的构造代码块1
         我的构造代码块2
         我是无参数构造函数
        */
        System.out.println(&quot;创建第一个对象：&quot;);
        Test test1 = new Test();

        /*创建第二个对象
          我的构造代码块1
          我的构造代码块2
          我是带参数构造函数，参数是5
        */
        System.out.println(&quot;创建第二个对象：&quot;);
        Test test2 = new Test(5);
    }    

}</code></pre><p>从输出我们可以总结处如下结论：</p>
<p>执行时间：<strong>静态代码块 &gt; 构造代码块 &gt; 构造函数，静态代码块只会在类被加载入内存时加载一次，构造代码块和构造函数都是在对象创建的时候执行，有几个对象就会执行几次</strong>，所以一般将加载配置文件的过程写在静态代码块中。</p>
<p><strong>没有继承的加载顺序</strong></p>
<p>先定义一个类作为成员变量，方便看打印输出</p>
<pre><code>public class Parameter {
    public Parameter(String str){
        System.out.println(str);
    }    
}</code></pre><p>写一个测试类</p>
<pre><code>public Test1{
    public static Prarmeter parameter1 =  new Parameter(&quot;静态成员变量&quot;);
    public Prarmeter parameter2 =  new Parameter(&quot;非静态成员变量&quot;);    
    public Test1(){
        System.out.println(&quot;构造函数&quot;);        
    }
    //静态代码块
    static{
        System.out.println(&quot;静态代码块&quot;);        
    }
    //构造代码块a
    {
        System.out.println(&quot;构造代码块a&quot;);
    }
    //构造代码块b
    {
        System.out.println(&quot;构造代码块b&quot;);
    }
}</code></pre><p>输出如下</p>
<pre><code>public class ForShow{
    public static void main(String[] args){
        /*静态成员变量
          静态代码块
          非静态成员变量
          构造代码块a    
          构造代码块b
          构造函数
        */
        new Test1();
        /*非静态成员变量
          构造代码块a    
          构造代码块b
          构造函数
        */
        new Test1();
    }    

}</code></pre><p><strong>可以看出静态成员变量和静态代码块一样，只会在类被加载到内存时加载唯一的一次</strong></p>
<p>改变一下Test类中定义的顺序，看看有什么变化。</p>
<pre><code>public Test2{

    //静态代码块
    static{
        System.out.println(&quot;静态代码块&quot;);        
    }
    //构造函数
    public Test2(){
        System.out.println(&quot;构造函数&quot;);        
    }
    //构造代码块b
    {
        System.out.println(&quot;构造代码块b&quot;);
    }
    //构造代码块a
    {
        System.out.println(&quot;构造代码块a&quot;);
    }
    public static Prarmeter parameter1 =  new Parameter(&quot;静态成员变量&quot;);
    public Prarmeter parameter2 =  new Parameter(&quot;非静态成员变量&quot;);    
}</code></pre><p>输出如下</p>
<pre><code>public class ForShow{
    public static void main(String[] args){

        /*静态代码块
          静态成员变量
          构造代码块b    
          构造代码块a
          非静态成员变量
          构造函数
        */
        new Test2();
    }    

}</code></pre><p><strong>没有继承情况的执行顺序</strong></p>
<ul>
<li>静态代码块和静态成员变量，加载的顺序由编写的顺序决定</li>
<li>构造代码块和非静态成员变量，加载顺序由编写顺序决定</li>
<li>构造函数</li>
</ul>
<p><strong>有继承情况的执行顺序</strong></p>
<p>定义父类</p>
<pre><code>public class Father{
    public static Prarmeter parameter1 =  new Parameter(&quot;父类静态成员变量&quot;);
    public Prarmeter parameter2 =  new Parameter(&quot;父类非静态成员变量&quot;);    

    public Father(){
        System.out.println(&quot;父类构造函数&quot;);        
    }
}</code></pre><p>定义子类</p>
<pre><code>public class Son extends Father{
    public static Prarmeter parameter1 =  new Parameter(&quot;子类静态成员变量&quot;);
    public Prarmeter parameter2 =  new Parameter(&quot;子类非静态成员变量&quot;);    

    public Son(){
        System.out.println(&quot;子类构造函数&quot;);        
    }
}</code></pre><p><strong>有继承情况的执行顺序</strong></p>
<ul>
<li>父类的静态（静态代码块，静态成员变量），子类的静态（静态代码块，静态成员变量）</li>
<li>父类的非静态（构造代码块，非静态成员变量），父类的构造函数</li>
<li>子类的非静态（构造代码块，非静态成员变量），子类的构造函数</li>
</ul>
<p>记住这几条规则足以应付这一类型的所有面试题</p>
<h3 id="常见的面试题"><a href="#常见的面试题" class="headerlink" title="常见的面试题"></a>常见的面试题</h3><p><strong>1.Java类定义如下，写出main函数执行后的输出结果</strong></p>
<pre><code>public class A{
    static {
        System.out.println(&quot;static A&quot;);
    }    
    public A(){
        System.out.println(&quot;class A&quot;);
    }
}

public class B extends A{
    public B(){
        System.out.println(&quot;class B&quot;);
    }
    public static void main(String[] args){
        B instance = new B();            
    }
}</code></pre><p>上面的知识点如果理解的很清楚的话，这个结果立马就能写出来</p>
<p>所以输出如下</p>
<pre><code>static A
class A
class B</code></pre><p><strong>2.问题是如果main函数中的代码如下呢？就是B这个类new了2次</strong></p>
<pre><code>public static void main(String[] args){
        B instance1 = new B();
        B instance2 = new B();            
    }</code></pre><p>万变不离其宗，输出如下</p>
<pre><code>static A
class A
class B
class A
class B</code></pre><p>因为静态成员变量和静态代码块只会在类被载入内存时加载一次。</p>
<p><strong>本文链接：<a href="http://www.ergzcode.com/2019/01/25/java-interview-0002.html">面试官：说一下构造函数，静态代码块，构造代码块的加载顺序</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>搞定Java面试题</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>面试官：说一下八种基本数据类型及其包装类吧</title>
    <url>/2019/01/24/java-interview-0001.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><strong>Java基本数据类型分为4大类：</strong></p>
<ul>
<li>整数型：byte,short,int,long</li>
<li>浮点型：flost,double</li>
<li>逻辑型：boolean</li>
<li>字符型：char</li>
</ul>
<table>
<thead>
<tr>
<th>原始类型</th>
<th>原始类型所占字节数</th>
<th>包装类</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>1个字节</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>2个字节</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>4个字节</td>
<td>Integer</td>
</tr>
<tr>
<td>long</td>
<td>8个字节</td>
<td>Long</td>
</tr>
<tr>
<td>float</td>
<td>4个字节</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>8个字节</td>
<td>Double</td>
</tr>
<tr>
<td>boolean</td>
<td>1个字节</td>
<td>Boolean</td>
</tr>
<tr>
<td>char</td>
<td>2个字节</td>
<td>Character</td>
</tr>
</tbody></table>
<a id="more"></a>
<h3 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h3><p>要注意的是基本数据的包装类很多都实现了享元模式。享元模式就是运用共享技术有效地支持大量细粒度对象的复用。用一个常见的面试题来解释</p>
<p><strong>1.判断如下代码的输出，并说出原因</strong></p>
<pre><code>Integer a1 = 40;
Integer a2 = 40;
System.out.println(a1==a2);

Integer a3 = 200;
Integer a4 = 200;
System.out.println(a3 == a4);</code></pre><p>由自动装箱和拆箱可以知道这2种写法是等价的</p>
<pre><code>Integer a1 = 40;
Integer a1 = Integer.valueOf(40);</code></pre><p>看一下Integer.valueOf(int i)的方法</p>
<pre><code>//...valueOf(int):Integer
public static Integer valueOf(int i) {
    assert IntegerCache.high &gt;= 127;
    if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)
        return IntegerCache.cache[i + (-IntegerCache.low)];
    return new Integer(i);
}

//...IntegerCache
private static class IntegerCache {
    static final int low = -128;
    static final int high;
    static final Integer cache[];

    static {
        // high value may be configured by property
        int h = 127;
        String integerCacheHighPropValue =
            sun.misc.VM.getSavedProperty(&quot;java.lang.Integer.IntegerCache.high&quot;);
        if (integerCacheHighPropValue != null) {
            int i = parseInt(integerCacheHighPropValue);
            i = Math.max(i, 127);
            // Maximum array size is Integer.MAX_VALUE
            h = Math.min(i, Integer.MAX_VALUE - (-low) -1);
        }
        high = h;

        cache = new Integer[(high - low) + 1];
        int j = low;
        for(int k = 0; k &lt; cache.length; k++)
            cache[k] = new Integer(j++);
    }

    private IntegerCache() {}
}</code></pre><p>IntegerCache是Integer的静态内部类，默认创建了[-128,127]的对象，并放到IntegerCache内部的一个cache数组中，在[-128,127]这个范围内的整数对象，不用创建。直接从IntegerCache中的cache数组中根据下标拿就可以了,超出这个范围的每次去创建新的对象。其他几种包装类型的常量池和Integer的思路差不多，源码都很相似。<br>所以答案如下：</p>
<pre><code>Integer a1 = 40;
Integer a2 = 40;
System.out.println(a1 == a2);//true

Integer a3 = 200;
Integer a4 = 200;
System.out.println(a3 == a4);//false</code></pre><p>包装类缓存数据范围如下：</p>
<table>
<thead>
<tr>
<th>包装类</th>
<th>缓存范围</th>
</tr>
</thead>
<tbody><tr>
<td>Byte</td>
<td>-128~127</td>
</tr>
<tr>
<td>Short</td>
<td>-128~127</td>
</tr>
<tr>
<td>Integer</td>
<td>-128~127</td>
</tr>
<tr>
<td>Long</td>
<td>-128~127</td>
</tr>
<tr>
<td>Character</td>
<td>0~127</td>
</tr>
</tbody></table>
<p><strong>2.Java一个char类型可以存储中文吗？</strong></p>
<p>可以，因为Java中使用了Unicode字符，不论是中文还是英文固定占用2个字节。</p>
<pre><code>char a = &apos;中&apos;；
// 中
System.out.println(a);    </code></pre><p><strong>3.什么是自动装箱，自动拆箱</strong></p>
<p>自动装箱就是Java自动将原始类型转换为对应的对象，比如将int的变量转换为Integer对象，这个过程就是装箱，反之将Integer对象转换为int类型的值，这个过程就是拆箱。因为这里的装箱和拆箱是自动进行的非人为转换的，所以就称作自动装箱和自动拆箱。</p>
<p>自动装箱时编译器调用ValueOf将原始类型值转换为对象，同时自动拆箱时，编译器通过调用类似intValue(),doubleValue()这类的方法将对象转换为原始类型值</p>
<pre><code>//jdk1.5之前的写法
Integer tempNum1 = Integer.valueOf(5);
int num1 = tempNum1.intValue();

//jdk1.5之后的写法，自动装箱和拆箱
Integer tempNum2= 5;
int num1 = tempNum2;</code></pre><p><strong>4.为什么要需要基本数据类型的包装类</strong></p>
<p>（1）Java是面向对象的语言，很多地方是需要使用的是对象而不是基本数据类型。例如，List,Map等容器类中基本数据类型是放不进去的。<br>（2）包装类在原先的基本数据类型上，新增加了很多方法，比如Integer.valueOf(String s)等</p>
<p><strong>5.既然包装类能完成所有的功能，为啥还需要基本数据类型</strong></p>
<p>基本数据类型基于数值，对象类型基于引用。基本数据类型存储在栈的局部变量表中。</p>
<p>而对象类型的变量则是存储堆中引用，实例放在堆中，因此对象类型的变量需要占用更多的内存空间，基本数据类型因为占用更少内存被保留下来。</p>
<p><strong>6.写出如下代码的输出</strong></p>
<pre><code>Integer i1 = 40;
Integer i2 = 40;
Integer i3 = 0;
Integer i4 = new Integer(40);
Integer i5 = new Integer(40);
Integer i6 = new Integer(0);

System.out.println(i1 == i2);
System.out.println(i1 == i2 + i3);
System.out.println(i1 == i4);
System.out.println(i4 == i5);
System.out.println(i4 == i5 + i6);
System.out.println(40 == i5 + i6);</code></pre><p>输出及解释如下</p>
<pre><code>Integer i1 = 40;
Integer i2 = 40;
Integer i3 = 0;
Integer i4 = new Integer(40);
Integer i5 = new Integer(40);
Integer i6 = new Integer(0);

System.out.println(i1 == i2);//true
//Integer.valueOf()用了常量池，看上面的源码
//比较是内存地址

System.out.println(i1 == i2 + i3);//true
// + 操作会导致左右两边都转换为基本数据类型
//比较是值

System.out.println(i1 == i4);//false
//Integer.valueOf()使用常量池中的对象
//new Integer每次都会创建新对象
//比较是内存地址

System.out.println(i4 == i5);//false
//new关键字会创建新的实例所以这是2个不同的对象
//比较是内存地址

System.out.println(i4 == i5 + i6);//true
//解释在下面，比较的是值


System.out.println(40 == i5 + i6);//true
//解释在下面，比较的是值</code></pre><p>语句i4 = i5 + i6,因为这个 + 操作符不适用于Integer对象，首先i5和i6进行了自动拆箱的操作，进行数值相加，即i4 == 40。然后Integer对象无法与数值进行直接比较，所以i4自动拆箱转为int数据类型，值为40，最终这条语句转为40 == 40进行数值的比较。</p>
<p><strong>本文链接：<a href="http://www.ergzcode.com/2019/01/24/java-interview-0001.html">面试官：说一下八种基本数据类型及其包装类吧</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>搞定Java面试题</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库优化，看这篇就够了</title>
    <url>/2018/10/18/mysql-database-optimization-this-article-is-enough.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>数据库优化一方面是找出系统的瓶颈,提高MySQL数据库的整体性能,而另一方面需要合理的结构设计和参数调整,以提高用户的相应速度,同时还要尽可能的节约系统资源,以便让系统提供更大的负荷.</strong></p>
<h3 id="1-优化一览图"><a href="#1-优化一览图" class="headerlink" title="1. 优化一览图"></a>1. 优化一览图</h3><p><img src="/images/mysql_201912182301.png" alt="upload successful"></p>
<a id="more"></a>
<h3 id="2-优化"><a href="#2-优化" class="headerlink" title="2. 优化"></a>2. 优化</h3><p>笔者将优化分为了两大类,软优化和硬优化,软优化一般是操作数据库即可,而硬优化则是操作服务器硬件及参数设置.</p>
<h4 id="2-1-软优化"><a href="#2-1-软优化" class="headerlink" title="2.1 软优化"></a>2.1 软优化</h4><h5 id="2-1-1-查询语句优化"><a href="#2-1-1-查询语句优化" class="headerlink" title="2.1.1 查询语句优化"></a>2.1.1 查询语句优化</h5><p>1.首先我们可以用EXPLAIN或DESCRIBE(简写:DESC)命令分析一条查询语句的执行信息.<br>2.例:<strong>DESC SELECT * FROM user</strong><br>显示：<br><img src="/images/mysql_201912182306.png" alt="upload successful"><br>其中会显示索引和查询数据读取数据条数等信息.</p>
<h5 id="2-1-2-优化子查询"><a href="#2-1-2-优化子查询" class="headerlink" title="2.1.2 优化子查询"></a>2.1.2 优化子查询</h5><p>在MySQL中,尽量使用JOIN来代替子查询.因为子查询需要嵌套查询,嵌套查询时会建立一张临时表,临时表的建立和删除都会有较大的系统开销,而连接查询不会创建临时表,因此效率比嵌套子查询高.</p>
<h5 id="2-1-3-使用索引"><a href="#2-1-3-使用索引" class="headerlink" title="2.1.3 使用索引"></a>2.1.3 使用索引</h5><p>索引是提高数据库查询速度最重要的方法之一,关于索引可以参高笔者&lt;MySQL数据库索引&gt;一文,介绍比较详细,此处记录使用索引的三大注意事项:<br>    1.LIKE关键字匹配’%’开头的字符串,不会使用索引.<br>    2.OR关键字的两个字段必须都是用了索引,该查询才会使用索引.<br>    3.使用多列索引必须满足最左匹配.</p>
<h5 id="2-1-4-分解表"><a href="#2-1-4-分解表" class="headerlink" title="2.1.4 分解表"></a>2.1.4 分解表</h5><p>对于字段较多的表,如果某些字段使用频率较低,此时应当,将其分离出来从而形成新的表,</p>
<h5 id="2-1-5-中间表"><a href="#2-1-5-中间表" class="headerlink" title="2.1.5 中间表"></a>2.1.5 中间表</h5><p>对于将大量连接查询的表可以创建中间表,从而减少在查询时造成的连接耗时.</p>
<h5 id="2-1-6-增加冗余字段"><a href="#2-1-6-增加冗余字段" class="headerlink" title="2.1.6 增加冗余字段"></a>2.1.6 增加冗余字段</h5><p>类似于创建中间表,增加冗余也是为了减少连接查询.</p>
<h5 id="2-1-7-分析表-检查表-优化表"><a href="#2-1-7-分析表-检查表-优化表" class="headerlink" title="2.1.7 分析表,检查表,优化表"></a>2.1.7 分析表,检查表,优化表</h5><p>分析表主要是分析表中关键字的分布,检查表主要是检查表中是否存在错误,优化表主要是消除删除或更新造成的表空间浪费.</p>
<p>一.分析表: 使用 <strong>ANALYZE</strong> 关键字,如<strong>ANALYZE TABLE user;</strong><br><img src="/images/mysql_201912182311.png" alt="upload successful"><br>1.Op:表示执行的操作.<br>2.Msg_type:信息类型,有status,info,note,warning,error.<br>3.Msg_text:显示信息.</p>
<p>二.检查表: 使用<strong>CHECK</strong>关键字,如<strong>CHECK TABLE user [option]</strong><br>option只对MyISAM有效,共五个参数值:<br>1.QUICK:不扫描行,不检查错误的连接.<br>2.FAST:只检查没有正确关闭的表.<br>3.CHANGED:只检查上次检查后被更改的表和没被正确关闭的表.<br>4.MEDIUM:扫描行,以验证被删除的连接是有效的,也可以计算各行关键字校验和.<br>5.EXTENDED:最全面的的检查,对每行关键字全面查找.</p>
<p>三.优化表:使用<strong>OPTIMIZE</strong>关键字,如<strong>OPTIMIZE [LOCAL|NO_WRITE_TO_BINLOG] TABLE user;</strong><br>LOCAL|NO_WRITE_TO_BINLOG都是表示不写入日志.,优化表只对VARCHAR,BLOB和TEXT有效,通过OPTIMIZE TABLE语句可以消除文件碎片,在执行过程中会加上只读锁.</p>
<h4 id="2-2-硬优化"><a href="#2-2-硬优化" class="headerlink" title="2.2 硬优化"></a>2.2 硬优化</h4><h5 id="2-2-1-硬件三件套"><a href="#2-2-1-硬件三件套" class="headerlink" title="2.2.1 硬件三件套"></a>2.2.1 硬件三件套</h5><p>1.配置多核心和频率高的cpu,多核心可以执行多个线程.<br>2.配置大内存,提高内存,即可提高缓存区容量,因此能减少磁盘I/O时间,从而提高响应速度.<br>3.配置高速磁盘或合理分布磁盘:高速磁盘提高I/O,分布磁盘能提高并行操作的能力.</p>
<h5 id="2-2-2-优化数据库参数"><a href="#2-2-2-优化数据库参数" class="headerlink" title="2.2.2 优化数据库参数"></a>2.2.2 优化数据库参数</h5><p>优化数据库参数可以提高资源利用率,从而提高MySQL服务器性能.MySQL服务的配置参数都在my.cnf或my.ini,下面列出性能影响较大的几个参数.</p>
<p>1.key_buffer_size:索引缓冲区大小<br>2.table_cache:能同时打开表的个数<br>3.query_cache_size和query_cache_type:前者是查询缓冲区大小,后者是前面参数的开关,0表示不使用缓冲区,1表示使用缓冲区,但可以在查询中使用4.SQL_NO_CACHE表示不要使用缓冲区,2表示在查询中明确指出使用缓冲区才用缓冲区,即SQL_CACHE.<br>5.sort_buffer_size:排序缓冲区</p>
<p><strong>传送门:<a href="https://www.mysql.com/cn/why-mysql/performance/index.html" target="_blank" rel="noopener">更多参数</a></strong></p>
<h5 id="2-2-3-分库分表"><a href="#2-2-3-分库分表" class="headerlink" title="2.2.3 分库分表"></a>2.2.3 分库分表</h5><p>因为数据库压力过大，首先一个问题就是高峰期系统性能可能会降低，因为数据库负载过高对性能会有影响。另外一个，压力过大把你的数据库给搞挂了怎么办？所以此时你必须得对系统做分库分表 + 读写分离，也就是把一个库拆分为多个库，部署在多个数据库服务上，这时作为主库承载写入请求。然后每个主库都挂载至少一个从库，由从库来承载读请求。<br><img src="/images/mysql_201912182321.png" alt="upload successful"></p>
<h5 id="2-2-4-缓存集群"><a href="#2-2-4-缓存集群" class="headerlink" title="2.2.4 缓存集群"></a>2.2.4 缓存集群</h5><p><img src="/images/mysql_201912182322.png" alt="upload successful"></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>一个完整而复杂的高并发系统架构中，一定会包含各种复杂的自研基础架构系统和各种精妙的架构设计.因此一篇小文顶多具有抛砖引玉的效果,但是数据库优化的思想差不多就这些了.</p>
<p><strong>原文链接:<a href="https://segmentfault.com/a/1190000018631870" target="_blank" rel="noopener">MySQL数据库优化</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat优化之修改内存配置</title>
    <url>/2018/10/18/tomcat-modifying-memory-configuration-for-optimization.html</url>
    <content><![CDATA[<h5 id="一、配置"><a href="#一、配置" class="headerlink" title="一、配置"></a>一、配置</h5><p><strong>Tomcat/conf/server.xml修改配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">redirectPort</span>=<span class="string">"8443"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">URIEncoding</span>=<span class="string">"UTF-8"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">minSpareThreads</span>=<span class="string">"25"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxSpareThreads</span>=<span class="string">"300"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxThreads</span>=<span class="string">"500"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">acceptCount</span>=<span class="string">"500"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">connectionTimeout</span>=<span class="string">"30000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">enableLookups</span>=<span class="string">"false"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="二、参数说明"><a href="#二、参数说明" class="headerlink" title="二、参数说明"></a>二、参数说明</h5><a id="more"></a>
<p><strong>maxIdleTime</strong>：最大空闲时间，超过这个空闲时间，且线程数大于minSpareThreads的，都会被回收，默认值1分钟（60000ms）；</p>
<p><strong>minSpareThreads</strong>：最小空闲线程数，任何情况都会存活的线程数，即便超过了最大空闲时间，也不会被回收，默认值4；</p>
<p><strong>maxSpareThreads</strong>：最大空闲线程数，在最大空闲时间（maxIdleTime）内活跃过，此时空闲，当空闲时间大于maxIdleTime则被回收，小则继续存活，等待被调度，默认值50；</p>
<p><strong>maxThreads</strong>：最大线程数，大并发请求时，tomcat能创建来处理请求的最大线程数，超过则放入请求队列中进行排队，默认值为200；</p>
<p><strong>acceptCount</strong>：当最大线程数（maxThreads）被使用完时，可以放入请求队列排队个数，超过这个数返回connection refused（请求被拒绝），一般设置和maxThreads一样，不过这个具体需要根据自己的应用实际访问峰值和平均值来权衡，默认值为100；</p>
<p><strong>connectionTimeout</strong>：网络连接超时，假设设置为0表示永不超时，这样设置隐患巨大，通常可设置为30000ms，默认60000ms；</p>
<p>Windows Tomcat允许每个进程maxThreads（最大线程数）2000，Linux Tomcat允许每个进程maxThreads（最大线程数）1000</p>
<p><img src="/images/tomcat_201912182226.png" alt="upload successful"></p>
<p><strong>请看下面三种情况</strong><br>情况1：接受一个请求，此时tomcat起动的线程数没有到达maxThreads，tomcat会起动一个线程来处理此请求。</p>
<p>情况2：接受一个请求，此时tomcat起动的线程数已经到达maxThreads，tomcat会把此请求放入等待队列，等待空闲线程。</p>
<p>情况3：接受一个请求，此时tomcat起动的线程数已经到达maxThreads，等待队列中的请求个数也达到了acceptCount，此时tomcat会直接拒绝此次请求，返回connection refused</p>
<p><strong>maxThreads如何配置</strong><br>一般的服务器操作都包括两方面：1计算（主要消耗cpu），2等待（io、数据库等）。</p>
<p>第一种极端情况，如果我们的操作是纯粹的计算，那么系统响应时间的主要限制就是cpu的运算能力，此时maxThreads应该尽量设的小，降低同一时间内争抢cpu的线程个数，可以提高计算效率，提高系统的整体处理能力。</p>
<p>第二种极端情况，如果我们的操作纯粹是IO或者数据库，那么响应时间的主要限制就变为等待外部资源，此时maxThreads应该尽量设的大，这样才能提高同时处理请求的个数，从而提高系统整体的处理能力。此情况下因为tomcat同时处理的请求量会比较大，所以需要关注一下tomcat的虚拟机内存设置和linux的open file限制。</p>
<p>我在测试时遇到一个问题，maxThreads我设置的比较大比如3000，当服务的线程数大到一定程度时，一般是2000出头，单次请求的响应时间就会急剧的增加，百思不得其解这是为什么，四处寻求答案无果，最后我总结的原因可能是cpu在线程切换时消耗的时间随着线程数量的增加越来越大，cpu把大多数时间都用来在这2000多个线程直接切换上了，当然cpu就没有时间来处理我们的程序了。以前一直简单的认为多线程=高效率。其实多线程本身并不能提高cpu效率，线程过多反而会降低cpu效率。当cpu核心数&lt;线程数时，cpu就需要在多个线程直接来回切换，以保证每个线程都会获得cpu时间，即通常我们说的并发执行。所以maxThreads的配置绝对不是越大越好。</p>
<p>现实应用中，我们的操作都会包含以上两种类型（计算、等待），所以maxThreads的配置并没有一个最优值，一定要根据具体情况来配置。最好的做法是：在不断测试的基础上，不断调整、优化，才能得到最合理的配置。acceptCount的配置，我一般是设置的跟maxThreads一样大，这个值应该是主要根据应用的访问峰值与平均值来权衡配置的。如果设的较小，可以保证接受的请求较快相应，但是超出的请求可能就直接被拒绝。如果设的较大，可能就会出现大量的请求超时的情况，因为我们系统的处理能力是一定的。</p>
<p><strong>原文链接：<a href="https://www.toutiao.com/a6771285271473291783" target="_blank" rel="noopener">Tomcat修改内存配置</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>web服务器</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkdownPad2.5注册码</title>
    <url>/2016/05/15/markdownpad2.5-license-key.html</url>
    <content><![CDATA[<p><strong>邮箱 <a href="mailto:Soar360@live.com" target="_blank" rel="noopener">Soar360@live.com</a></strong></p>
<p><strong>注册码</strong><br>GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3<br>YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO<br>0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTR<br>KfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==</p>
<a id="more"></a>
<p><strong>输入Email address和license key</strong><br><img src="/images/markdown_201912251552.png" alt="upload successful"></p>
<p><strong>注册完成</strong><br><img src="/images/markdown_201912251554.png" alt="upload successful"></p>
<p><strong>本文链接：<a href="http://www.ergzcode.com/2016/05/15/markdownpad2.5-license-key.html">MarkdownPad2.5注册码</a><br>欢迎转载，请注明出处！</strong></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
