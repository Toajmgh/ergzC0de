{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"source/images/pasted-0.png","path":"images/pasted-0.png","modified":0,"renderable":0},{"_id":"source/images/201912101319.png","path":"images/201912101319.png","modified":1,"renderable":0},{"_id":"source/images/git_201912101316.png","path":"images/git_201912101316.png","modified":1,"renderable":0},{"_id":"source/images/git_201912101318.png","path":"images/git_201912101318.png","modified":1,"renderable":0},{"_id":"source/images/git_201912101326.png","path":"images/git_201912101326.png","modified":1,"renderable":0}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1574850050862},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1574850050862},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1574850050862},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1574850050862},{"_id":"themes/landscape/_config.yml","hash":"94de86a5f439689c5f38f74a14041c3906cffcf3","modified":1575943855000},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1574850050866},{"_id":"source/_posts/Test-Hexo-Writing-Title.md","hash":"cabc3f2e2c833a12ae57b0bdb690c42fcbaa251c","modified":1575764341000},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1574850050862},{"_id":"source/_posts/how-to-go-to-school.md","hash":"8145d507a9b98008edccbb676ce247816cc1382d","modified":1575780436787},{"_id":"source/about/me.md","hash":"5914a40be00f0312c6e23ab94a2bae34ebf0eba1","modified":1575941328921},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1574850050862},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1574850050862},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1574850050862},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1574850050862},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1574850050862},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1574850050862},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1574850050862},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1574850050862},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1574850050862},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1574850050862},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1574850050862},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1574850050862},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1574850050866},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1574850050866},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1574850050866},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1574850050866},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1574850050866},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1574850050866},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1574850050866},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1574850050866},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1574850050866},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1574850050866},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1574850050866},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1574850050866},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1574850050866},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1574850050866},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1574850050866},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1574850050866},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"0a1729199ce0c53d465347fd1ffb305ff74d9ee4","modified":1575945577832},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1574850050866},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1574850050866},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"d4028e7d87d4b0b407f53fc2eff2c90cf24213a6","modified":1575945234432},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1574850050866},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1574850050866},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1574850050866},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1574850050866},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1574850050866},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1574850050866},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1574850050878},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1574850050878},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1574850050878},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1574850050878},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1574850050878},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1574850050878},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1574850050878},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1574850050878},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1574850050878},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1574850050878},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1574850050878},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1574850050866},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1574850050866},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1574850050866},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1574850050866},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1574850050866},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1574850050866},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1574850050866},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1574850050866},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1574850050866},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1574850050866},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1574850050866},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1574850050866},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1574850050866},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1574850050866},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1574850050866},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1574850050866},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1574850050866},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1574850050866},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1574850050866},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1574850050870},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1574850050878},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1574850050878},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1574850050878},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1574850050878},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1574850050878},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1574850050878},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1574850050878},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1574850050878},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1574850050870},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1574850050878},{"_id":"public/content.json","hash":"69e3966474fd8a030aecbfc83474c18789eab59a","modified":1575956032662},{"_id":"public/search.xml","hash":"e00f758624fbd6b8b8c42b0f48d548efd878e6ef","modified":1575956032662},{"_id":"public/about/me.html","hash":"8ff4b6a6515900fed5a93d03cd9bc30df95d7cef","modified":1575956032662},{"_id":"public/2019/12/08/Test-Hexo-Writing-Title.html","hash":"a52db50e3ab5b9af669d14eee76ddc16329b53d9","modified":1575779300134},{"_id":"public/2019/11/27/hello-world.html","hash":"3bb36b940aa6a47cc1e2d4cedb18ef25b57787d0","modified":1575944180903},{"_id":"public/2019/11/26/how-to-go-to-school.html","hash":"afa0b76330d7b1b38016adef4c6c6889049c9038","modified":1575950356261},{"_id":"public/archives/index.html","hash":"95d561995df12a25f6bfac9abc606cc4119b4c15","modified":1575956032662},{"_id":"public/archives/2019/index.html","hash":"b37daddc61542c33a4ec63cc55a2b02b28016e9e","modified":1575956032662},{"_id":"public/archives/2019/11/index.html","hash":"d69694c98fb6f45a502933061649abc4b13b8ede","modified":1575956032662},{"_id":"public/archives/2019/12/index.html","hash":"4a065ffa618ab04d1eb545a14933ed953f863940","modified":1575956032662},{"_id":"public/index.html","hash":"6bea5450082dc5ebc5b088e14a37d0f4fb62fc34","modified":1575956032662},{"_id":"public/tags/java/index.html","hash":"bec44be3c6a7a630976331040a3941e394cf915e","modified":1575951386504},{"_id":"public/tags/python/index.html","hash":"4272b931f6d64216713b71f46e900140dcf82523","modified":1575951386504},{"_id":"source/_posts/test-hexo-writing-title.md","hash":"79a30f4f7c043c9fcbec5d3001d6b3e72938f665","modified":1575780859120},{"_id":"public/2019/12/08/test-hexo-writing-title.html","hash":"69a6b217fbcd3dcf44a446ed97683bffadf03916","modified":1575780871122},{"_id":"source/_posts/pm2-watch-hexo-process.md","hash":"feb824423fd02ee7169cafb65daec7f536aebd2a","modified":1575948911383},{"_id":"public/2019/12/08/pm2-watch-hexo-process.html","hash":"404a131864ddf45212f5892015a0bf37cc055df3","modified":1575956032662},{"_id":"public/categories/shell/index.html","hash":"c2ed3da6a00601411641428a65cedb1f56966247","modified":1575956032662},{"_id":"public/tags/pm2/index.html","hash":"e660c7dcee722d1f4871369b282532dd996a7ede","modified":1575956032662},{"_id":"public/tags/hexo/index.html","hash":"4ec2c2e52bd669c50994299ac7f91c1d00a3d253","modified":1575956032662},{"_id":"source/_posts/pm2-common-command-introduction.md","hash":"1c62fa3ac49ff041177c7c2bd3498f8692fbc05c","modified":1575950241695},{"_id":"source/images/pasted-0.png","hash":"0373b3917904dd1e57c313e21ff8f7cb271592f5","modified":1575949857995},{"_id":"public/2019/12/10/pm2-common-command-introduction.html","hash":"b528d44df9df7e8a78f736a5a097644df175532f","modified":1575950356261},{"_id":"public/images/pasted-0.png","hash":"0373b3917904dd1e57c313e21ff8f7cb271592f5","modified":1575950356261},{"_id":"source/_posts/git-common-commands-using.md","hash":"c144b9e7a33b8163cfdf5e43f5b7eebaf1fc625c","modified":1575955900968},{"_id":"source/_posts/pm2-common-commands-introduction.md","hash":"574835cfb2a3d8bd8489d2e69f6970ffc6f1edd6","modified":1575951311515},{"_id":"public/2019/12/10/pm2-common-commands-introduction.html","hash":"61d7c100d43452f4e88339fae480a5453bd4e366","modified":1575956032662},{"_id":"public/2019/11/26/git-common-commands-using.html","hash":"74502a514470de0f3c9693623f272a45b5c18b10","modified":1575956032662},{"_id":"public/categories/linux/index.html","hash":"cc4aa850abf66fc6fac70979e55914ff84d7d3e6","modified":1575956032662},{"_id":"source/images/201912101319.png","hash":"0742138fd3003f4cdda1c718db37c0d48d883b89","modified":1575955201332},{"_id":"source/images/git_201912101316.png","hash":"ef0c2b4a33c998c0712069f99f48ffeebe170ec2","modified":1575954980328},{"_id":"source/images/git_201912101318.png","hash":"c144b63e8ee57e55e4285a5e786379ffbe96604c","modified":1575955124244},{"_id":"source/images/git_201912101326.png","hash":"0b1ade71a0f9e024e999f350a22c0ad23d88dd49","modified":1575955571816},{"_id":"public/categories/git/index.html","hash":"a98ff9ae016fa29350ee7497636d8def8f35542f","modified":1575956032662},{"_id":"public/tags/git/index.html","hash":"95921bf43c3d24f8708788d856d6fae6c98eaa80","modified":1575956032662},{"_id":"public/images/201912101319.png","hash":"0742138fd3003f4cdda1c718db37c0d48d883b89","modified":1575956032662},{"_id":"public/images/git_201912101316.png","hash":"ef0c2b4a33c998c0712069f99f48ffeebe170ec2","modified":1575956032662},{"_id":"public/images/git_201912101318.png","hash":"c144b63e8ee57e55e4285a5e786379ffbe96604c","modified":1575956032662},{"_id":"public/images/git_201912101326.png","hash":"0b1ade71a0f9e024e999f350a22c0ad23d88dd49","modified":1575956032662}],"Category":[{"name":"shell","_id":"ck3z8h59f00012hd25tvveij3"},{"name":"linux","_id":"ck3zcrkwh0003p0d26n7o9ua8"},{"name":"git","_id":"ck3zfj5ts0000p7d2f8nvcarp"}],"Data":[],"Page":[{"title":"About me","date":"2019-11-26T05:12:36.000Z","_content":"","source":"about/me.md","raw":"title: About me\ndate: 2019-11-26 13:12:36\n---\n","updated":"2019-12-10T01:28:48.921Z","path":"about/me.html","_id":"ck3wh0tfa00016kd28qk3bhne","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"PM2守护hexo的进程","s":"Test Hexo Writing Title","author":"ergz","date":"2019-12-08T00:01:00.000Z","_content":"在服务器上安装好了hexo，执行hexo sever来启动它的服务，会发现过了一段时间hexo的进程总是莫名其妙的挂掉，然后导致网站无法访问。从网上搜索了一些解决方案，发现能使用PM2来接管hexo的后台进程，从而让hexo进程一直常驻后台。\n\n操作步骤如下：\n##### 1.首先安装pm2\n``` bash\nnpm install -g pm2\n```\n##### 2.写一个shell hexo_daemon.js\n``` bash\n//run\nconst { exec } = require('child_process')\nexec('hexo server -p 80 & ',(error, stdout, stderr) => {\n        if(error){\n                console.log('exec error: ${error}')\n                return\n        }\n        console.log('stdout: ${stdout}');\n        console.log('stderr: ${stderr}');\n})\n\n```\n##### 3.在根目录下执行shell\n\n``` bash\npm2 start hexo_daemon.js\n```\n参考:\n[PM2使用](https://www.jianshu.com/p/4a3d4d144ab2)","source":"_posts/pm2-watch-hexo-process.md","raw":"title: PM2守护hexo的进程\ns: Test Hexo Writing Title\ntags:\n  - pm2\n  - hexo\ncategories:\n  - shell\nauthor: ergz\ndate: 2019-12-08 08:01:00\n---\n在服务器上安装好了hexo，执行hexo sever来启动它的服务，会发现过了一段时间hexo的进程总是莫名其妙的挂掉，然后导致网站无法访问。从网上搜索了一些解决方案，发现能使用PM2来接管hexo的后台进程，从而让hexo进程一直常驻后台。\n\n操作步骤如下：\n##### 1.首先安装pm2\n``` bash\nnpm install -g pm2\n```\n##### 2.写一个shell hexo_daemon.js\n``` bash\n//run\nconst { exec } = require('child_process')\nexec('hexo server -p 80 & ',(error, stdout, stderr) => {\n        if(error){\n                console.log('exec error: ${error}')\n                return\n        }\n        console.log('stdout: ${stdout}');\n        console.log('stderr: ${stderr}');\n})\n\n```\n##### 3.在根目录下执行shell\n\n``` bash\npm2 start hexo_daemon.js\n```\n参考:\n[PM2使用](https://www.jianshu.com/p/4a3d4d144ab2)","slug":"pm2-watch-hexo-process","published":1,"updated":"2019-12-10T03:35:11.383Z","_id":"ck3z8h59600002hd2f2uuhb5l","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在服务器上安装好了hexo，执行hexo sever来启动它的服务，会发现过了一段时间hexo的进程总是莫名其妙的挂掉，然后导致网站无法访问。从网上搜索了一些解决方案，发现能使用PM2来接管hexo的后台进程，从而让hexo进程一直常驻后台。</p>\n<p>操作步骤如下：</p>\n<h5 id=\"1-首先安装pm2\"><a href=\"#1-首先安装pm2\" class=\"headerlink\" title=\"1.首先安装pm2\"></a>1.首先安装pm2</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g pm2</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-写一个shell-hexo-daemon-js\"><a href=\"#2-写一个shell-hexo-daemon-js\" class=\"headerlink\" title=\"2.写一个shell hexo_daemon.js\"></a>2.写一个shell hexo_daemon.js</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//run</span><br><span class=\"line\">const &#123; <span class=\"built_in\">exec</span> &#125; = require(<span class=\"string\">'child_process'</span>)</span><br><span class=\"line\"><span class=\"built_in\">exec</span>(<span class=\"string\">'hexo server -p 80 &amp; '</span>,(error, stdout, stderr) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(error)&#123;</span><br><span class=\"line\">                console.log(<span class=\"string\">'exec error: $&#123;error&#125;'</span>)</span><br><span class=\"line\">                <span class=\"built_in\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        console.log(<span class=\"string\">'stdout: $&#123;stdout&#125;'</span>);</span><br><span class=\"line\">        console.log(<span class=\"string\">'stderr: $&#123;stderr&#125;'</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-在根目录下执行shell\"><a href=\"#3-在根目录下执行shell\" class=\"headerlink\" title=\"3.在根目录下执行shell\"></a>3.在根目录下执行shell</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start hexo_daemon.js</span><br></pre></td></tr></table></figure>\n<p>参考:<br><a href=\"https://www.jianshu.com/p/4a3d4d144ab2\" target=\"_blank\" rel=\"noopener\">PM2使用</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在服务器上安装好了hexo，执行hexo sever来启动它的服务，会发现过了一段时间hexo的进程总是莫名其妙的挂掉，然后导致网站无法访问。从网上搜索了一些解决方案，发现能使用PM2来接管hexo的后台进程，从而让hexo进程一直常驻后台。</p>\n<p>操作步骤如下：</p>\n<h5 id=\"1-首先安装pm2\"><a href=\"#1-首先安装pm2\" class=\"headerlink\" title=\"1.首先安装pm2\"></a>1.首先安装pm2</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g pm2</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-写一个shell-hexo-daemon-js\"><a href=\"#2-写一个shell-hexo-daemon-js\" class=\"headerlink\" title=\"2.写一个shell hexo_daemon.js\"></a>2.写一个shell hexo_daemon.js</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//run</span><br><span class=\"line\">const &#123; <span class=\"built_in\">exec</span> &#125; = require(<span class=\"string\">'child_process'</span>)</span><br><span class=\"line\"><span class=\"built_in\">exec</span>(<span class=\"string\">'hexo server -p 80 &amp; '</span>,(error, stdout, stderr) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(error)&#123;</span><br><span class=\"line\">                console.log(<span class=\"string\">'exec error: $&#123;error&#125;'</span>)</span><br><span class=\"line\">                <span class=\"built_in\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        console.log(<span class=\"string\">'stdout: $&#123;stdout&#125;'</span>);</span><br><span class=\"line\">        console.log(<span class=\"string\">'stderr: $&#123;stderr&#125;'</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-在根目录下执行shell\"><a href=\"#3-在根目录下执行shell\" class=\"headerlink\" title=\"3.在根目录下执行shell\"></a>3.在根目录下执行shell</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start hexo_daemon.js</span><br></pre></td></tr></table></figure>\n<p>参考:<br><a href=\"https://www.jianshu.com/p/4a3d4d144ab2\" target=\"_blank\" rel=\"noopener\">PM2使用</a></p>\n"},{"title":"Git常用命令使用","date":"2019-11-26T11:26:00.000Z","_content":"1.查看工作区的状态：`git status`\n\n2.查看文件具体修改了什么内容：`git diff file`\n\n3.查看提交的历史记录，该命令显示从最近到最远的历史记录：`git log`，如果嫌输出信息太多，可以试试加上`--pretty=oneline`参数：`git log --graph --pretty=oneline --abbrev-commit`，命令如下：\n```bash\ngit log --graph --pretty=oneline --abbrev-commit\neede197ffb267fbda60482da9554ba654ff523e3 init hexo repo\n1f2508638115730cb301f73c51b9971fca5c7f09 Initial commit\n```\n上面输出的一大串数字其实是 commit id(版本号)，这是一个SHA1计算出来的一个非常大的数字，用十六进制表示\n\n4.`git reset`该命令用来回退到某个版本，在git中用`HEAD`表示当前版本，`HEAD^`表示上个版本，`HEAD^^`表示上上版本......\n以此类推，`HEAD~100`表示往上100个版本\n现在我们用命令回退到上个版本：\n```bash\ngit reset --hard HEAD^\nHEAD is now at 1f2508\n```\n可以根据版本号`commit id`指定回退到某个版本：\n`git reset --hard eede19`\n这里的版本号没必要写全，前几位就可以了，Git会自动去找，这样我们就又回到最新的版本了。Git版本的回退速度非常快，在Git内部有个指向当前版本的指针`HEAD`，所以我们在进行版本回退或回到最新的版本的时候，Git只是帮我们将`HEAD`指针指向某个版本号。\n\n5.`git reflog`记录你的每一条命令，可以查看`commit id`,提交具体的操作和提交输入的信息，命令如下：\n```bash\nroot@instance-my0hsclo:/usr/local/ergzC0de# git reflog \neede197 HEAD@{0}: rebase finished: returning to refs/heads/master\neede197 HEAD@{1}: pull --rebase origin master: init hexo repo\n1f25086 HEAD@{2}: pull --rebase origin master: checkout 1f2508638115730cb301f73c51b9971fca5c7f09\nfe14566 HEAD@{3}: commit (initial): init hexo repo\n```\n\n6.`git checkout -- file`丢弃工作区的修改，文件修改还没有添加到暂存区，命令如下：\n```bash\ngit checkout -- readme.txt\n```\n当文件修改后已经添加到了暂存区又作了修改，现在撤销修改就回到添加到暂存区后的状态。\n\n7.`git reset HEAD file`把添加到暂存区的内容撤销，`HEAD`表示最新的版本\n```bash\nroot@instance-my0hsclo:/usr/local/learngit# git reset HEAD readme.txt\nUnstaged changes after reset:\nM\treadme.txt\n```\n8.查看分支：`git branch `\n\n9.创建分支：`git branch <name>`\n我们创建新分支dev时，Git会新建一个指针叫`dev`，指向当前分支`master`的相同的提交点（HEAD指针指向的是当前分支），再把`HEAD`指向`dev`，之后的操作就在`dev`分支上完成，如图：\n\n![upload successful](/images/git_201912101316.png)\n\n10.切换分支:`git checkout <name>`或者`git switch <name>`\n创建并切换分支`git checkout -b <name>`或者`git switch -c <name>`\n\n11.合并指定分支到当前分支上：`git merge <name>`\n当`dev`分支开发结束后，我们需要把`dev`分支合并到`master`（主分支）上，Git是如何操作的呢？Git直接把`master`指向`dev`的当前提交，就完成了合并，这些操作都是靠指针来完成，文件并没有发生变化，如图：\n\n![upload successful](/images/git_201912101318.png)\n分支合并时，Git默认使用`Fast forward`模式，使用这种模式，删除分支后，会丢掉分支的历史信息，使用`--no-ff`可以禁用`Fast forward`模式 `git merge --no-ff -m \"merge with no-ff\" dev`，这样每次合并会创建一个新的commit，加上`-m`参数，写上commit的描述。\n\n12.删除分支:`git branch -d <name>`\n合并完分支后就可以删除`dev`分支，，删除`dev`分支就是把`dev`指针给删掉，删掉后我们就剩下了一条`master`分支，如图：\n\n![upload successful](/images/201912101319.png)\n\n13.查看分支合并图:`git log --graph`\n\n团队协作的分支开发流程图：\n\n![upload successful](/images/git_201912101326.png)\n\n参考：\n<https://www.liaoxuefeng.com/wiki/896043488029600>\n\n","source":"_posts/git-common-commands-using.md","raw":"title: Git常用命令使用\ntags:\n  - git\ncategories:\n  - git\ndate: 2019-11-26 19:26:00\n---\n1.查看工作区的状态：`git status`\n\n2.查看文件具体修改了什么内容：`git diff file`\n\n3.查看提交的历史记录，该命令显示从最近到最远的历史记录：`git log`，如果嫌输出信息太多，可以试试加上`--pretty=oneline`参数：`git log --graph --pretty=oneline --abbrev-commit`，命令如下：\n```bash\ngit log --graph --pretty=oneline --abbrev-commit\neede197ffb267fbda60482da9554ba654ff523e3 init hexo repo\n1f2508638115730cb301f73c51b9971fca5c7f09 Initial commit\n```\n上面输出的一大串数字其实是 commit id(版本号)，这是一个SHA1计算出来的一个非常大的数字，用十六进制表示\n\n4.`git reset`该命令用来回退到某个版本，在git中用`HEAD`表示当前版本，`HEAD^`表示上个版本，`HEAD^^`表示上上版本......\n以此类推，`HEAD~100`表示往上100个版本\n现在我们用命令回退到上个版本：\n```bash\ngit reset --hard HEAD^\nHEAD is now at 1f2508\n```\n可以根据版本号`commit id`指定回退到某个版本：\n`git reset --hard eede19`\n这里的版本号没必要写全，前几位就可以了，Git会自动去找，这样我们就又回到最新的版本了。Git版本的回退速度非常快，在Git内部有个指向当前版本的指针`HEAD`，所以我们在进行版本回退或回到最新的版本的时候，Git只是帮我们将`HEAD`指针指向某个版本号。\n\n5.`git reflog`记录你的每一条命令，可以查看`commit id`,提交具体的操作和提交输入的信息，命令如下：\n```bash\nroot@instance-my0hsclo:/usr/local/ergzC0de# git reflog \neede197 HEAD@{0}: rebase finished: returning to refs/heads/master\neede197 HEAD@{1}: pull --rebase origin master: init hexo repo\n1f25086 HEAD@{2}: pull --rebase origin master: checkout 1f2508638115730cb301f73c51b9971fca5c7f09\nfe14566 HEAD@{3}: commit (initial): init hexo repo\n```\n\n6.`git checkout -- file`丢弃工作区的修改，文件修改还没有添加到暂存区，命令如下：\n```bash\ngit checkout -- readme.txt\n```\n当文件修改后已经添加到了暂存区又作了修改，现在撤销修改就回到添加到暂存区后的状态。\n\n7.`git reset HEAD file`把添加到暂存区的内容撤销，`HEAD`表示最新的版本\n```bash\nroot@instance-my0hsclo:/usr/local/learngit# git reset HEAD readme.txt\nUnstaged changes after reset:\nM\treadme.txt\n```\n8.查看分支：`git branch `\n\n9.创建分支：`git branch <name>`\n我们创建新分支dev时，Git会新建一个指针叫`dev`，指向当前分支`master`的相同的提交点（HEAD指针指向的是当前分支），再把`HEAD`指向`dev`，之后的操作就在`dev`分支上完成，如图：\n\n![upload successful](/images/git_201912101316.png)\n\n10.切换分支:`git checkout <name>`或者`git switch <name>`\n创建并切换分支`git checkout -b <name>`或者`git switch -c <name>`\n\n11.合并指定分支到当前分支上：`git merge <name>`\n当`dev`分支开发结束后，我们需要把`dev`分支合并到`master`（主分支）上，Git是如何操作的呢？Git直接把`master`指向`dev`的当前提交，就完成了合并，这些操作都是靠指针来完成，文件并没有发生变化，如图：\n\n![upload successful](/images/git_201912101318.png)\n分支合并时，Git默认使用`Fast forward`模式，使用这种模式，删除分支后，会丢掉分支的历史信息，使用`--no-ff`可以禁用`Fast forward`模式 `git merge --no-ff -m \"merge with no-ff\" dev`，这样每次合并会创建一个新的commit，加上`-m`参数，写上commit的描述。\n\n12.删除分支:`git branch -d <name>`\n合并完分支后就可以删除`dev`分支，，删除`dev`分支就是把`dev`指针给删掉，删掉后我们就剩下了一条`master`分支，如图：\n\n![upload successful](/images/201912101319.png)\n\n13.查看分支合并图:`git log --graph`\n\n团队协作的分支开发流程图：\n\n![upload successful](/images/git_201912101326.png)\n\n参考：\n<https://www.liaoxuefeng.com/wiki/896043488029600>\n\n","slug":"git-common-commands-using","published":1,"updated":"2019-12-10T05:31:40.968Z","_id":"ck3zcrkvz0000p0d2dqf0h55r","comments":1,"layout":"post","photos":[],"link":"","content":"<p>1.查看工作区的状态：<code>git status</code></p>\n<p>2.查看文件具体修改了什么内容：<code>git diff file</code></p>\n<p>3.查看提交的历史记录，该命令显示从最近到最远的历史记录：<code>git log</code>，如果嫌输出信息太多，可以试试加上<code>--pretty=oneline</code>参数：<code>git log --graph --pretty=oneline --abbrev-commit</code>，命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> --graph --pretty=oneline --abbrev-commit</span><br><span class=\"line\">eede197ffb267fbda60482da9554ba654ff523e3 init hexo repo</span><br><span class=\"line\">1f2508638115730cb301f73c51b9971fca5c7f09 Initial commit</span><br></pre></td></tr></table></figure>\n<p>上面输出的一大串数字其实是 commit id(版本号)，这是一个SHA1计算出来的一个非常大的数字，用十六进制表示</p>\n<p>4.<code>git reset</code>该命令用来回退到某个版本，在git中用<code>HEAD</code>表示当前版本，<code>HEAD^</code>表示上个版本，<code>HEAD^^</code>表示上上版本……<br>以此类推，<code>HEAD~100</code>表示往上100个版本<br>现在我们用命令回退到上个版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD^</span><br><span class=\"line\">HEAD is now at 1f2508</span><br></pre></td></tr></table></figure>\n<p>可以根据版本号<code>commit id</code>指定回退到某个版本：<br><code>git reset --hard eede19</code><br>这里的版本号没必要写全，前几位就可以了，Git会自动去找，这样我们就又回到最新的版本了。Git版本的回退速度非常快，在Git内部有个指向当前版本的指针<code>HEAD</code>，所以我们在进行版本回退或回到最新的版本的时候，Git只是帮我们将<code>HEAD</code>指针指向某个版本号。</p>\n<p>5.<code>git reflog</code>记录你的每一条命令，可以查看<code>commit id</code>,提交具体的操作和提交输入的信息，命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@instance-my0hsclo:/usr/<span class=\"built_in\">local</span>/ergzC0de<span class=\"comment\"># git reflog </span></span><br><span class=\"line\">eede197 HEAD@&#123;0&#125;: rebase finished: returning to refs/heads/master</span><br><span class=\"line\">eede197 HEAD@&#123;1&#125;: pull --rebase origin master: init hexo repo</span><br><span class=\"line\">1f25086 HEAD@&#123;2&#125;: pull --rebase origin master: checkout 1f2508638115730cb301f73c51b9971fca5c7f09</span><br><span class=\"line\">fe14566 HEAD@&#123;3&#125;: commit (initial): init hexo repo</span><br></pre></td></tr></table></figure>\n\n<p>6.<code>git checkout -- file</code>丢弃工作区的修改，文件修改还没有添加到暂存区，命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -- readme.txt</span><br></pre></td></tr></table></figure>\n<p>当文件修改后已经添加到了暂存区又作了修改，现在撤销修改就回到添加到暂存区后的状态。</p>\n<p>7.<code>git reset HEAD file</code>把添加到暂存区的内容撤销，<code>HEAD</code>表示最新的版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@instance-my0hsclo:/usr/<span class=\"built_in\">local</span>/learngit<span class=\"comment\"># git reset HEAD readme.txt</span></span><br><span class=\"line\">Unstaged changes after reset:</span><br><span class=\"line\">M\treadme.txt</span><br></pre></td></tr></table></figure>\n<p>8.查看分支：<code>git branch</code></p>\n<p>9.创建分支：<code>git branch &lt;name&gt;</code><br>我们创建新分支dev时，Git会新建一个指针叫<code>dev</code>，指向当前分支<code>master</code>的相同的提交点（HEAD指针指向的是当前分支），再把<code>HEAD</code>指向<code>dev</code>，之后的操作就在<code>dev</code>分支上完成，如图：</p>\n<p><img src=\"/images/git_201912101316.png\" alt=\"upload successful\"></p>\n<p>10.切换分支:<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code><br>创建并切换分支<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code></p>\n<p>11.合并指定分支到当前分支上：<code>git merge &lt;name&gt;</code><br>当<code>dev</code>分支开发结束后，我们需要把<code>dev</code>分支合并到<code>master</code>（主分支）上，Git是如何操作的呢？Git直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并，这些操作都是靠指针来完成，文件并没有发生变化，如图：</p>\n<p><img src=\"/images/git_201912101318.png\" alt=\"upload successful\"><br>分支合并时，Git默认使用<code>Fast forward</code>模式，使用这种模式，删除分支后，会丢掉分支的历史信息，使用<code>--no-ff</code>可以禁用<code>Fast forward</code>模式 <code>git merge --no-ff -m &quot;merge with no-ff&quot; dev</code>，这样每次合并会创建一个新的commit，加上<code>-m</code>参数，写上commit的描述。</p>\n<p>12.删除分支:<code>git branch -d &lt;name&gt;</code><br>合并完分支后就可以删除<code>dev</code>分支，，删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后我们就剩下了一条<code>master</code>分支，如图：</p>\n<p><img src=\"/images/201912101319.png\" alt=\"upload successful\"></p>\n<p>13.查看分支合并图:<code>git log --graph</code></p>\n<p>团队协作的分支开发流程图：</p>\n<p><img src=\"/images/git_201912101326.png\" alt=\"upload successful\"></p>\n<p>参考：<br><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/896043488029600</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.查看工作区的状态：<code>git status</code></p>\n<p>2.查看文件具体修改了什么内容：<code>git diff file</code></p>\n<p>3.查看提交的历史记录，该命令显示从最近到最远的历史记录：<code>git log</code>，如果嫌输出信息太多，可以试试加上<code>--pretty=oneline</code>参数：<code>git log --graph --pretty=oneline --abbrev-commit</code>，命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> --graph --pretty=oneline --abbrev-commit</span><br><span class=\"line\">eede197ffb267fbda60482da9554ba654ff523e3 init hexo repo</span><br><span class=\"line\">1f2508638115730cb301f73c51b9971fca5c7f09 Initial commit</span><br></pre></td></tr></table></figure>\n<p>上面输出的一大串数字其实是 commit id(版本号)，这是一个SHA1计算出来的一个非常大的数字，用十六进制表示</p>\n<p>4.<code>git reset</code>该命令用来回退到某个版本，在git中用<code>HEAD</code>表示当前版本，<code>HEAD^</code>表示上个版本，<code>HEAD^^</code>表示上上版本……<br>以此类推，<code>HEAD~100</code>表示往上100个版本<br>现在我们用命令回退到上个版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD^</span><br><span class=\"line\">HEAD is now at 1f2508</span><br></pre></td></tr></table></figure>\n<p>可以根据版本号<code>commit id</code>指定回退到某个版本：<br><code>git reset --hard eede19</code><br>这里的版本号没必要写全，前几位就可以了，Git会自动去找，这样我们就又回到最新的版本了。Git版本的回退速度非常快，在Git内部有个指向当前版本的指针<code>HEAD</code>，所以我们在进行版本回退或回到最新的版本的时候，Git只是帮我们将<code>HEAD</code>指针指向某个版本号。</p>\n<p>5.<code>git reflog</code>记录你的每一条命令，可以查看<code>commit id</code>,提交具体的操作和提交输入的信息，命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@instance-my0hsclo:/usr/<span class=\"built_in\">local</span>/ergzC0de<span class=\"comment\"># git reflog </span></span><br><span class=\"line\">eede197 HEAD@&#123;0&#125;: rebase finished: returning to refs/heads/master</span><br><span class=\"line\">eede197 HEAD@&#123;1&#125;: pull --rebase origin master: init hexo repo</span><br><span class=\"line\">1f25086 HEAD@&#123;2&#125;: pull --rebase origin master: checkout 1f2508638115730cb301f73c51b9971fca5c7f09</span><br><span class=\"line\">fe14566 HEAD@&#123;3&#125;: commit (initial): init hexo repo</span><br></pre></td></tr></table></figure>\n\n<p>6.<code>git checkout -- file</code>丢弃工作区的修改，文件修改还没有添加到暂存区，命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -- readme.txt</span><br></pre></td></tr></table></figure>\n<p>当文件修改后已经添加到了暂存区又作了修改，现在撤销修改就回到添加到暂存区后的状态。</p>\n<p>7.<code>git reset HEAD file</code>把添加到暂存区的内容撤销，<code>HEAD</code>表示最新的版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@instance-my0hsclo:/usr/<span class=\"built_in\">local</span>/learngit<span class=\"comment\"># git reset HEAD readme.txt</span></span><br><span class=\"line\">Unstaged changes after reset:</span><br><span class=\"line\">M\treadme.txt</span><br></pre></td></tr></table></figure>\n<p>8.查看分支：<code>git branch</code></p>\n<p>9.创建分支：<code>git branch &lt;name&gt;</code><br>我们创建新分支dev时，Git会新建一个指针叫<code>dev</code>，指向当前分支<code>master</code>的相同的提交点（HEAD指针指向的是当前分支），再把<code>HEAD</code>指向<code>dev</code>，之后的操作就在<code>dev</code>分支上完成，如图：</p>\n<p><img src=\"/images/git_201912101316.png\" alt=\"upload successful\"></p>\n<p>10.切换分支:<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code><br>创建并切换分支<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code></p>\n<p>11.合并指定分支到当前分支上：<code>git merge &lt;name&gt;</code><br>当<code>dev</code>分支开发结束后，我们需要把<code>dev</code>分支合并到<code>master</code>（主分支）上，Git是如何操作的呢？Git直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并，这些操作都是靠指针来完成，文件并没有发生变化，如图：</p>\n<p><img src=\"/images/git_201912101318.png\" alt=\"upload successful\"><br>分支合并时，Git默认使用<code>Fast forward</code>模式，使用这种模式，删除分支后，会丢掉分支的历史信息，使用<code>--no-ff</code>可以禁用<code>Fast forward</code>模式 <code>git merge --no-ff -m &quot;merge with no-ff&quot; dev</code>，这样每次合并会创建一个新的commit，加上<code>-m</code>参数，写上commit的描述。</p>\n<p>12.删除分支:<code>git branch -d &lt;name&gt;</code><br>合并完分支后就可以删除<code>dev</code>分支，，删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后我们就剩下了一条<code>master</code>分支，如图：</p>\n<p><img src=\"/images/201912101319.png\" alt=\"upload successful\"></p>\n<p>13.查看分支合并图:<code>git log --graph</code></p>\n<p>团队协作的分支开发流程图：</p>\n<p><img src=\"/images/git_201912101326.png\" alt=\"upload successful\"></p>\n<p>参考：<br><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/896043488029600</a></p>\n"},{"title":"PM2介绍","author":"ergz","date":"2019-12-10T03:22:00.000Z","_content":"pm2 是一个带有负载均衡功能的Node应用的进程管理器。当你要把你的独立代码利用全部的服务器上的所有CPU，并保证进程永远都活着，0秒的重载， PM2是完美的。\n\n主要特性：\n\n1.内建负载均衡（使用Node cluster 集群模块）\n2.后台运行\n3.0秒停机重载，我理解大概意思是维护升级的时候不需要停机\n4.具有Ubuntu和CentOS的启动脚本\n5.停止不稳定的进程（避免无限循环）\n6.控制台检测\n7.提供 HTTP API\n8.远程控制和实时的接口API(Nodejs模块,允许和PM2进程管理器交互 )\n\n##### 安装\n\n``` bash\nnpm install -g pm2 #命令行安装pm2\n```\n##### 用法\n\n``` bash\npm2 start app.js -i 4 #后台运行pm2，启动4个app.js\npm2 start app.js --name my-api  #命名进程\npm2 list  #显示所有进程状态\npm2 monit  #监视所有进程\npm2 logs  #显示所有进程日志\npm2 stop all  #停止所有进程\npm2 restart all  #重启所有进程\npm2 reload all  #0秒停机重载进程 (用于 NETWORKED 进程)\npm2 stop 0  #停止指定的进程\npm2 restart 0  #重启指定的进程\npm2 startup  #产生 init 脚本 保持进程活着\npm2 web  #运行健壮的 computer API endpoint\npm2 delete 0  #杀死指定的进程\npm2 delete all  #杀死全部进程\n\n运行进程的不同方式：\npm2 start app.js -i max  #根据有效CPU数目启动最大进程数目\npm2 start app.js -i 3  #启动3个进程\npm2 start app.js -x  #用fork模式启动 app.js 而不是使用 cluster\npm2 start app.js -x -- -a 23  #用fork模式启动 app.js 并且传递参数 (-a 23)\npm2 start app.js --name serverone #启动一个进程并把它命名为 serverone\npm2 stop serverone  #停止serverone进程\npm2 start app.json  #启动进程, 在app.json里设置选项\npm2 start app.js -i max -- -a 23  #在--之后给app.js传递参数\npm2 start app.js -i max -e err.log -o out.log  #启动 并生成一个配置文件\n你也可以执行用其他语言编写的app ( fork 模式):\npm2 start my-bash-script.sh -x --interpreter bash\npm2 start my-python-script.py -x --interpreter python\npm2 list #列出由pm2管理的所有进程信息，还会显示一个进程会被启动多少次\npm2 monit #监视每个node进程的CPU和内存的使用情况。\n```\n","source":"_posts/pm2-common-commands-introduction.md","raw":"title: PM2介绍\ntags:\n  - pm2\ncategories:\n  - linux\nauthor: ergz\ndate: 2019-12-10 11:22:00\n---\npm2 是一个带有负载均衡功能的Node应用的进程管理器。当你要把你的独立代码利用全部的服务器上的所有CPU，并保证进程永远都活着，0秒的重载， PM2是完美的。\n\n主要特性：\n\n1.内建负载均衡（使用Node cluster 集群模块）\n2.后台运行\n3.0秒停机重载，我理解大概意思是维护升级的时候不需要停机\n4.具有Ubuntu和CentOS的启动脚本\n5.停止不稳定的进程（避免无限循环）\n6.控制台检测\n7.提供 HTTP API\n8.远程控制和实时的接口API(Nodejs模块,允许和PM2进程管理器交互 )\n\n##### 安装\n\n``` bash\nnpm install -g pm2 #命令行安装pm2\n```\n##### 用法\n\n``` bash\npm2 start app.js -i 4 #后台运行pm2，启动4个app.js\npm2 start app.js --name my-api  #命名进程\npm2 list  #显示所有进程状态\npm2 monit  #监视所有进程\npm2 logs  #显示所有进程日志\npm2 stop all  #停止所有进程\npm2 restart all  #重启所有进程\npm2 reload all  #0秒停机重载进程 (用于 NETWORKED 进程)\npm2 stop 0  #停止指定的进程\npm2 restart 0  #重启指定的进程\npm2 startup  #产生 init 脚本 保持进程活着\npm2 web  #运行健壮的 computer API endpoint\npm2 delete 0  #杀死指定的进程\npm2 delete all  #杀死全部进程\n\n运行进程的不同方式：\npm2 start app.js -i max  #根据有效CPU数目启动最大进程数目\npm2 start app.js -i 3  #启动3个进程\npm2 start app.js -x  #用fork模式启动 app.js 而不是使用 cluster\npm2 start app.js -x -- -a 23  #用fork模式启动 app.js 并且传递参数 (-a 23)\npm2 start app.js --name serverone #启动一个进程并把它命名为 serverone\npm2 stop serverone  #停止serverone进程\npm2 start app.json  #启动进程, 在app.json里设置选项\npm2 start app.js -i max -- -a 23  #在--之后给app.js传递参数\npm2 start app.js -i max -e err.log -o out.log  #启动 并生成一个配置文件\n你也可以执行用其他语言编写的app ( fork 模式):\npm2 start my-bash-script.sh -x --interpreter bash\npm2 start my-python-script.py -x --interpreter python\npm2 list #列出由pm2管理的所有进程信息，还会显示一个进程会被启动多少次\npm2 monit #监视每个node进程的CPU和内存的使用情况。\n```\n","slug":"pm2-common-commands-introduction","published":1,"updated":"2019-12-10T04:15:11.515Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3zcrkwb0001p0d2c0tv2hc1","content":"<p>pm2 是一个带有负载均衡功能的Node应用的进程管理器。当你要把你的独立代码利用全部的服务器上的所有CPU，并保证进程永远都活着，0秒的重载， PM2是完美的。</p>\n<p>主要特性：</p>\n<p>1.内建负载均衡（使用Node cluster 集群模块）<br>2.后台运行<br>3.0秒停机重载，我理解大概意思是维护升级的时候不需要停机<br>4.具有Ubuntu和CentOS的启动脚本<br>5.停止不稳定的进程（避免无限循环）<br>6.控制台检测<br>7.提供 HTTP API<br>8.远程控制和实时的接口API(Nodejs模块,允许和PM2进程管理器交互 )</p>\n<h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g pm2 <span class=\"comment\">#命令行安装pm2</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start app.js -i 4 <span class=\"comment\">#后台运行pm2，启动4个app.js</span></span><br><span class=\"line\">pm2 start app.js --name my-api  <span class=\"comment\">#命名进程</span></span><br><span class=\"line\">pm2 list  <span class=\"comment\">#显示所有进程状态</span></span><br><span class=\"line\">pm2 monit  <span class=\"comment\">#监视所有进程</span></span><br><span class=\"line\">pm2 logs  <span class=\"comment\">#显示所有进程日志</span></span><br><span class=\"line\">pm2 stop all  <span class=\"comment\">#停止所有进程</span></span><br><span class=\"line\">pm2 restart all  <span class=\"comment\">#重启所有进程</span></span><br><span class=\"line\">pm2 reload all  <span class=\"comment\">#0秒停机重载进程 (用于 NETWORKED 进程)</span></span><br><span class=\"line\">pm2 stop 0  <span class=\"comment\">#停止指定的进程</span></span><br><span class=\"line\">pm2 restart 0  <span class=\"comment\">#重启指定的进程</span></span><br><span class=\"line\">pm2 startup  <span class=\"comment\">#产生 init 脚本 保持进程活着</span></span><br><span class=\"line\">pm2 web  <span class=\"comment\">#运行健壮的 computer API endpoint</span></span><br><span class=\"line\">pm2 delete 0  <span class=\"comment\">#杀死指定的进程</span></span><br><span class=\"line\">pm2 delete all  <span class=\"comment\">#杀死全部进程</span></span><br><span class=\"line\"></span><br><span class=\"line\">运行进程的不同方式：</span><br><span class=\"line\">pm2 start app.js -i max  <span class=\"comment\">#根据有效CPU数目启动最大进程数目</span></span><br><span class=\"line\">pm2 start app.js -i 3  <span class=\"comment\">#启动3个进程</span></span><br><span class=\"line\">pm2 start app.js -x  <span class=\"comment\">#用fork模式启动 app.js 而不是使用 cluster</span></span><br><span class=\"line\">pm2 start app.js -x -- -a 23  <span class=\"comment\">#用fork模式启动 app.js 并且传递参数 (-a 23)</span></span><br><span class=\"line\">pm2 start app.js --name serverone <span class=\"comment\">#启动一个进程并把它命名为 serverone</span></span><br><span class=\"line\">pm2 stop serverone  <span class=\"comment\">#停止serverone进程</span></span><br><span class=\"line\">pm2 start app.json  <span class=\"comment\">#启动进程, 在app.json里设置选项</span></span><br><span class=\"line\">pm2 start app.js -i max -- -a 23  <span class=\"comment\">#在--之后给app.js传递参数</span></span><br><span class=\"line\">pm2 start app.js -i max -e err.log -o out.log  <span class=\"comment\">#启动 并生成一个配置文件</span></span><br><span class=\"line\">你也可以执行用其他语言编写的app ( fork 模式):</span><br><span class=\"line\">pm2 start my-bash-script.sh -x --interpreter bash</span><br><span class=\"line\">pm2 start my-python-script.py -x --interpreter python</span><br><span class=\"line\">pm2 list <span class=\"comment\">#列出由pm2管理的所有进程信息，还会显示一个进程会被启动多少次</span></span><br><span class=\"line\">pm2 monit <span class=\"comment\">#监视每个node进程的CPU和内存的使用情况。</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>pm2 是一个带有负载均衡功能的Node应用的进程管理器。当你要把你的独立代码利用全部的服务器上的所有CPU，并保证进程永远都活着，0秒的重载， PM2是完美的。</p>\n<p>主要特性：</p>\n<p>1.内建负载均衡（使用Node cluster 集群模块）<br>2.后台运行<br>3.0秒停机重载，我理解大概意思是维护升级的时候不需要停机<br>4.具有Ubuntu和CentOS的启动脚本<br>5.停止不稳定的进程（避免无限循环）<br>6.控制台检测<br>7.提供 HTTP API<br>8.远程控制和实时的接口API(Nodejs模块,允许和PM2进程管理器交互 )</p>\n<h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g pm2 <span class=\"comment\">#命令行安装pm2</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start app.js -i 4 <span class=\"comment\">#后台运行pm2，启动4个app.js</span></span><br><span class=\"line\">pm2 start app.js --name my-api  <span class=\"comment\">#命名进程</span></span><br><span class=\"line\">pm2 list  <span class=\"comment\">#显示所有进程状态</span></span><br><span class=\"line\">pm2 monit  <span class=\"comment\">#监视所有进程</span></span><br><span class=\"line\">pm2 logs  <span class=\"comment\">#显示所有进程日志</span></span><br><span class=\"line\">pm2 stop all  <span class=\"comment\">#停止所有进程</span></span><br><span class=\"line\">pm2 restart all  <span class=\"comment\">#重启所有进程</span></span><br><span class=\"line\">pm2 reload all  <span class=\"comment\">#0秒停机重载进程 (用于 NETWORKED 进程)</span></span><br><span class=\"line\">pm2 stop 0  <span class=\"comment\">#停止指定的进程</span></span><br><span class=\"line\">pm2 restart 0  <span class=\"comment\">#重启指定的进程</span></span><br><span class=\"line\">pm2 startup  <span class=\"comment\">#产生 init 脚本 保持进程活着</span></span><br><span class=\"line\">pm2 web  <span class=\"comment\">#运行健壮的 computer API endpoint</span></span><br><span class=\"line\">pm2 delete 0  <span class=\"comment\">#杀死指定的进程</span></span><br><span class=\"line\">pm2 delete all  <span class=\"comment\">#杀死全部进程</span></span><br><span class=\"line\"></span><br><span class=\"line\">运行进程的不同方式：</span><br><span class=\"line\">pm2 start app.js -i max  <span class=\"comment\">#根据有效CPU数目启动最大进程数目</span></span><br><span class=\"line\">pm2 start app.js -i 3  <span class=\"comment\">#启动3个进程</span></span><br><span class=\"line\">pm2 start app.js -x  <span class=\"comment\">#用fork模式启动 app.js 而不是使用 cluster</span></span><br><span class=\"line\">pm2 start app.js -x -- -a 23  <span class=\"comment\">#用fork模式启动 app.js 并且传递参数 (-a 23)</span></span><br><span class=\"line\">pm2 start app.js --name serverone <span class=\"comment\">#启动一个进程并把它命名为 serverone</span></span><br><span class=\"line\">pm2 stop serverone  <span class=\"comment\">#停止serverone进程</span></span><br><span class=\"line\">pm2 start app.json  <span class=\"comment\">#启动进程, 在app.json里设置选项</span></span><br><span class=\"line\">pm2 start app.js -i max -- -a 23  <span class=\"comment\">#在--之后给app.js传递参数</span></span><br><span class=\"line\">pm2 start app.js -i max -e err.log -o out.log  <span class=\"comment\">#启动 并生成一个配置文件</span></span><br><span class=\"line\">你也可以执行用其他语言编写的app ( fork 模式):</span><br><span class=\"line\">pm2 start my-bash-script.sh -x --interpreter bash</span><br><span class=\"line\">pm2 start my-python-script.py -x --interpreter python</span><br><span class=\"line\">pm2 list <span class=\"comment\">#列出由pm2管理的所有进程信息，还会显示一个进程会被启动多少次</span></span><br><span class=\"line\">pm2 monit <span class=\"comment\">#监视每个node进程的CPU和内存的使用情况。</span></span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck3z8h59600002hd2f2uuhb5l","category_id":"ck3z8h59f00012hd25tvveij3","_id":"ck3z8h59p00042hd231es7so4"},{"post_id":"ck3zcrkwb0001p0d2c0tv2hc1","category_id":"ck3zcrkwh0003p0d26n7o9ua8","_id":"ck3zcrkws0006p0d239j742rv"},{"post_id":"ck3zcrkvz0000p0d2dqf0h55r","category_id":"ck3zfj5ts0000p7d2f8nvcarp","_id":"ck3zfj5tz0003p7d20n0c14h6"}],"PostTag":[{"post_id":"ck3z8h59600002hd2f2uuhb5l","tag_id":"ck3z8h59l00022hd2d9s645it","_id":"ck3z8h59q00052hd2cvjy18ru"},{"post_id":"ck3z8h59600002hd2f2uuhb5l","tag_id":"ck3z8h59o00032hd2c0zo559e","_id":"ck3z8h59q00062hd23it318on"},{"post_id":"ck3zcrkwb0001p0d2c0tv2hc1","tag_id":"ck3z8h59l00022hd2d9s645it","_id":"ck3zcrkwr0005p0d21vun05fe"},{"post_id":"ck3zcrkvz0000p0d2dqf0h55r","tag_id":"ck3zfj5tw0001p7d2gk33awla","_id":"ck3zfj5ty0002p7d262641tpv"}],"Tag":[{"name":"java","_id":"ck3wh0tfu00046kd28xpq9pj2"},{"name":"python","_id":"ck3wh0tg200056kd22ote3bxy"},{"name":"pm2","_id":"ck3z8h59l00022hd2d9s645it"},{"name":"hexo","_id":"ck3z8h59o00032hd2c0zo559e"},{"name":"git","_id":"ck3zfj5tw0001p7d2gk33awla"}]}}